
C:/ECE243/project/flappy_bird_project/project/project.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	54 0e 00 00 58 0e 00 00 5c 0e 00 00 60 0e 00 00     T...X...\...`...
  30:	64 0e 00 00 b4 15 00 00 50 0f 00 00 68 0e 00 00     d.......P...h...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00051d 	bl	1550 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0004c9b4 	.word	0x0004c9b4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	0004cdf8 	.word	0x0004cdf8

00000124 <__cs3_heap_start_ptr>:
     124:	0004cfb8 	.word	0x0004cfb8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	0004ce00 	.word	0x0004ce00
     170:	0004ce03 	.word	0x0004ce03
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <__cs3_region_zero_size_ram>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <__cs3_region_zero_size_ram+0x4>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <__cs3_region_zero_size_ram+0x8>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	0004ce00 	.word	0x0004ce00
     1bc:	0004ce00 	.word	0x0004ce00
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	0004ce00 	.word	0x0004ce00
     200:	00000000 	.word	0x00000000
     204:	00001640 	.word	0x00001640

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001640 	.word	0x00001640
     250:	0004ce04 	.word	0x0004ce04
     254:	0004c9b8 	.word	0x0004c9b8
     258:	00000000 	.word	0x00000000

0000025c <checkKeyPress>:
}

void checkKeyPress()
{

    if (*PUSHBUTTONS == 0b0001 || *PUSHBUTTONS == 0b1101)
     25c:	e3a03000 	mov	r3, #0
     260:	e34f3f20 	movt	r3, #65312	; 0xff20
     264:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     268:	e3530001 	cmp	r3, #1
     26c:	0a000004 	beq	284 <checkKeyPress+0x28>
     270:	e3a03000 	mov	r3, #0
     274:	e34f3f20 	movt	r3, #65312	; 0xff20
     278:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     27c:	e353000d 	cmp	r3, #13
     280:	1a000006 	bne	2a0 <checkKeyPress+0x44>
    {
        Ship1dy = 0;
     284:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     288:	e3403004 	movt	r3, #4
     28c:	e3a02000 	mov	r2, #0
     290:	e5832000 	str	r2, [r3]
        Ship2dy = 1;
     294:	e3a02001 	mov	r2, #1
     298:	e5832004 	str	r2, [r3, #4]
     29c:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0010 || *PUSHBUTTONS == 0b1110)
     2a0:	e3a03000 	mov	r3, #0
     2a4:	e34f3f20 	movt	r3, #65312	; 0xff20
     2a8:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     2ac:	e3530002 	cmp	r3, #2
     2b0:	0a000004 	beq	2c8 <checkKeyPress+0x6c>
     2b4:	e3a03000 	mov	r3, #0
     2b8:	e34f3f20 	movt	r3, #65312	; 0xff20
     2bc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     2c0:	e353000e 	cmp	r3, #14
     2c4:	1a000006 	bne	2e4 <checkKeyPress+0x88>
    {
        Ship1dy = 0;
     2c8:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     2cc:	e3403004 	movt	r3, #4
     2d0:	e3a02000 	mov	r2, #0
     2d4:	e5832000 	str	r2, [r3]
        Ship2dy = -1;
     2d8:	e3e02000 	mvn	r2, #0
     2dc:	e5832004 	str	r2, [r3, #4]
     2e0:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0100 || *PUSHBUTTONS == 0b0111)
     2e4:	e3a03000 	mov	r3, #0
     2e8:	e34f3f20 	movt	r3, #65312	; 0xff20
     2ec:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     2f0:	e3530004 	cmp	r3, #4
     2f4:	0a000004 	beq	30c <checkKeyPress+0xb0>
     2f8:	e3a03000 	mov	r3, #0
     2fc:	e34f3f20 	movt	r3, #65312	; 0xff20
     300:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     304:	e3530007 	cmp	r3, #7
     308:	1a000006 	bne	328 <checkKeyPress+0xcc>
    {
        Ship2dy = 0;
     30c:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     310:	e3403004 	movt	r3, #4
     314:	e3a02000 	mov	r2, #0
     318:	e5832004 	str	r2, [r3, #4]
        Ship1dy = 1;
     31c:	e3a02001 	mov	r2, #1
     320:	e5832000 	str	r2, [r3]
     324:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b1000 || *PUSHBUTTONS == 0b1011)
     328:	e3a03000 	mov	r3, #0
     32c:	e34f3f20 	movt	r3, #65312	; 0xff20
     330:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     334:	e3530008 	cmp	r3, #8
     338:	0a000004 	beq	350 <checkKeyPress+0xf4>
     33c:	e3a03000 	mov	r3, #0
     340:	e34f3f20 	movt	r3, #65312	; 0xff20
     344:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     348:	e353000b 	cmp	r3, #11
     34c:	1a000006 	bne	36c <checkKeyPress+0x110>
    {
        Ship2dy = 0;
     350:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     354:	e3403004 	movt	r3, #4
     358:	e3a02000 	mov	r2, #0
     35c:	e5832004 	str	r2, [r3, #4]
        Ship1dy = -1;
     360:	e3e02000 	mvn	r2, #0
     364:	e5832000 	str	r2, [r3]
     368:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b1001)
     36c:	e3a03000 	mov	r3, #0
     370:	e34f3f20 	movt	r3, #65312	; 0xff20
     374:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     378:	e3530009 	cmp	r3, #9
     37c:	1a000006 	bne	39c <checkKeyPress+0x140>
    {
        Ship2dy = 1;
     380:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     384:	e3403004 	movt	r3, #4
     388:	e3a02001 	mov	r2, #1
     38c:	e5832004 	str	r2, [r3, #4]
        Ship1dy = -1;
     390:	e3e02000 	mvn	r2, #0
     394:	e5832000 	str	r2, [r3]
     398:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0110)
     39c:	e3a03000 	mov	r3, #0
     3a0:	e34f3f20 	movt	r3, #65312	; 0xff20
     3a4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     3a8:	e3530006 	cmp	r3, #6
     3ac:	1a000006 	bne	3cc <checkKeyPress+0x170>
    {
        Ship1dy = 1;
     3b0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     3b4:	e3403004 	movt	r3, #4
     3b8:	e3a02001 	mov	r2, #1
     3bc:	e5832000 	str	r2, [r3]
        Ship2dy = -1;
     3c0:	e3e02000 	mvn	r2, #0
     3c4:	e5832004 	str	r2, [r3, #4]
     3c8:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0101)
     3cc:	e3a03000 	mov	r3, #0
     3d0:	e34f3f20 	movt	r3, #65312	; 0xff20
     3d4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     3d8:	e3530005 	cmp	r3, #5
     3dc:	1a000005 	bne	3f8 <checkKeyPress+0x19c>
    {
        Ship1dy = 1;
     3e0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     3e4:	e3403004 	movt	r3, #4
     3e8:	e3a02001 	mov	r2, #1
     3ec:	e5832000 	str	r2, [r3]
        Ship2dy = 1;
     3f0:	e5832004 	str	r2, [r3, #4]
     3f4:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b1010)
     3f8:	e3a03000 	mov	r3, #0
     3fc:	e34f3f20 	movt	r3, #65312	; 0xff20
     400:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     404:	e353000a 	cmp	r3, #10
    {
        Ship1dy = -1;
     408:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     40c:	e3403004 	movt	r3, #4
     410:	03e02000 	mvneq	r2, #0
        Ship2dy = -1;
    }
    else
    {
        Ship1dy = 0;
     414:	13a02000 	movne	r2, #0
     418:	e5832000 	str	r2, [r3]
        Ship2dy = 0;
     41c:	e5832004 	str	r2, [r3, #4]
     420:	e12fff1e 	bx	lr

00000424 <initialize>:
        }
    }
}

void initialize()
{
     424:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     428:	e59f5114 	ldr	r5, [pc, #276]	; 544 <initialize+0x120>
     42c:	e2854008 	add	r4, r5, #8
     430:	e3a06000 	mov	r6, #0
    // initialize location and direction of rectangles(not shown)
    for (int i = 0; i < numAsteroids; i++)
    {
        // initialize direction
        Asteroids[i].dx = 3 * (((rand() % 2) * 2) - 1); // 1 or -1
        Asteroids[i].dy = 0;
     434:	e1a0b006 	mov	r11, r6

        // initialize x and y positions
        Asteroids[i].x = rand() % 319;
     438:	e30489d5 	movw	r8, #18901	; 0x49d5
     43c:	e343835c 	movt	r8, #13148	; 0x335c
        Asteroids[i].y = rand() % 239;
     440:	e30c773b 	movw	r7, #51003	; 0xc73b
     444:	e348791a 	movt	r7, #35098	; 0x891a
        ONCHIP[i].x = Asteroids[i].x;
     448:	e30cae1c 	movw	r10, #52764	; 0xce1c
     44c:	e340a004 	movt	r10, #4
     450:	e28a90a8 	add	r9, r10, #168	; 0xa8
        ONCHIP[i].y = Asteroids[i].y;
        SDRAM[i].x = Asteroids[i].x;
     454:	e28aa0f8 	add	r10, r10, #248	; 0xf8
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
    for (int i = 0; i < numAsteroids; i++)
    {
        // initialize direction
        Asteroids[i].dx = 3 * (((rand() % 2) * 2) - 1); // 1 or -1
     458:	eb00036f 	bl	121c <rand>
     45c:	e0803fa0 	add	r3, r0, r0, lsr #31
     460:	e2033001 	and	r3, r3, #1
     464:	e0430fa0 	sub	r0, r3, r0, lsr #31
     468:	e0800080 	add	r0, r0, r0, lsl #1
     46c:	e1a00080 	lsl	r0, r0, #1
     470:	e2400003 	sub	r0, r0, #3
     474:	e5850008 	str	r0, [r5, #8]
        Asteroids[i].dy = 0;
     478:	e585b00c 	str	r11, [r5, #12]

        // initialize x and y positions
        Asteroids[i].x = rand() % 319;
     47c:	eb000366 	bl	121c <rand>
     480:	e0c23098 	smull	r3, r2, r8, r0
     484:	e1a03fc0 	asr	r3, r0, #31
     488:	e0633342 	rsb	r3, r3, r2, asr #6
     48c:	e0832103 	add	r2, r3, r3, lsl #2
     490:	e0633302 	rsb	r3, r3, r2, lsl #6
     494:	e0630000 	rsb	r0, r3, r0
     498:	e5040008 	str	r0, [r4, #-8]
        Asteroids[i].y = rand() % 239;
     49c:	eb00035e 	bl	121c <rand>
     4a0:	e0c32097 	smull	r2, r3, r7, r0
     4a4:	e0833000 	add	r3, r3, r0
     4a8:	e1a02fc0 	asr	r2, r0, #31
     4ac:	e06233c3 	rsb	r3, r2, r3, asr #7
     4b0:	e0632203 	rsb	r2, r3, r3, lsl #4
     4b4:	e0633202 	rsb	r3, r3, r2, lsl #4
     4b8:	e0633000 	rsb	r3, r3, r0
     4bc:	e5043004 	str	r3, [r4, #-4]
        ONCHIP[i].x = Asteroids[i].x;
     4c0:	e5141008 	ldr	r1, [r4, #-8]
     4c4:	e1a02009 	mov	r2, r9
     4c8:	e7a21006 	str	r1, [r2, r6]!
        ONCHIP[i].y = Asteroids[i].y;
     4cc:	e5823004 	str	r3, [r2, #4]
        SDRAM[i].x = Asteroids[i].x;
     4d0:	e1a0200a 	mov	r2, r10
     4d4:	e7a21006 	str	r1, [r2, r6]!
        SDRAM[i].y = Asteroids[i].y;
     4d8:	e5823004 	str	r3, [r2, #4]
     4dc:	e2844010 	add	r4, r4, #16
     4e0:	e2855010 	add	r5, r5, #16
     4e4:	e2866008 	add	r6, r6, #8
void initialize()
{
    // initialize
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
    for (int i = 0; i < numAsteroids; i++)
     4e8:	e3560050 	cmp	r6, #80	; 0x50
     4ec:	1affffd9 	bne	458 <initialize+0x34>
        ONCHIP[i].y = Asteroids[i].y;
        SDRAM[i].x = Asteroids[i].x;
        SDRAM[i].y = Asteroids[i].y;
    }

    Ship1.x = 319 / 4 - shipWidth / 2;
     4f0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     4f4:	e3403004 	movt	r3, #4
     4f8:	e3a0104a 	mov	r1, #74	; 0x4a
     4fc:	e5831148 	str	r1, [r3, #328]	; 0x148
    Ship1.y = 239 - shipLength - 1;
     500:	e3a020d9 	mov	r2, #217	; 0xd9
     504:	e583214c 	str	r2, [r3, #332]	; 0x14c
    Ship1dy = 0; // initialize ship1dy
     508:	e3a00000 	mov	r0, #0
     50c:	e5830000 	str	r0, [r3]

    Ship1SDRAM.x = 319 / 4 - shipWidth / 2;
     510:	e5831158 	str	r1, [r3, #344]	; 0x158
    Ship1SDRAM.y = 239 - shipLength - 1;
     514:	e583215c 	str	r2, [r3, #348]	; 0x15c

    Ship1ONCHIP.x = 319 / 4 - shipWidth / 2;
     518:	e5831160 	str	r1, [r3, #352]	; 0x160
    Ship1ONCHIP.y = 239 - shipLength - 1;
     51c:	e5832164 	str	r2, [r3, #356]	; 0x164

    Ship2.x = 319 * 3 / 4 - shipWidth / 2;
     520:	e3a010ea 	mov	r1, #234	; 0xea
     524:	e5831168 	str	r1, [r3, #360]	; 0x168
    Ship2.y = 239 - shipLength - 1;
     528:	e583216c 	str	r2, [r3, #364]	; 0x16c
    Ship2dy = 0; // initialize ship1dy
     52c:	e5830004 	str	r0, [r3, #4]

    Ship2SDRAM.x = 319 * 3 / 4 - shipWidth / 2;
     530:	e5831178 	str	r1, [r3, #376]	; 0x178
    Ship2SDRAM.y = 239 - shipLength - 1;
     534:	e583217c 	str	r2, [r3, #380]	; 0x17c

    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
     538:	e5831180 	str	r1, [r3, #384]	; 0x180
    Ship2ONCHIP.y = 239 - shipLength - 1;
     53c:	e5832184 	str	r2, [r3, #388]	; 0x184
     540:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     544:	0004ce24 	.word	0x0004ce24

00000548 <update>:
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
{
     548:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     54c:	e24dd00c 	sub	sp, sp, #12
     550:	e59f62bc 	ldr	r6, [pc, #700]	; 814 <update+0x2cc>
     554:	e2864008 	add	r4, r6, #8
     558:	e3a07000 	mov	r7, #0
    for (int i = 0; i < numAsteroids; i++)
    {
        // save the position to erase
        if (pixel_buffer_start == 0xC0000000)
     55c:	e30c8e1c 	movw	r8, #52764	; 0xce1c
     560:	e3408004 	movt	r8, #4
            SDRAM[i].x = Asteroids[i].x;
            SDRAM[i].y = Asteroids[i].y;
        }
        else if (pixel_buffer_start == 0xC8000000)
        {
            ONCHIP[i].x = Asteroids[i].x;
     564:	e28820a8 	add	r2, r8, #168	; 0xa8
     568:	e58d2004 	str	r2, [sp, #4]
    for (int i = 0; i < numAsteroids; i++)
    {
        // save the position to erase
        if (pixel_buffer_start == 0xC0000000)
        {
            SDRAM[i].x = Asteroids[i].x;
     56c:	e288b0f8 	add	r11, r8, #248	; 0xf8
            ONCHIP[i].x = Asteroids[i].x;
            ONCHIP[i].y = Asteroids[i].y;
        }

        // if reached right side or left side, reverse direction
        if ((Asteroids[i].x) >= 319 || Asteroids[i].x <= 0)
     570:	e300a13d 	movw	r10, #317	; 0x13d
        {
            Asteroids[i].dx *= -1;
            Asteroids[i].y = rand() % 239;
     574:	e30c973b 	movw	r9, #51003	; 0xc73b
     578:	e348991a 	movt	r9, #35098	; 0x891a
void update()
{
    for (int i = 0; i < numAsteroids; i++)
    {
        // save the position to erase
        if (pixel_buffer_start == 0xC0000000)
     57c:	e5983188 	ldr	r3, [r8, #392]	; 0x188
     580:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
     584:	1a000005 	bne	5a0 <update+0x58>
        {
            SDRAM[i].x = Asteroids[i].x;
     588:	e5142008 	ldr	r2, [r4, #-8]
     58c:	e1a0300b 	mov	r3, r11
     590:	e7a32007 	str	r2, [r3, r7]!
            SDRAM[i].y = Asteroids[i].y;
     594:	e5142004 	ldr	r2, [r4, #-4]
     598:	e5832004 	str	r2, [r3, #4]
     59c:	ea000006 	b	5bc <update+0x74>
        }
        else if (pixel_buffer_start == 0xC8000000)
     5a0:	e5983188 	ldr	r3, [r8, #392]	; 0x188
     5a4:	e3530332 	cmp	r3, #-939524096	; 0xc8000000
        {
            ONCHIP[i].x = Asteroids[i].x;
     5a8:	05142008 	ldreq	r2, [r4, #-8]
     5ac:	059d3004 	ldreq	r3, [sp, #4]
     5b0:	07a32007 	streq	r2, [r3, r7]!
            ONCHIP[i].y = Asteroids[i].y;
     5b4:	05142004 	ldreq	r2, [r4, #-4]
     5b8:	05832004 	streq	r2, [r3, #4]
    draw_line(x + width, y, x + width, y + length, line_color);
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
     5bc:	e1a05004 	mov	r5, r4
            ONCHIP[i].x = Asteroids[i].x;
            ONCHIP[i].y = Asteroids[i].y;
        }

        // if reached right side or left side, reverse direction
        if ((Asteroids[i].x) >= 319 || Asteroids[i].x <= 0)
     5c0:	e5143008 	ldr	r3, [r4, #-8]
     5c4:	e2433001 	sub	r3, r3, #1
     5c8:	e153000a 	cmp	r3, r10
     5cc:	9a00000b 	bls	600 <update+0xb8>
        {
            Asteroids[i].dx *= -1;
     5d0:	e5963008 	ldr	r3, [r6, #8]
     5d4:	e2633000 	rsb	r3, r3, #0
     5d8:	e5863008 	str	r3, [r6, #8]
            Asteroids[i].y = rand() % 239;
     5dc:	eb00030e 	bl	121c <rand>
     5e0:	e0c32099 	smull	r2, r3, r9, r0
     5e4:	e0833000 	add	r3, r3, r0
     5e8:	e1a02fc0 	asr	r2, r0, #31
     5ec:	e06233c3 	rsb	r3, r2, r3, asr #7
     5f0:	e0632203 	rsb	r2, r3, r3, lsl #4
     5f4:	e0633202 	rsb	r3, r3, r2, lsl #4
     5f8:	e0630000 	rsb	r0, r3, r0
     5fc:	e5040004 	str	r0, [r4, #-4]
        }

        // actually move
        Asteroids[i].x = Asteroids[i].x + Asteroids[i].dx;
     600:	e5152008 	ldr	r2, [r5, #-8]
     604:	e5963008 	ldr	r3, [r6, #8]
     608:	e0823003 	add	r3, r2, r3
     60c:	e5053008 	str	r3, [r5, #-8]
        Asteroids[i].y = Asteroids[i].y + Asteroids[i].dy;
     610:	e5152004 	ldr	r2, [r5, #-4]
     614:	e596300c 	ldr	r3, [r6, #12]
     618:	e0823003 	add	r3, r2, r3
     61c:	e5053004 	str	r3, [r5, #-4]
     620:	e2866010 	add	r6, r6, #16
     624:	e2844010 	add	r4, r4, #16
     628:	e2877008 	add	r7, r7, #8
}

// update movement of boxes
void update()
{
    for (int i = 0; i < numAsteroids; i++)
     62c:	e3570050 	cmp	r7, #80	; 0x50
     630:	1affffd1 	bne	57c <update+0x34>
        // actually move
        Asteroids[i].x = Asteroids[i].x + Asteroids[i].dx;
        Asteroids[i].y = Asteroids[i].y + Asteroids[i].dy;
    }
    // update ship
    if (pixel_buffer_start == 0xC0000000)
     634:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     638:	e3403004 	movt	r3, #4
     63c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
     640:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
     644:	1a00000a 	bne	674 <update+0x12c>
    {
        Ship1SDRAM.x = Ship1.x;
     648:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     64c:	e3403004 	movt	r3, #4
     650:	e5932148 	ldr	r2, [r3, #328]	; 0x148
     654:	e5832158 	str	r2, [r3, #344]	; 0x158
        Ship1SDRAM.y = Ship1.y;
     658:	e593214c 	ldr	r2, [r3, #332]	; 0x14c
     65c:	e583215c 	str	r2, [r3, #348]	; 0x15c
        Ship2SDRAM.x = Ship2.x;
     660:	e5932168 	ldr	r2, [r3, #360]	; 0x168
     664:	e5832178 	str	r2, [r3, #376]	; 0x178
        Ship2SDRAM.y = Ship2.y;
     668:	e593216c 	ldr	r2, [r3, #364]	; 0x16c
     66c:	e583217c 	str	r2, [r3, #380]	; 0x17c
     670:	ea00000e 	b	6b0 <update+0x168>
    }
    else if (pixel_buffer_start == 0xC8000000)
     674:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     678:	e3403004 	movt	r3, #4
     67c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
     680:	e3530332 	cmp	r3, #-939524096	; 0xc8000000
     684:	1a000009 	bne	6b0 <update+0x168>
    {
        Ship1ONCHIP.x = Ship1.x;
     688:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     68c:	e3403004 	movt	r3, #4
     690:	e5932148 	ldr	r2, [r3, #328]	; 0x148
     694:	e5832160 	str	r2, [r3, #352]	; 0x160
        Ship1ONCHIP.y = Ship1.y;
     698:	e593214c 	ldr	r2, [r3, #332]	; 0x14c
     69c:	e5832164 	str	r2, [r3, #356]	; 0x164
        Ship2ONCHIP.x = Ship2.x;
     6a0:	e5932168 	ldr	r2, [r3, #360]	; 0x168
     6a4:	e5832180 	str	r2, [r3, #384]	; 0x180
        Ship2ONCHIP.y = Ship2.y;
     6a8:	e593216c 	ldr	r2, [r3, #364]	; 0x16c
     6ac:	e5832184 	str	r2, [r3, #388]	; 0x184
    }

    if (Ship1.y <= 0 || Ship1.y + shipLength >= 239)
     6b0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     6b4:	e3403004 	movt	r3, #4
     6b8:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
     6bc:	e3530000 	cmp	r3, #0
     6c0:	da000002 	ble	6d0 <update+0x188>
     6c4:	e2832015 	add	r2, r3, #21
     6c8:	e35200ee 	cmp	r2, #238	; 0xee
     6cc:	da000009 	ble	6f8 <update+0x1b0>
    {
    	if (Ship1.y <=1){
     6d0:	e3530001 	cmp	r3, #1
        	score++;
     6d4:	d30c3e1c 	movwle	r3, #52764	; 0xce1c
     6d8:	d3403004 	movtle	r3, #4
     6dc:	d593218c 	ldrle	r2, [r3, #396]	; 0x18c
     6e0:	d2822001 	addle	r2, r2, #1
     6e4:	d583218c 	strle	r2, [r3, #396]	; 0x18c
        }
        Ship1.y = 239 - shipLength - 1;
     6e8:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     6ec:	e3403004 	movt	r3, #4
     6f0:	e3a020d9 	mov	r2, #217	; 0xd9
     6f4:	e583214c 	str	r2, [r3, #332]	; 0x14c
    }
    if (Ship2.y <= 0 || Ship2.y + shipLength >= 239)
     6f8:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     6fc:	e3403004 	movt	r3, #4
     700:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
     704:	e3530000 	cmp	r3, #0
     708:	da000002 	ble	718 <update+0x1d0>
     70c:	e2832015 	add	r2, r3, #21
     710:	e35200ee 	cmp	r2, #238	; 0xee
     714:	da000030 	ble	7dc <update+0x294>
    {
    	if (Ship2.y <= 1){
     718:	e3530001 	cmp	r3, #1
        	score2++;
     71c:	d30c3e1c 	movwle	r3, #52764	; 0xce1c
     720:	d3403004 	movtle	r3, #4
     724:	d5932190 	ldrle	r2, [r3, #400]	; 0x190
     728:	d2822001 	addle	r2, r2, #1
     72c:	d5832190 	strle	r2, [r3, #400]	; 0x190
        }
        Ship2.y = 239 - shipLength - 1;
     730:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     734:	e3403004 	movt	r3, #4
     738:	e3a020d9 	mov	r2, #217	; 0xd9
     73c:	e583216c 	str	r2, [r3, #364]	; 0x16c
     740:	ea000025 	b	7dc <update+0x294>
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     744:	e2812008 	add	r2, r1, #8
     748:	e7932002 	ldr	r2, [r3, r2]
     74c:	e152000c 	cmp	r2, r12
     750:	ca000008 	bgt	778 <update+0x230>
     754:	e1520007 	cmp	r2, r7
     758:	ba000006 	blt	778 <update+0x230>
    draw_line(x + width, y, x + width, y + length, line_color);
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
     75c:	e0818003 	add	r8, r1, r3
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     760:	e598800c 	ldr	r8, [r8, #12]
     764:	e285a015 	add	r10, r5, #21
     768:	e158000a 	cmp	r8, r10
     76c:	ca000001 	bgt	778 <update+0x230>
        {
            Ship1.y = 239 - shipLength - 1;
     770:	e1580005 	cmp	r8, r5
     774:	a3a050d9 	movge	r5, #217	; 0xd9
        }

        if ((Asteroids[i].x <= Ship2.x + shipWidth) && (Asteroids[i].x >= Ship2.x) && (Asteroids[i].y <= Ship2.y + shipLength) && (Asteroids[i].y >= Ship2.y))
     778:	e1520000 	cmp	r2, r0
     77c:	ca000008 	bgt	7a4 <update+0x25c>
     780:	e1520006 	cmp	r2, r6
     784:	ba000006 	blt	7a4 <update+0x25c>
    draw_line(x + width, y, x + width, y + length, line_color);
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
     788:	e0812003 	add	r2, r1, r3
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
        {
            Ship1.y = 239 - shipLength - 1;
        }

        if ((Asteroids[i].x <= Ship2.x + shipWidth) && (Asteroids[i].x >= Ship2.x) && (Asteroids[i].y <= Ship2.y + shipLength) && (Asteroids[i].y >= Ship2.y))
     78c:	e592200c 	ldr	r2, [r2, #12]
     790:	e2848015 	add	r8, r4, #21
     794:	e1520008 	cmp	r2, r8
     798:	ca000001 	bgt	7a4 <update+0x25c>
        {
            Ship2.y = 239 - shipLength - 1;
     79c:	e1520004 	cmp	r2, r4
     7a0:	a3a040d9 	movge	r4, #217	; 0xd9
     7a4:	e2833010 	add	r3, r3, #16
        	score2++;
        }
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
     7a8:	e35300a0 	cmp	r3, #160	; 0xa0
     7ac:	1affffe4 	bne	744 <update+0x1fc>
     7b0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     7b4:	e3403004 	movt	r3, #4
     7b8:	e583514c 	str	r5, [r3, #332]	; 0x14c
     7bc:	e583416c 	str	r4, [r3, #364]	; 0x16c
            Ship2.y = 239 - shipLength - 1;
        }
    }

    // actually move the ship
    Ship1.y += Ship1dy;
     7c0:	e5932000 	ldr	r2, [r3]
     7c4:	e0855002 	add	r5, r5, r2
     7c8:	e583514c 	str	r5, [r3, #332]	; 0x14c
    Ship2.y += Ship2dy;
     7cc:	e5932004 	ldr	r2, [r3, #4]
     7d0:	e0844002 	add	r4, r4, r2
     7d4:	e583416c 	str	r4, [r3, #364]	; 0x16c
     7d8:	ea00000b 	b	80c <update+0x2c4>
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     7dc:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     7e0:	e3403004 	movt	r3, #4
     7e4:	e5937148 	ldr	r7, [r3, #328]	; 0x148
     7e8:	e287c00b 	add	r12, r7, #11
        {
            Ship1.y = 239 - shipLength - 1;
        }

        if ((Asteroids[i].x <= Ship2.x + shipWidth) && (Asteroids[i].x >= Ship2.x) && (Asteroids[i].y <= Ship2.y + shipLength) && (Asteroids[i].y >= Ship2.y))
     7ec:	e5936168 	ldr	r6, [r3, #360]	; 0x168
     7f0:	e286000b 	add	r0, r6, #11
     7f4:	e593514c 	ldr	r5, [r3, #332]	; 0x14c
     7f8:	e593416c 	ldr	r4, [r3, #364]	; 0x16c
     7fc:	e3a03000 	mov	r3, #0
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     800:	e30c1e1c 	movw	r1, #52764	; 0xce1c
     804:	e3401004 	movt	r1, #4
     808:	eaffffcd 	b	744 <update+0x1fc>
    }

    // actually move the ship
    Ship1.y += Ship1dy;
    Ship2.y += Ship2dy;
}
     80c:	e28dd00c 	add	sp, sp, #12
     810:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     814:	0004ce24 	.word	0x0004ce24

00000818 <clear_screen>:

// clears screen by drawing all black
void clear_screen()
{
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
     818:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    {
        *(short int *)(i) = 0x0000;
     81c:	e3a01000 	mov	r1, #0
}

// clears screen by drawing all black
void clear_screen()
{
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
     820:	e30b2e7e 	movw	r2, #48766	; 0xbe7e
     824:	e34c2803 	movt	r2, #51203	; 0xc803
    {
        *(short int *)(i) = 0x0000;
     828:	e0c310b2 	strh	r1, [r3], #2
}

// clears screen by drawing all black
void clear_screen()
{
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
     82c:	e1530002 	cmp	r3, r2
     830:	1afffffc 	bne	828 <clear_screen+0x10>
     834:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
        *(short int *)(i) = 0x0000;
    }

    for (int i = 0xC0000000; i < 0xC003BE7E; i = i + 2)
    {
        *(short int *)(i) = 0x0000;
     838:	e3a01000 	mov	r1, #0
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
    {
        *(short int *)(i) = 0x0000;
    }

    for (int i = 0xC0000000; i < 0xC003BE7E; i = i + 2)
     83c:	e30b2e7e 	movw	r2, #48766	; 0xbe7e
     840:	e34c2003 	movt	r2, #49155	; 0xc003
    {
        *(short int *)(i) = 0x0000;
     844:	e0c310b2 	strh	r1, [r3], #2
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
    {
        *(short int *)(i) = 0x0000;
    }

    for (int i = 0xC0000000; i < 0xC003BE7E; i = i + 2)
     848:	e1530002 	cmp	r3, r2
     84c:	1afffffc 	bne	844 <clear_screen+0x2c>
    {
        *(short int *)(i) = 0x0000;
    }
}
     850:	e12fff1e 	bx	lr

00000854 <plot_pixel>:

// plot pixel function (provided)
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     854:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     858:	e3403004 	movt	r3, #4
     85c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
     860:	e1a00080 	lsl	r0, r0, #1
     864:	e0831501 	add	r1, r3, r1, lsl #10
     868:	e18120b0 	strh	r2, [r1, r0]
     86c:	e12fff1e 	bx	lr

00000870 <clear_ship>:
        Ship1dy = 0;
        Ship2dy = 0;
    }
}

void clear_ship(int x, int y) {
     870:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     874:	e1a07000 	mov	r7, r0
     878:	e1a0a001 	mov	r10, r1
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     87c:	e3a08000 	mov	r8, #0
        Ship1dy = 0;
        Ship2dy = 0;
    }
}

void clear_ship(int x, int y) {
     880:	e1a05008 	mov	r5, r8
     884:	ea000009 	b	8b0 <clear_ship+0x40>
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
             //*(pixel_buffer_start + (j<<0) + (i<<9)) = bird[i][j];
			 plot_pixel(x + j, y + i, 0x0000);	
     888:	e0840007 	add	r0, r4, r7
     88c:	e1a01006 	mov	r1, r6
     890:	e1a02005 	mov	r2, r5
     894:	ebffffee 	bl	854 <plot_pixel>

void clear_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
     898:	e2844001 	add	r4, r4, #1
     89c:	e3540012 	cmp	r4, #18
     8a0:	1afffff8 	bne	888 <clear_ship+0x18>
}

void clear_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     8a4:	e2888001 	add	r8, r8, #1
     8a8:	e3580016 	cmp	r8, #22
     8ac:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
        Ship1dy = 0;
        Ship2dy = 0;
    }
}

void clear_ship(int x, int y) {
     8b0:	e1a04005 	mov	r4, r5
     8b4:	e088600a 	add	r6, r8, r10
     8b8:	eafffff2 	b	888 <clear_ship+0x18>

000008bc <clear>:
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
{
     8bc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
     8c0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     8c4:	e3403004 	movt	r3, #4
     8c8:	e5933188 	ldr	r3, [r3, #392]	; 0x188
     8cc:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
     8d0:	1a000023 	bne	964 <clear+0xa8>
     8d4:	e3a04000 	mov	r4, #0
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     8d8:	e59f5128 	ldr	r5, [pc, #296]	; a08 <clear+0x14c>
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(SDRAM[i].x, SDRAM[i].y, 0x0000);
     8dc:	e1a07004 	mov	r7, r4
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     8e0:	e0856004 	add	r6, r5, r4
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(SDRAM[i].x, SDRAM[i].y, 0x0000);
     8e4:	e7950004 	ldr	r0, [r5, r4]
     8e8:	e5961004 	ldr	r1, [r6, #4]
     8ec:	e1a02007 	mov	r2, r7
     8f0:	ebffffd7 	bl	854 <plot_pixel>
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y, 0x0000);
     8f4:	e7940005 	ldr	r0, [r4, r5]
     8f8:	e2800001 	add	r0, r0, #1
     8fc:	e5961004 	ldr	r1, [r6, #4]
     900:	e1a02007 	mov	r2, r7
     904:	ebffffd2 	bl	854 <plot_pixel>
            plot_pixel(SDRAM[i].x, SDRAM[i].y + 1, 0x0000);
     908:	e5961004 	ldr	r1, [r6, #4]
     90c:	e7950004 	ldr	r0, [r5, r4]
     910:	e2811001 	add	r1, r1, #1
     914:	e1a02007 	mov	r2, r7
     918:	ebffffcd 	bl	854 <plot_pixel>
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y + 1, 0x0000);
     91c:	e7940005 	ldr	r0, [r4, r5]
     920:	e5961004 	ldr	r1, [r6, #4]
     924:	e2800001 	add	r0, r0, #1
     928:	e2811001 	add	r1, r1, #1
     92c:	e1a02007 	mov	r2, r7
     930:	ebffffc7 	bl	854 <plot_pixel>
     934:	e2844008 	add	r4, r4, #8
void clear()
{
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
    {
        for (int i = 0; i < numAsteroids; i++)
     938:	e3540050 	cmp	r4, #80	; 0x50
     93c:	1affffe7 	bne	8e0 <clear+0x24>
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y, 0x0000);
            plot_pixel(SDRAM[i].x, SDRAM[i].y + 1, 0x0000);
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y + 1, 0x0000);
        }

        clear_ship(Ship1SDRAM.x, Ship1SDRAM.y);
     940:	e30c4e1c 	movw	r4, #52764	; 0xce1c
     944:	e3404004 	movt	r4, #4
     948:	e5940158 	ldr	r0, [r4, #344]	; 0x158
     94c:	e594115c 	ldr	r1, [r4, #348]	; 0x15c
     950:	ebffffc6 	bl	870 <clear_ship>
        clear_ship(Ship2SDRAM.x, Ship2SDRAM.y);
     954:	e5940178 	ldr	r0, [r4, #376]	; 0x178
     958:	e594117c 	ldr	r1, [r4, #380]	; 0x17c
     95c:	ebffffc3 	bl	870 <clear_ship>
     960:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    }
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
     964:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     968:	e3403004 	movt	r3, #4
     96c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
     970:	e3530332 	cmp	r3, #-939524096	; 0xc8000000
     974:	18bd80f8 	popne	{r3, r4, r5, r6, r7, pc}
     978:	e3a04000 	mov	r4, #0
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     97c:	e59f5088 	ldr	r5, [pc, #136]	; a0c <clear+0x150>
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y, 0x0000);
     980:	e1a07004 	mov	r7, r4
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     984:	e0856004 	add	r6, r5, r4
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y, 0x0000);
     988:	e7950004 	ldr	r0, [r5, r4]
     98c:	e5961004 	ldr	r1, [r6, #4]
     990:	e1a02007 	mov	r2, r7
     994:	ebffffae 	bl	854 <plot_pixel>
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y, 0x0000);
     998:	e7940005 	ldr	r0, [r4, r5]
     99c:	e2800001 	add	r0, r0, #1
     9a0:	e5961004 	ldr	r1, [r6, #4]
     9a4:	e1a02007 	mov	r2, r7
     9a8:	ebffffa9 	bl	854 <plot_pixel>
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y + 1, 0x0000);
     9ac:	e5961004 	ldr	r1, [r6, #4]
     9b0:	e7950004 	ldr	r0, [r5, r4]
     9b4:	e2811001 	add	r1, r1, #1
     9b8:	e1a02007 	mov	r2, r7
     9bc:	ebffffa4 	bl	854 <plot_pixel>
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y + 1, 0x0000);
     9c0:	e7940005 	ldr	r0, [r4, r5]
     9c4:	e5961004 	ldr	r1, [r6, #4]
     9c8:	e2800001 	add	r0, r0, #1
     9cc:	e2811001 	add	r1, r1, #1
     9d0:	e1a02007 	mov	r2, r7
     9d4:	ebffff9e 	bl	854 <plot_pixel>
     9d8:	e2844008 	add	r4, r4, #8
        clear_ship(Ship2SDRAM.x, Ship2SDRAM.y);
    }
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
    {
        for (int i = 0; i < numAsteroids; i++)
     9dc:	e3540050 	cmp	r4, #80	; 0x50
     9e0:	1affffe7 	bne	984 <clear+0xc8>
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y, 0x0000);
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y, 0x0000);
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y + 1, 0x0000);
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y + 1, 0x0000);
        }
        clear_ship(Ship1ONCHIP.x, Ship1ONCHIP.y);
     9e4:	e30c4e1c 	movw	r4, #52764	; 0xce1c
     9e8:	e3404004 	movt	r4, #4
     9ec:	e5940160 	ldr	r0, [r4, #352]	; 0x160
     9f0:	e5941164 	ldr	r1, [r4, #356]	; 0x164
     9f4:	ebffff9d 	bl	870 <clear_ship>
        clear_ship(Ship2ONCHIP.x, Ship2ONCHIP.y);
     9f8:	e5940180 	ldr	r0, [r4, #384]	; 0x180
     9fc:	e5941184 	ldr	r1, [r4, #388]	; 0x184
     a00:	ebffff9a 	bl	870 <clear_ship>
     a04:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
     a08:	0004cf14 	.word	0x0004cf14
     a0c:	0004cec4 	.word	0x0004cec4

00000a10 <draw_ship>:
    return 1;
}



void draw_ship(int x, int y) {
     a10:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a14:	e1a0b000 	mov	r11, r0
     a18:	e1a09001 	mov	r9, r1
     a1c:	e59f6050 	ldr	r6, [pc, #80]	; a74 <draw_ship+0x64>
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     a20:	e3a08000 	mov	r8, #0
    return 1;
}



void draw_ship(int x, int y) {
     a24:	e306ae44 	movw	r10, #28228	; 0x6e44
     a28:	e340a002 	movt	r10, #2
     a2c:	ea00000a 	b	a5c <draw_ship+0x4c>
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
			 plot_pixel(x + j, y + i,ship[i][j]);	
     a30:	e1a00004 	mov	r0, r4
     a34:	e1a01007 	mov	r1, r7
     a38:	e1f520f2 	ldrsh	r2, [r5, #2]!
     a3c:	ebffff84 	bl	854 <plot_pixel>
     a40:	e2844001 	add	r4, r4, #1

void draw_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
     a44:	e1560005 	cmp	r6, r5
     a48:	1afffff8 	bne	a30 <draw_ship+0x20>


void draw_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     a4c:	e2888001 	add	r8, r8, #1
     a50:	e2866024 	add	r6, r6, #36	; 0x24
     a54:	e3580016 	cmp	r8, #22
     a58:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    return 1;
}



void draw_ship(int x, int y) {
     a5c:	e0885188 	add	r5, r8, r8, lsl #3
     a60:	e08a5105 	add	r5, r10, r5, lsl #2
     a64:	e2455002 	sub	r5, r5, #2
     a68:	e1a0400b 	mov	r4, r11
     a6c:	e0887009 	add	r7, r8, r9
     a70:	eaffffee 	b	a30 <draw_ship+0x20>
     a74:	00026e66 	.word	0x00026e66

00000a78 <wait_for_sync>:
void wait_for_sync()
{
    volatile int *pixel_ctrl_ptr = 0xFF203020;
    register int status;

    *pixel_ctrl_ptr = 1;
     a78:	e3033fff 	movw	r3, #16383	; 0x3fff
     a7c:	e34f3f20 	movt	r3, #65312	; 0xff20
     a80:	e3a02001 	mov	r2, #1
     a84:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    status = *(pixel_ctrl_ptr + 3);
     a88:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0)
     a8c:	e3130001 	tst	r3, #1
     a90:	012fff1e 	bxeq	lr
    {
        status = *(pixel_ctrl_ptr + 3);
     a94:	e3032fff 	movw	r2, #16383	; 0x3fff
     a98:	e34f2f20 	movt	r2, #65312	; 0xff20
     a9c:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status;

    *pixel_ctrl_ptr = 1;

    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0)
     aa0:	e3130001 	tst	r3, #1
     aa4:	1afffffc 	bne	a9c <wait_for_sync+0x24>
     aa8:	e12fff1e 	bx	lr

00000aac <wait_for_vsync>:
void wait_for_vsync()
{
    volatile int *pixel_ctrl_ptr = 0xFF203020;
    register int status;

    *pixel_ctrl_ptr = 1;
     aac:	e3033fff 	movw	r3, #16383	; 0x3fff
     ab0:	e34f3f20 	movt	r3, #65312	; 0xff20
     ab4:	e3a02001 	mov	r2, #1
     ab8:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    status = *(pixel_ctrl_ptr + 3);
     abc:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0)
     ac0:	e3130001 	tst	r3, #1
     ac4:	012fff1e 	bxeq	lr
    {
        status = *(pixel_ctrl_ptr + 3);
     ac8:	e3032fff 	movw	r2, #16383	; 0x3fff
     acc:	e34f2f20 	movt	r2, #65312	; 0xff20
     ad0:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status;

    *pixel_ctrl_ptr = 1;

    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0)
     ad4:	e3130001 	tst	r3, #1
     ad8:	1afffffc 	bne	ad0 <wait_for_vsync+0x24>
     adc:	e12fff1e 	bx	lr

00000ae0 <load_end1>:
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
}

void load_end1() {
     ae0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     ae4:	e3a06000 	mov	r6, #0
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
}

void load_end1() {
     ae8:	e307715c 	movw	r7, #29020	; 0x715c
     aec:	e3407002 	movt	r7, #2
     af0:	e1a08006 	mov	r8, r6
     af4:	ea000009 	b	b20 <load_end1+0x40>
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, end1[i][j]);
     af8:	e1a00004 	mov	r0, r4
     afc:	e1a01006 	mov	r1, r6
     b00:	e1f520f2 	ldrsh	r2, [r5, #2]!
     b04:	ebffff52 	bl	854 <plot_pixel>
void load_end1() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
     b08:	e2844001 	add	r4, r4, #1
     b0c:	e3540d05 	cmp	r4, #320	; 0x140
     b10:	1afffff8 	bne	af8 <load_end1+0x18>

void load_end1() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     b14:	e2866001 	add	r6, r6, #1
     b18:	e35600f0 	cmp	r6, #240	; 0xf0
     b1c:	0a000004 	beq	b34 <load_end1+0x54>
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
}

void load_end1() {
     b20:	e0865106 	add	r5, r6, r6, lsl #2
     b24:	e0875385 	add	r5, r7, r5, lsl #7
     b28:	e2455002 	sub	r5, r5, #2
     b2c:	e1a04008 	mov	r4, r8
     b30:	eafffff0 	b	af8 <load_end1+0x18>
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, end1[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
     b34:	ebffffdc 	bl	aac <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     b38:	e30c39c0 	movw	r3, #51648	; 0xc9c0
     b3c:	e3403004 	movt	r3, #4
     b40:	e5933000 	ldr	r3, [r3]
     b44:	e5932004 	ldr	r2, [r3, #4]
     b48:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     b4c:	e3403004 	movt	r3, #4
     b50:	e5832188 	str	r2, [r3, #392]	; 0x188
     b54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000b58 <load_title>:
			 plot_pixel(x + j, y + i,ship[i][j]);	
        }
    }
}

void load_title() {
     b58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     b5c:	e3a06000 	mov	r6, #0
			 plot_pixel(x + j, y + i,ship[i][j]);	
        }
    }
}

void load_title() {
     b60:	e3017644 	movw	r7, #5700	; 0x1644
     b64:	e3407000 	movt	r7, #0
     b68:	e1a08006 	mov	r8, r6
     b6c:	ea000009 	b	b98 <load_title+0x40>
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, title[i][j]);
     b70:	e1a00004 	mov	r0, r4
     b74:	e1a01006 	mov	r1, r6
     b78:	e1f520f2 	ldrsh	r2, [r5, #2]!
     b7c:	ebffff34 	bl	854 <plot_pixel>
void load_title() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
     b80:	e2844001 	add	r4, r4, #1
     b84:	e3540d05 	cmp	r4, #320	; 0x140
     b88:	1afffff8 	bne	b70 <load_title+0x18>

void load_title() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     b8c:	e2866001 	add	r6, r6, #1
     b90:	e35600f0 	cmp	r6, #240	; 0xf0
     b94:	0a000004 	beq	bac <load_title+0x54>
			 plot_pixel(x + j, y + i,ship[i][j]);	
        }
    }
}

void load_title() {
     b98:	e0865106 	add	r5, r6, r6, lsl #2
     b9c:	e0875385 	add	r5, r7, r5, lsl #7
     ba0:	e2455002 	sub	r5, r5, #2
     ba4:	e1a04008 	mov	r4, r8
     ba8:	eafffff0 	b	b70 <load_title+0x18>
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
     bac:	ebffffbe 	bl	aac <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     bb0:	e30c39c0 	movw	r3, #51648	; 0xc9c0
     bb4:	e3403004 	movt	r3, #4
     bb8:	e5933000 	ldr	r3, [r3]
     bbc:	e5932004 	ldr	r2, [r3, #4]
     bc0:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     bc4:	e3403004 	movt	r3, #4
     bc8:	e5832188 	str	r2, [r3, #392]	; 0x188
     bcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000bd0 <swap>:
    }
}

void swap(int *x, int *y)
{
    int temp = *x;
     bd0:	e5903000 	ldr	r3, [r0]
    *x = *y;
     bd4:	e5912000 	ldr	r2, [r1]
     bd8:	e5802000 	str	r2, [r0]
    *y = temp;
     bdc:	e5813000 	str	r3, [r1]
     be0:	e12fff1e 	bx	lr

00000be4 <draw_line>:
    }
    return;
}

void draw_line(int x0, int y0, int x1, int y1, short int line_color)
{
     be4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     be8:	e24dd014 	sub	sp, sp, #20
     bec:	e58d000c 	str	r0, [sp, #12]
     bf0:	e58d1008 	str	r1, [sp, #8]
     bf4:	e58d2004 	str	r2, [sp, #4]
     bf8:	e58d3000 	str	r3, [sp]
     bfc:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep = abs(y1 - y0) > abs(x1 - x0);
     c00:	e0613003 	rsb	r3, r1, r3
     c04:	e3530000 	cmp	r3, #0
     c08:	b2633000 	rsblt	r3, r3, #0
     c0c:	e0602002 	rsb	r2, r0, r2
     c10:	e0228fc2 	eor	r8, r2, r2, asr #31
     c14:	e0488fc2 	sub	r8, r8, r2, asr #31
     c18:	e1530008 	cmp	r3, r8
     c1c:	d3a08000 	movle	r8, #0
     c20:	c3a08001 	movgt	r8, #1

    if (is_steep)
     c24:	e3580000 	cmp	r8, #0
     c28:	0a000005 	beq	c44 <draw_line+0x60>
    {
        swap(&x0, &y0);
     c2c:	e28d000c 	add	r0, sp, #12
     c30:	e28d1008 	add	r1, sp, #8
     c34:	ebffffe5 	bl	bd0 <swap>
        swap(&x1, &y1);
     c38:	e28d0004 	add	r0, sp, #4
     c3c:	e1a0100d 	mov	r1, sp
     c40:	ebffffe2 	bl	bd0 <swap>
    }
    if (x0 > x1)
     c44:	e59d3004 	ldr	r3, [sp, #4]
     c48:	e59d200c 	ldr	r2, [sp, #12]
     c4c:	e1520003 	cmp	r2, r3
     c50:	da000005 	ble	c6c <draw_line+0x88>
    {
        swap(&x0, &x1);
     c54:	e28d000c 	add	r0, sp, #12
     c58:	e28d1004 	add	r1, sp, #4
     c5c:	ebffffdb 	bl	bd0 <swap>
        swap(&y0, &y1);
     c60:	e28d0008 	add	r0, sp, #8
     c64:	e1a0100d 	mov	r1, sp
     c68:	ebffffd8 	bl	bd0 <swap>
    }

    int deltax = x1 - x0;
     c6c:	e59d3004 	ldr	r3, [sp, #4]
     c70:	e59d500c 	ldr	r5, [sp, #12]
     c74:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
     c78:	e59d2000 	ldr	r2, [sp]
     c7c:	e59d6008 	ldr	r6, [sp, #8]
     c80:	e0667002 	rsb	r7, r6, r2
     c84:	e3570000 	cmp	r7, #0
     c88:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
     c8c:	e0894fa9 	add	r4, r9, r9, lsr #31
     c90:	e1a040c4 	asr	r4, r4, #1
     c94:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;

    if (y0 < y1)
    {
        y_step = 1;
     c98:	e1520006 	cmp	r2, r6
     c9c:	d3e0b000 	mvnle	r11, #0
     ca0:	c3a0b001 	movgt	r11, #1
    else
    {
        y_step = -1;
    }

    for (int x = x0; x < x1; ++x)
     ca4:	e1530005 	cmp	r3, r5
     ca8:	da00000d 	ble	ce4 <draw_line+0x100>
    {
        if (is_steep)
     cac:	e3580000 	cmp	r8, #0
        {
            plot_pixel(y, x, line_color);
     cb0:	11a00006 	movne	r0, r6
     cb4:	11a01005 	movne	r1, r5
        }
        else
        {
            plot_pixel(x, y, line_color);
     cb8:	01a00005 	moveq	r0, r5
     cbc:	01a01006 	moveq	r1, r6
     cc0:	e1a0200a 	mov	r2, r10
     cc4:	ebfffee2 	bl	854 <plot_pixel>
        }
        error = error + deltay;
        if (error >= 0)
     cc8:	e0944007 	adds	r4, r4, r7
        {
            y = y + y_step;
     ccc:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
     cd0:	50694004 	rsbpl	r4, r9, r4
    else
    {
        y_step = -1;
    }

    for (int x = x0; x < x1; ++x)
     cd4:	e2855001 	add	r5, r5, #1
     cd8:	e59d3004 	ldr	r3, [sp, #4]
     cdc:	e1530005 	cmp	r3, r5
     ce0:	cafffff1 	bgt	cac <draw_line+0xc8>
        {
            y = y + y_step;
            error = error - deltax;
        }
    }
}
     ce4:	e28dd014 	add	sp, sp, #20
     ce8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000cec <drawSquare>:
    draw_ship(Ship1.x, Ship1.y);
    draw_ship(Ship2.x, Ship2.y);
}

void drawSquare(int x, int y, int length, int width, short int line_color)
{
     cec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     cf0:	e24dd008 	sub	sp, sp, #8
     cf4:	e1a06000 	mov	r6, r0
     cf8:	e1a08001 	mov	r8, r1
     cfc:	e1a04002 	mov	r4, r2
     d00:	e1dd72f0 	ldrsh	r7, [sp, #32]
    draw_line(x, y, x + width, y, line_color);
     d04:	e0805003 	add	r5, r0, r3
     d08:	e58d7000 	str	r7, [sp]
     d0c:	e1a02005 	mov	r2, r5
     d10:	e1a03001 	mov	r3, r1
     d14:	ebffffb2 	bl	be4 <draw_line>
    draw_line(x, y, x, y + length, line_color);
     d18:	e0884004 	add	r4, r8, r4
     d1c:	e58d7000 	str	r7, [sp]
     d20:	e1a00006 	mov	r0, r6
     d24:	e1a01008 	mov	r1, r8
     d28:	e1a02006 	mov	r2, r6
     d2c:	e1a03004 	mov	r3, r4
     d30:	ebffffab 	bl	be4 <draw_line>
    draw_line(x + width, y, x + width, y + length, line_color);
     d34:	e58d7000 	str	r7, [sp]
     d38:	e1a00005 	mov	r0, r5
     d3c:	e1a01008 	mov	r1, r8
     d40:	e1a02005 	mov	r2, r5
     d44:	e1a03004 	mov	r3, r4
     d48:	ebffffa5 	bl	be4 <draw_line>
    draw_line(x, y + length, x + width, y + length, line_color);
     d4c:	e58d7000 	str	r7, [sp]
     d50:	e1a00006 	mov	r0, r6
     d54:	e1a01004 	mov	r1, r4
     d58:	e1a02005 	mov	r2, r5
     d5c:	e1a03004 	mov	r3, r4
     d60:	ebffff9f 	bl	be4 <draw_line>
}
     d64:	e28dd008 	add	sp, sp, #8
     d68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000d6c <draw>:
    }
}

// code for subroutines (not shown)
void draw()
{
     d6c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     d70:	e24dd00c 	sub	sp, sp, #12
     d74:	e3a04000 	mov	r4, #0
        clear_ship(Ship2ONCHIP.x, Ship2ONCHIP.y);
    }
}

// code for subroutines (not shown)
void draw()
     d78:	e59f50bc 	ldr	r5, [pc, #188]	; e3c <draw+0xd0>

    // draw asteroids
    for (int i = 0; i < numAsteroids; i++)
    {
        // drawing rectangles
        plot_pixel(Asteroids[i].x, Asteroids[i].y, 0xFFFF);
     d7c:	e3e07000 	mvn	r7, #0
        clear_ship(Ship2ONCHIP.x, Ship2ONCHIP.y);
    }
}

// code for subroutines (not shown)
void draw()
     d80:	e0856004 	add	r6, r5, r4

    // draw asteroids
    for (int i = 0; i < numAsteroids; i++)
    {
        // drawing rectangles
        plot_pixel(Asteroids[i].x, Asteroids[i].y, 0xFFFF);
     d84:	e7950004 	ldr	r0, [r5, r4]
     d88:	e5961004 	ldr	r1, [r6, #4]
     d8c:	e1a02007 	mov	r2, r7
     d90:	ebfffeaf 	bl	854 <plot_pixel>
        plot_pixel(Asteroids[i].x + 1, Asteroids[i].y, 0xFFFF);
     d94:	e7940005 	ldr	r0, [r4, r5]
     d98:	e2800001 	add	r0, r0, #1
     d9c:	e5961004 	ldr	r1, [r6, #4]
     da0:	e1a02007 	mov	r2, r7
     da4:	ebfffeaa 	bl	854 <plot_pixel>
        plot_pixel(Asteroids[i].x, Asteroids[i].y + 1, 0xFFFF);
     da8:	e5961004 	ldr	r1, [r6, #4]
     dac:	e7950004 	ldr	r0, [r5, r4]
     db0:	e2811001 	add	r1, r1, #1
     db4:	e1a02007 	mov	r2, r7
     db8:	ebfffea5 	bl	854 <plot_pixel>
        plot_pixel(Asteroids[i].x + 1, Asteroids[i].y + 1, 0xFFFF);
     dbc:	e7940005 	ldr	r0, [r4, r5]
     dc0:	e5961004 	ldr	r1, [r6, #4]
     dc4:	e2800001 	add	r0, r0, #1
     dc8:	e2811001 	add	r1, r1, #1
     dcc:	e1a02007 	mov	r2, r7
     dd0:	ebfffe9f 	bl	854 <plot_pixel>
     dd4:	e2844010 	add	r4, r4, #16
// code for subroutines (not shown)
void draw()
{

    // draw asteroids
    for (int i = 0; i < numAsteroids; i++)
     dd8:	e35400a0 	cmp	r4, #160	; 0xa0
     ddc:	1affffe7 	bne	d80 <draw+0x14>
        plot_pixel(Asteroids[i].x, Asteroids[i].y + 1, 0xFFFF);
        plot_pixel(Asteroids[i].x + 1, Asteroids[i].y + 1, 0xFFFF);
    }

    // draw ship
    drawSquare(Ship1.x, Ship1.y, shipLength, shipWidth, 0xFFFF);
     de0:	e30c4e1c 	movw	r4, #52764	; 0xce1c
     de4:	e3404004 	movt	r4, #4
     de8:	e5940148 	ldr	r0, [r4, #328]	; 0x148
     dec:	e594114c 	ldr	r1, [r4, #332]	; 0x14c
     df0:	e3e05000 	mvn	r5, #0
     df4:	e58d5000 	str	r5, [sp]
     df8:	e3a02015 	mov	r2, #21
     dfc:	e3a0300b 	mov	r3, #11
     e00:	ebffffb9 	bl	cec <drawSquare>
    drawSquare(Ship2.x, Ship2.y, shipLength, shipWidth, 0xFFFF);
     e04:	e5940168 	ldr	r0, [r4, #360]	; 0x168
     e08:	e594116c 	ldr	r1, [r4, #364]	; 0x16c
     e0c:	e58d5000 	str	r5, [sp]
     e10:	e3a02015 	mov	r2, #21
     e14:	e3a0300b 	mov	r3, #11
     e18:	ebffffb3 	bl	cec <drawSquare>
    
    draw_ship(Ship1.x, Ship1.y);
     e1c:	e5940148 	ldr	r0, [r4, #328]	; 0x148
     e20:	e594114c 	ldr	r1, [r4, #332]	; 0x14c
     e24:	ebfffef9 	bl	a10 <draw_ship>
    draw_ship(Ship2.x, Ship2.y);
     e28:	e5940168 	ldr	r0, [r4, #360]	; 0x168
     e2c:	e594116c 	ldr	r1, [r4, #364]	; 0x16c
     e30:	ebfffef6 	bl	a10 <draw_ship>
}
     e34:	e28dd00c 	add	sp, sp, #12
     e38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
     e3c:	0004ce24 	.word	0x0004ce24

00000e40 <config_KEYs>:


/* setup the KEY interrupts in the FPGA */
void config_KEYs() {
volatile int * KEY_ptr = (int *) 0xFF200050; // pushbutton KEY base address
*(KEY_ptr + 2) = 0xF; // enable interrupts for the two KEYs
     e40:	e3a03000 	mov	r3, #0
     e44:	e34f3f20 	movt	r3, #65312	; 0xff20
     e48:	e3a0200f 	mov	r2, #15
     e4c:	e5832058 	str	r2, [r3, #88]	; 0x58
     e50:	e12fff1e 	bx	lr

00000e54 <__cs3_reset>:
	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *)0xFFFEC110) = interrupt_ID;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void) {
     e54:	eafffffe 	b	e54 <__cs3_reset>

00000e58 <__cs3_isr_undef>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_undef(void) {
     e58:	eafffffe 	b	e58 <__cs3_isr_undef>

00000e5c <__cs3_isr_swi>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_swi(void) {
     e5c:	eafffffe 	b	e5c <__cs3_isr_swi>

00000e60 <__cs3_isr_pabort>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_pabort(void) {
     e60:	eafffffe 	b	e60 <__cs3_isr_pabort>

00000e64 <__cs3_isr_dabort>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_dabort(void) {
     e64:	eafffffe 	b	e64 <__cs3_isr_dabort>

00000e68 <__cs3_isr_fiq>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_fiq(void) {
     e68:	eafffffe 	b	e68 <__cs3_isr_fiq>

00000e6c <disable_A9_interrupts>:
/*
* Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void) {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     e6c:	e3a030d3 	mov	r3, #211	; 0xd3
     e70:	e129f003 	msr	CPSR_fc, r3
     e74:	e12fff1e 	bx	lr

00000e78 <set_A9_IRQ_stack>:
void set_A9_IRQ_stack(void) {
	int stack, mode;
	stack = 0xFFFFFFFF - 7; // top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     e78:	e3a030d2 	mov	r3, #210	; 0xd2
     e7c:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r"(stack));
     e80:	e3e03007 	mvn	r3, #7
     e84:	e1a0d003 	mov	sp, r3
	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     e88:	e3a030d3 	mov	r3, #211	; 0xd3
     e8c:	e129f003 	msr	CPSR_fc, r3
     e90:	e12fff1e 	bx	lr

00000e94 <enable_A9_interrupts>:
/*
* Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void) {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     e94:	e3a03053 	mov	r3, #83	; 0x53
     e98:	e129f003 	msr	CPSR_fc, r3
     e9c:	e12fff1e 	bx	lr

00000ea0 <config_interrupt>:
/*
* Configure Set Enable Registers (ICDISERn) and Interrupt Processor Target
* Registers (ICDIPTRn). The default (reset) values are used for other registers
* in the GIC.
*/
void config_interrupt(int N, int CPU_target) {
     ea0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     ea4:	e1a031c0 	asr	r3, r0, #3
     ea8:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
     eac:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int reg_offset, index, value, address;
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     eb0:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     eb4:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     eb8:	e3a04001 	mov	r4, #1
     ebc:	e18c2214 	orr	r2, r12, r4, lsl r2
     ec0:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     ec4:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     ec8:	e5c01000 	strb	r1, [r0]
}
     ecc:	e8bd0010 	ldmfd	sp!, {r4}
     ed0:	e12fff1e 	bx	lr

00000ed4 <config_GIC>:
}

/*
* Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void) {
     ed4:	e92d4008 	push	{r3, lr}
	config_interrupt (73, 1); // configure the FPGA KEYs interrupt (73)
     ed8:	e3a00049 	mov	r0, #73	; 0x49
     edc:	e3a01001 	mov	r1, #1
     ee0:	ebffffee 	bl	ea0 <config_interrupt>
	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) 0xFFFEC104) = 0xFFFF;
     ee4:	e3e02a13 	mvn	r2, #77824	; 0x13000
     ee8:	e30f3fff 	movw	r3, #65535	; 0xffff
     eec:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	// Set CPU Interface Control Register (ICCICR). Enable signaling of
	// interrupts
	*((int *) 0xFFFEC100) = 1;
     ef0:	e3a03001 	mov	r3, #1
     ef4:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) 0xFFFED000) = 1;
     ef8:	e3e02a12 	mvn	r2, #73728	; 0x12000
     efc:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     f00:	e8bd8008 	pop	{r3, pc}

00000f04 <pushbutton_ISR>:
	/* HEX display base address */
	volatile int * HEX3_HEX0_ptr = (int *) 0xFF200020;
	
	int press, HEX_bits;
	
	press = *(KEY_ptr + 3); // read the pushbutton interrupt register
     f04:	e3a03000 	mov	r3, #0
     f08:	e34f3f20 	movt	r3, #65312	; 0xff20
     f0c:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
	*(KEY_ptr + 3) = press; // Clear the interrupt
     f10:	e583205c 	str	r2, [r3, #92]	; 0x5c
	if (press & 0x1) { // KEY0
     f14:	e3120001 	tst	r2, #1
     f18:	0a000004 	beq	f30 <pushbutton_ISR+0x2c>
		start = true;
     f1c:	e30c3e1c 	movw	r3, #52764	; 0xce1c
     f20:	e3403004 	movt	r3, #4
     f24:	e3a02001 	mov	r2, #1
     f28:	e5c32194 	strb	r2, [r3, #404]	; 0x194
     f2c:	e12fff1e 	bx	lr
	}
	else if (press & 0x2) { // KEY1
     f30:	e3120002 	tst	r2, #2
     f34:	112fff1e 	bxne	lr
	}	
	else if (press & 0x4) { // KEY2
     f38:	e3120004 	tst	r2, #4
		start = true;
     f3c:	130c3e1c 	movwne	r3, #52764	; 0xce1c
     f40:	13403004 	movtne	r3, #4
     f44:	13a02001 	movne	r2, #1
     f48:	15c32194 	strbne	r2, [r3, #404]	; 0x194
     f4c:	e12fff1e 	bx	lr

00000f50 <__cs3_isr_irq>:
* 3. provides code that initializes the generic interrupt controller
*/
void pushbutton_ISR(void);
void config_interrupt(int, int);
// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void) {
     f50:	e24ee004 	sub	lr, lr, #4
     f54:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
	// Read the ICCIAR from the CPU Interface in the GIC
	int interrupt_ID = *((int *)0xFFFEC10C);
     f58:	e3e03a13 	mvn	r3, #77824	; 0x13000
	if (interrupt_ID == 73) // check if interrupt is from the KEYs
     f5c:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
     f60:	e3530049 	cmp	r3, #73	; 0x49
     f64:	1a000004 	bne	f7c <__cs3_isr_irq+0x2c>
		pushbutton_ISR();
     f68:	ebffffe5 	bl	f04 <pushbutton_ISR>
	else
		while (1); // if unexpected, then stay here
	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *)0xFFFEC110) = interrupt_ID;
     f6c:	e3a02049 	mov	r2, #73	; 0x49
     f70:	e3e03a13 	mvn	r3, #77824	; 0x13000
     f74:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
     f78:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
     f7c:	eafffffe 	b	f7c <__cs3_isr_irq+0x2c>

00000f80 <write_char>:
	return;
}

void write_char(int x, int y, char c) {
  // VGA character buffer
  volatile char * character_buffer = (char *) (0xC9000000 + (y<<7) + x);
     f80:	e28004c9 	add	r0, r0, #-922746880	; 0xc9000000
  *character_buffer = c;
     f84:	e7c02381 	strb	r2, [r0, r1, lsl #7]
     f88:	e12fff1e 	bx	lr

00000f8c <main>:
struct prevLocation Ship2SDRAM;
struct prevLocation Ship2ONCHIP;


int main(void)
{
     f8c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    
    disable_A9_interrupts(); // disable interrupts in the A9 processor
     f90:	ebffffb5 	bl	e6c <disable_A9_interrupts>
	set_A9_IRQ_stack(); // initialize the stack pointer for IRQ mode
     f94:	ebffffb7 	bl	e78 <set_A9_IRQ_stack>
	config_GIC(); // configure the general interrupt controller
     f98:	ebffffcd 	bl	ed4 <config_GIC>
	config_KEYs(); // configure pushbutton KEYs to generate interrupts
     f9c:	ebffffa7 	bl	e40 <config_KEYs>
	enable_A9_interrupts(); // enable interrupts in the A9 processor
     fa0:	ebffffbb 	bl	e94 <enable_A9_interrupts>
    
    initialize();
     fa4:	ebfffd1e 	bl	424 <initialize>
    
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
   
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
     fa8:	e30c59c0 	movw	r5, #51648	; 0xc9c0
     fac:	e3405004 	movt	r5, #4
     fb0:	e5953000 	ldr	r3, [r5]
     fb4:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
     fb8:	e5832004 	str	r2, [r3, #4]
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
     fbc:	ebfffeba 	bl	aac <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
     fc0:	e5953000 	ldr	r3, [r5]
     fc4:	e5933000 	ldr	r3, [r3]
     fc8:	e30c4e1c 	movw	r4, #52764	; 0xce1c
     fcc:	e3404004 	movt	r4, #4
     fd0:	e5843188 	str	r3, [r4, #392]	; 0x188
    clear_screen(); // pixel_buffer_start points to the pixel buffer
     fd4:	ebfffe0f 	bl	818 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
     fd8:	e5953000 	ldr	r3, [r5]
     fdc:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     fe0:	e5832004 	str	r2, [r3, #4]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     fe4:	e5933004 	ldr	r3, [r3, #4]
     fe8:	e5843188 	str	r3, [r4, #392]	; 0x188
	clear_screen();
     fec:	ebfffe09 	bl	818 <clear_screen>
	
	/* SW base address */
	volatile int * SW_ptr = (int *) 0xFF200040;	
	int before = * SW_ptr;
     ff0:	e3a03000 	mov	r3, #0
     ff4:	e34f3f20 	movt	r3, #65312	; 0xff20
     ff8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
	
    
	// start screen
    start = false;
     ffc:	e3a03000 	mov	r3, #0
    1000:	e5c43194 	strb	r3, [r4, #404]	; 0x194
    while (start == false) {		
    1004:	e30c4e1c 	movw	r4, #52764	; 0xce1c
    1008:	e3404004 	movt	r4, #4
		load_title();
    100c:	ebfffed1 	bl	b58 <load_title>
	int before = * SW_ptr;
	
    
	// start screen
    start = false;
    while (start == false) {		
    1010:	e5d43194 	ldrb	r3, [r4, #404]	; 0x194
    1014:	e3530000 	cmp	r3, #0
    1018:	0afffffb 	beq	100c <main+0x80>
		load_title();
	}
    
    clear_screen();
    101c:	ebfffdfd 	bl	818 <clear_screen>
 	
    score = 0;
    1020:	e30c3e1c 	movw	r3, #52764	; 0xce1c
    1024:	e3403004 	movt	r3, #4
    1028:	e3a02000 	mov	r2, #0
    102c:	e583218c 	str	r2, [r3, #396]	; 0x18c
    score2 = 0;
    1030:	e5832190 	str	r2, [r3, #400]	; 0x190

        checkKeyPress();
        // code for updating the locations of boxes
        update();
        
        write_char(3, 6, 'S');
    1034:	e3a0a003 	mov	r10, #3
    1038:	e3a04006 	mov	r4, #6
    103c:	e3a06053 	mov	r6, #83	; 0x53
		write_char(4, 6, 'C');
    1040:	e3a08004 	mov	r8, #4
		write_char(5, 6, 'O');
		write_char(6, 6, 'R');
		write_char(7, 6, 'E');
		write_char(8, 6, ':');
		write_char(9, 6, ('0'+score));
    1044:	e1a05003 	mov	r5, r3
            Ship1.y = 239 - 23;
            Ship2.y = 239 - 23;
        }        

        wait_for_sync();                            // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1048:	e30c79c0 	movw	r7, #51648	; 0xc9c0
    104c:	e3407004 	movt	r7, #4
 	
    score = 0;
    score2 = 0;
	while (1) {
        // clear_screen_partial();
        clear();
    1050:	ebfffe19 	bl	8bc <clear>

        // code for drawing the boxes and lines
        draw();
    1054:	ebffff44 	bl	d6c <draw>

        checkKeyPress();
    1058:	ebfffc7f 	bl	25c <checkKeyPress>
        // code for updating the locations of boxes
        update();
    105c:	ebfffd39 	bl	548 <update>
        
        write_char(3, 6, 'S');
    1060:	e1a0000a 	mov	r0, r10
    1064:	e1a01004 	mov	r1, r4
    1068:	e1a02006 	mov	r2, r6
    106c:	ebffffc3 	bl	f80 <write_char>
		write_char(4, 6, 'C');
    1070:	e1a00008 	mov	r0, r8
    1074:	e1a01004 	mov	r1, r4
    1078:	e3a02043 	mov	r2, #67	; 0x43
    107c:	ebffffbf 	bl	f80 <write_char>
		write_char(5, 6, 'O');
    1080:	e3a00005 	mov	r0, #5
    1084:	e1a01004 	mov	r1, r4
    1088:	e3a0204f 	mov	r2, #79	; 0x4f
    108c:	ebffffbb 	bl	f80 <write_char>
		write_char(6, 6, 'R');
    1090:	e1a00004 	mov	r0, r4
    1094:	e1a01004 	mov	r1, r4
    1098:	e3a02052 	mov	r2, #82	; 0x52
    109c:	ebffffb7 	bl	f80 <write_char>
		write_char(7, 6, 'E');
    10a0:	e3a00007 	mov	r0, #7
    10a4:	e1a01004 	mov	r1, r4
    10a8:	e3a02045 	mov	r2, #69	; 0x45
    10ac:	ebffffb3 	bl	f80 <write_char>
		write_char(8, 6, ':');
    10b0:	e3a00008 	mov	r0, #8
    10b4:	e1a01004 	mov	r1, r4
    10b8:	e3a0203a 	mov	r2, #58	; 0x3a
    10bc:	ebffffaf 	bl	f80 <write_char>
		write_char(9, 6, ('0'+score));
    10c0:	e595218c 	ldr	r2, [r5, #396]	; 0x18c
    10c4:	e2822030 	add	r2, r2, #48	; 0x30
    10c8:	e3a00009 	mov	r0, #9
    10cc:	e1a01004 	mov	r1, r4
    10d0:	e6ef2072 	uxtb	r2, r2
    10d4:	ebffffa9 	bl	f80 <write_char>
        
        write_char(63, 6, 'S');
    10d8:	e3a0003f 	mov	r0, #63	; 0x3f
    10dc:	e1a01004 	mov	r1, r4
    10e0:	e1a02006 	mov	r2, r6
    10e4:	ebffffa5 	bl	f80 <write_char>
		write_char(64, 6, 'C');
    10e8:	e3a00040 	mov	r0, #64	; 0x40
    10ec:	e1a01004 	mov	r1, r4
    10f0:	e3a02043 	mov	r2, #67	; 0x43
    10f4:	ebffffa1 	bl	f80 <write_char>
		write_char(65, 6, 'O');
    10f8:	e3a00041 	mov	r0, #65	; 0x41
    10fc:	e1a01004 	mov	r1, r4
    1100:	e3a0204f 	mov	r2, #79	; 0x4f
    1104:	ebffff9d 	bl	f80 <write_char>
		write_char(66, 6, 'R');
    1108:	e3a00042 	mov	r0, #66	; 0x42
    110c:	e1a01004 	mov	r1, r4
    1110:	e3a02052 	mov	r2, #82	; 0x52
    1114:	ebffff99 	bl	f80 <write_char>
		write_char(67, 6, 'E');
    1118:	e3a00043 	mov	r0, #67	; 0x43
    111c:	e1a01004 	mov	r1, r4
    1120:	e3a02045 	mov	r2, #69	; 0x45
    1124:	ebffff95 	bl	f80 <write_char>
		write_char(68, 6, ':');
    1128:	e3a00044 	mov	r0, #68	; 0x44
    112c:	e1a01004 	mov	r1, r4
    1130:	e3a0203a 	mov	r2, #58	; 0x3a
    1134:	ebffff91 	bl	f80 <write_char>
		write_char(69, 6, ('0'+score2));
    1138:	e5952190 	ldr	r2, [r5, #400]	; 0x190
    113c:	e2822030 	add	r2, r2, #48	; 0x30
    1140:	e3a00045 	mov	r0, #69	; 0x45
    1144:	e1a01004 	mov	r1, r4
    1148:	e6ef2072 	uxtb	r2, r2
    114c:	ebffff8b 	bl	f80 <write_char>
        
        if (score == 5 || score2 == 5){
    1150:	e595318c 	ldr	r3, [r5, #396]	; 0x18c
    1154:	e3530005 	cmp	r3, #5
    1158:	0a000002 	beq	1168 <main+0x1dc>
    115c:	e5953190 	ldr	r3, [r5, #400]	; 0x190
    1160:	e3530005 	cmp	r3, #5
    1164:	1a00000b 	bne	1198 <main+0x20c>
            start = false;
    1168:	e3a03000 	mov	r3, #0
    116c:	e5c53194 	strb	r3, [r5, #404]	; 0x194
            score = 0;
    1170:	e585318c 	str	r3, [r5, #396]	; 0x18c
            score2 = 0;
    1174:	e5853190 	str	r3, [r5, #400]	; 0x190
            while (start == false) {		
				load_end1();
    1178:	ebfffe58 	bl	ae0 <load_end1>
        
        if (score == 5 || score2 == 5){
            start = false;
            score = 0;
            score2 = 0;
            while (start == false) {		
    117c:	e5d53194 	ldrb	r3, [r5, #404]	; 0x194
    1180:	e3530000 	cmp	r3, #0
    1184:	0afffffb 	beq	1178 <main+0x1ec>
				load_end1();
			}
            clear_screen();
    1188:	ebfffda2 	bl	818 <clear_screen>
            Ship1.y = 239 - 23;
    118c:	e3a030d8 	mov	r3, #216	; 0xd8
    1190:	e585314c 	str	r3, [r5, #332]	; 0x14c
            Ship2.y = 239 - 23;
    1194:	e585316c 	str	r3, [r5, #364]	; 0x16c
        }        

        wait_for_sync();                            // swap front and back buffers on VGA vertical sync
    1198:	ebfffe36 	bl	a78 <wait_for_sync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    119c:	e5973000 	ldr	r3, [r7]
    11a0:	e5933004 	ldr	r3, [r3, #4]
    11a4:	e5853188 	str	r3, [r5, #392]	; 0x188
	}
    11a8:	eaffffa8 	b	1050 <main+0xc4>

000011ac <atexit>:
    11ac:	e1a01000 	mov	r1, r0
    11b0:	e3a00000 	mov	r0, #0
    11b4:	e92d4008 	push	{r3, lr}
    11b8:	e1a02000 	mov	r2, r0
    11bc:	e1a03000 	mov	r3, r0
    11c0:	eb00002c 	bl	1278 <__register_exitproc>
    11c4:	e8bd4008 	pop	{r3, lr}
    11c8:	e12fff1e 	bx	lr

000011cc <exit>:
    11cc:	e92d4008 	push	{r3, lr}
    11d0:	e3a01000 	mov	r1, #0
    11d4:	e1a04000 	mov	r4, r0
    11d8:	eb000063 	bl	136c <__call_exitprocs>
    11dc:	e59f3018 	ldr	r3, [pc, #24]	; 11fc <exit+0x30>
    11e0:	e5930000 	ldr	r0, [r3]
    11e4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    11e8:	e3530000 	cmp	r3, #0
    11ec:	11a0e00f 	movne	lr, pc
    11f0:	112fff13 	bxne	r3
    11f4:	e1a00004 	mov	r0, r4
    11f8:	eb0000e7 	bl	159c <_exit>
    11fc:	0004c95c 	.word	0x0004c95c

00001200 <srand>:
    1200:	e59f3010 	ldr	r3, [pc, #16]	; 1218 <srand+0x18>
    1204:	e5933000 	ldr	r3, [r3]
    1208:	e3a02000 	mov	r2, #0
    120c:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    1210:	e58320ac 	str	r2, [r3, #172]	; 0xac
    1214:	e12fff1e 	bx	lr
    1218:	0004c9c8 	.word	0x0004c9c8

0000121c <rand>:
    121c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1220:	e59f3044 	ldr	r3, [pc, #68]	; 126c <rand+0x50>
    1224:	e593c000 	ldr	r12, [r3]
    1228:	e59f4040 	ldr	r4, [pc, #64]	; 1270 <rand+0x54>
    122c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    1230:	e0040492 	mul	r4, r2, r4
    1234:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    1238:	e59f3034 	ldr	r3, [pc, #52]	; 1274 <rand+0x58>
    123c:	e0244193 	mla	r4, r3, r1, r4
    1240:	e0810392 	umull	r0, r1, r2, r3
    1244:	e3a02001 	mov	r2, #1
    1248:	e0922000 	adds	r2, r2, r0
    124c:	e0841001 	add	r1, r4, r1
    1250:	e3a03000 	mov	r3, #0
    1254:	e0a33001 	adc	r3, r3, r1
    1258:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    125c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1260:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1264:	e8bd0010 	ldmfd	sp!, {r4}
    1268:	e12fff1e 	bx	lr
    126c:	0004c9c8 	.word	0x0004c9c8
    1270:	5851f42d 	.word	0x5851f42d
    1274:	4c957f2d 	.word	0x4c957f2d

00001278 <__register_exitproc>:
    1278:	e59fc0e4 	ldr	r12, [pc, #228]	; 1364 <__register_exitproc+0xec>
    127c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1280:	e59c4000 	ldr	r4, [r12]
    1284:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1288:	e35c0000 	cmp	r12, #0
    128c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1290:	e59c5004 	ldr	r5, [r12, #4]
    1294:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1298:	e355001f 	cmp	r5, #31
    129c:	e24dd010 	sub	sp, sp, #16
    12a0:	e1a06000 	mov	r6, r0
    12a4:	da000015 	ble	1300 <__register_exitproc+0x88>
    12a8:	e59f00b8 	ldr	r0, [pc, #184]	; 1368 <__register_exitproc+0xf0>
    12ac:	e3500000 	cmp	r0, #0
    12b0:	1a000001 	bne	12bc <__register_exitproc+0x44>
    12b4:	e3e00000 	mvn	r0, #0
    12b8:	ea000018 	b	1320 <__register_exitproc+0xa8>
    12bc:	e3a00e19 	mov	r0, #400	; 0x190
    12c0:	e58d100c 	str	r1, [sp, #12]
    12c4:	e58d2008 	str	r2, [sp, #8]
    12c8:	e58d3004 	str	r3, [sp, #4]
    12cc:	e320f000 	nop	{0}
    12d0:	e250c000 	subs	r12, r0, #0
    12d4:	e59d100c 	ldr	r1, [sp, #12]
    12d8:	e59d2008 	ldr	r2, [sp, #8]
    12dc:	e59d3004 	ldr	r3, [sp, #4]
    12e0:	0afffff3 	beq	12b4 <__register_exitproc+0x3c>
    12e4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    12e8:	e3a00000 	mov	r0, #0
    12ec:	e58c0004 	str	r0, [r12, #4]
    12f0:	e58c5000 	str	r5, [r12]
    12f4:	e584c148 	str	r12, [r4, #328]	; 0x148
    12f8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    12fc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1300:	e3560000 	cmp	r6, #0
    1304:	e59c4004 	ldr	r4, [r12, #4]
    1308:	1a000007 	bne	132c <__register_exitproc+0xb4>
    130c:	e2843002 	add	r3, r4, #2
    1310:	e2844001 	add	r4, r4, #1
    1314:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1318:	e58c4004 	str	r4, [r12, #4]
    131c:	e3a00000 	mov	r0, #0
    1320:	e28dd010 	add	sp, sp, #16
    1324:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1328:	e12fff1e 	bx	lr
    132c:	e3a00001 	mov	r0, #1
    1330:	e1a00410 	lsl	r0, r0, r4
    1334:	e08c8104 	add	r8, r12, r4, lsl #2
    1338:	e3560002 	cmp	r6, #2
    133c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1340:	e5883108 	str	r3, [r8, #264]	; 0x108
    1344:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1348:	e1877000 	orr	r7, r7, r0
    134c:	01830000 	orreq	r0, r3, r0
    1350:	e1a05008 	mov	r5, r8
    1354:	e5882088 	str	r2, [r8, #136]	; 0x88
    1358:	e58c7188 	str	r7, [r12, #392]	; 0x188
    135c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1360:	eaffffe9 	b	130c <__register_exitproc+0x94>
    1364:	0004c95c 	.word	0x0004c95c
    1368:	00000000 	.word	0x00000000

0000136c <__call_exitprocs>:
    136c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1370:	e59f3168 	ldr	r3, [pc, #360]	; 14e0 <__call_exitprocs+0x174>
    1374:	e5933000 	ldr	r3, [r3]
    1378:	e24dd014 	sub	sp, sp, #20
    137c:	e58d3004 	str	r3, [sp, #4]
    1380:	e2833f52 	add	r3, r3, #328	; 0x148
    1384:	e58d0008 	str	r0, [sp, #8]
    1388:	e58d300c 	str	r3, [sp, #12]
    138c:	e1a07001 	mov	r7, r1
    1390:	e3a08001 	mov	r8, #1
    1394:	e59d3004 	ldr	r3, [sp, #4]
    1398:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    139c:	e3560000 	cmp	r6, #0
    13a0:	e59db00c 	ldr	r11, [sp, #12]
    13a4:	0a000033 	beq	1478 <__call_exitprocs+0x10c>
    13a8:	e5965004 	ldr	r5, [r6, #4]
    13ac:	e2554001 	subs	r4, r5, #1
    13b0:	5286a088 	addpl	r10, r6, #136	; 0x88
    13b4:	5285501f 	addpl	r5, r5, #31
    13b8:	508a5105 	addpl	r5, r10, r5, lsl #2
    13bc:	5a000007 	bpl	13e0 <__call_exitprocs+0x74>
    13c0:	ea000029 	b	146c <__call_exitprocs+0x100>
    13c4:	e5953000 	ldr	r3, [r5]
    13c8:	e1530007 	cmp	r3, r7
    13cc:	0a000005 	beq	13e8 <__call_exitprocs+0x7c>
    13d0:	e2444001 	sub	r4, r4, #1
    13d4:	e3740001 	cmn	r4, #1
    13d8:	e2455004 	sub	r5, r5, #4
    13dc:	0a000022 	beq	146c <__call_exitprocs+0x100>
    13e0:	e3570000 	cmp	r7, #0
    13e4:	1afffff6 	bne	13c4 <__call_exitprocs+0x58>
    13e8:	e5963004 	ldr	r3, [r6, #4]
    13ec:	e06a2005 	rsb	r2, r10, r5
    13f0:	e2433001 	sub	r3, r3, #1
    13f4:	e0862002 	add	r2, r6, r2
    13f8:	e1530004 	cmp	r3, r4
    13fc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1400:	13a01000 	movne	r1, #0
    1404:	05864004 	streq	r4, [r6, #4]
    1408:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    140c:	e3530000 	cmp	r3, #0
    1410:	0affffee 	beq	13d0 <__call_exitprocs+0x64>
    1414:	e1a02418 	lsl	r2, r8, r4
    1418:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    141c:	e1120001 	tst	r2, r1
    1420:	e5969004 	ldr	r9, [r6, #4]
    1424:	0a000016 	beq	1484 <__call_exitprocs+0x118>
    1428:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    142c:	e1120001 	tst	r2, r1
    1430:	1a000016 	bne	1490 <__call_exitprocs+0x124>
    1434:	e59d0008 	ldr	r0, [sp, #8]
    1438:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    143c:	e1a0e00f 	mov	lr, pc
    1440:	e12fff13 	bx	r3
    1444:	e5963004 	ldr	r3, [r6, #4]
    1448:	e1530009 	cmp	r3, r9
    144c:	1affffd0 	bne	1394 <__call_exitprocs+0x28>
    1450:	e59b3000 	ldr	r3, [r11]
    1454:	e1530006 	cmp	r3, r6
    1458:	1affffcd 	bne	1394 <__call_exitprocs+0x28>
    145c:	e2444001 	sub	r4, r4, #1
    1460:	e3740001 	cmn	r4, #1
    1464:	e2455004 	sub	r5, r5, #4
    1468:	1affffdc 	bne	13e0 <__call_exitprocs+0x74>
    146c:	e59f1070 	ldr	r1, [pc, #112]	; 14e4 <__call_exitprocs+0x178>
    1470:	e3510000 	cmp	r1, #0
    1474:	1a000009 	bne	14a0 <__call_exitprocs+0x134>
    1478:	e28dd014 	add	sp, sp, #20
    147c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1480:	e12fff1e 	bx	lr
    1484:	e1a0e00f 	mov	lr, pc
    1488:	e12fff13 	bx	r3
    148c:	eaffffec 	b	1444 <__call_exitprocs+0xd8>
    1490:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1494:	e1a0e00f 	mov	lr, pc
    1498:	e12fff13 	bx	r3
    149c:	eaffffe8 	b	1444 <__call_exitprocs+0xd8>
    14a0:	e5963004 	ldr	r3, [r6, #4]
    14a4:	e3530000 	cmp	r3, #0
    14a8:	e5963000 	ldr	r3, [r6]
    14ac:	1a000008 	bne	14d4 <__call_exitprocs+0x168>
    14b0:	e3530000 	cmp	r3, #0
    14b4:	0a000006 	beq	14d4 <__call_exitprocs+0x168>
    14b8:	e1a00006 	mov	r0, r6
    14bc:	e58b3000 	str	r3, [r11]
    14c0:	e320f000 	nop	{0}
    14c4:	e59b6000 	ldr	r6, [r11]
    14c8:	e3560000 	cmp	r6, #0
    14cc:	1affffb5 	bne	13a8 <__call_exitprocs+0x3c>
    14d0:	eaffffe8 	b	1478 <__call_exitprocs+0x10c>
    14d4:	e1a0b006 	mov	r11, r6
    14d8:	e1a06003 	mov	r6, r3
    14dc:	eafffff9 	b	14c8 <__call_exitprocs+0x15c>
    14e0:	0004c95c 	.word	0x0004c95c
    14e4:	00000000 	.word	0x00000000

000014e8 <register_fini>:
    14e8:	e92d4008 	push	{r3, lr}
    14ec:	e59f3010 	ldr	r3, [pc, #16]	; 1504 <register_fini+0x1c>
    14f0:	e3530000 	cmp	r3, #0
    14f4:	159f000c 	ldrne	r0, [pc, #12]	; 1508 <register_fini+0x20>
    14f8:	1bffff2b 	blne	11ac <atexit>
    14fc:	e8bd4008 	pop	{r3, lr}
    1500:	e12fff1e 	bx	lr
    1504:	0004c984 	.word	0x0004c984
    1508:	0000150c 	.word	0x0000150c

0000150c <__libc_fini_array>:
    150c:	e92d4038 	push	{r3, r4, r5, lr}
    1510:	e59f5030 	ldr	r5, [pc, #48]	; 1548 <__libc_fini_array+0x3c>
    1514:	e59f4030 	ldr	r4, [pc, #48]	; 154c <__libc_fini_array+0x40>
    1518:	e0654004 	rsb	r4, r5, r4
    151c:	e1b04144 	asrs	r4, r4, #2
    1520:	10855104 	addne	r5, r5, r4, lsl #2
    1524:	0a000004 	beq	153c <__libc_fini_array+0x30>
    1528:	e5353004 	ldr	r3, [r5, #-4]!
    152c:	e1a0e00f 	mov	lr, pc
    1530:	e12fff13 	bx	r3
    1534:	e2544001 	subs	r4, r4, #1
    1538:	1afffffa 	bne	1528 <__libc_fini_array+0x1c>
    153c:	eb012d10 	bl	4c984 <__libc_fini>
    1540:	e8bd4038 	pop	{r3, r4, r5, lr}
    1544:	e12fff1e 	bx	lr
    1548:	0004c99c 	.word	0x0004c99c
    154c:	0004c9a0 	.word	0x0004c9a0

00001550 <__cs3_premain>:
    1550:	e92d4008 	push	{r3, lr}
    1554:	eb000017 	bl	15b8 <__libc_init_array>
    1558:	e59f3030 	ldr	r3, [pc, #48]	; 1590 <__cs3_premain+0x40>
    155c:	e3530000 	cmp	r3, #0
    1560:	15930000 	ldrne	r0, [r3]
    1564:	01a00003 	moveq	r0, r3
    1568:	e59f3024 	ldr	r3, [pc, #36]	; 1594 <__cs3_premain+0x44>
    156c:	e3530000 	cmp	r3, #0
    1570:	15931000 	ldrne	r1, [r3]
    1574:	01a01003 	moveq	r1, r3
    1578:	e3a02000 	mov	r2, #0
    157c:	ebfffe82 	bl	f8c <main>
    1580:	e59f3010 	ldr	r3, [pc, #16]	; 1598 <__cs3_premain+0x48>
    1584:	e3530000 	cmp	r3, #0
    1588:	1bffff0f 	blne	11cc <exit>
    158c:	eafffffe 	b	158c <__cs3_premain+0x3c>
	...
    1598:	000011cc 	.word	0x000011cc

0000159c <_exit>:
    159c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    15a0:	e3a00018 	mov	r0, #24
    15a4:	e59f1004 	ldr	r1, [pc, #4]	; 15b0 <_exit+0x14>
    15a8:	ef123456 	svc	0x00123456
    15ac:	eafffffe 	b	15ac <_exit+0x10>
    15b0:	00020026 	.word	0x00020026

000015b4 <__cs3_isr_interrupt>:
    15b4:	eafffffe 	b	15b4 <__cs3_isr_interrupt>

000015b8 <__libc_init_array>:
    15b8:	e92d4070 	push	{r4, r5, r6, lr}
    15bc:	e59f506c 	ldr	r5, [pc, #108]	; 1630 <__libc_init_array+0x78>
    15c0:	e59f606c 	ldr	r6, [pc, #108]	; 1634 <__libc_init_array+0x7c>
    15c4:	e0656006 	rsb	r6, r5, r6
    15c8:	e1b06146 	asrs	r6, r6, #2
    15cc:	12455004 	subne	r5, r5, #4
    15d0:	13a04000 	movne	r4, #0
    15d4:	0a000005 	beq	15f0 <__libc_init_array+0x38>
    15d8:	e5b53004 	ldr	r3, [r5, #4]!
    15dc:	e2844001 	add	r4, r4, #1
    15e0:	e1a0e00f 	mov	lr, pc
    15e4:	e12fff13 	bx	r3
    15e8:	e1560004 	cmp	r6, r4
    15ec:	1afffff9 	bne	15d8 <__libc_init_array+0x20>
    15f0:	e59f5040 	ldr	r5, [pc, #64]	; 1638 <__libc_init_array+0x80>
    15f4:	e59f6040 	ldr	r6, [pc, #64]	; 163c <__libc_init_array+0x84>
    15f8:	e0656006 	rsb	r6, r5, r6
    15fc:	eb012cd8 	bl	4c964 <_init>
    1600:	e1b06146 	asrs	r6, r6, #2
    1604:	12455004 	subne	r5, r5, #4
    1608:	13a04000 	movne	r4, #0
    160c:	0a000005 	beq	1628 <__libc_init_array+0x70>
    1610:	e5b53004 	ldr	r3, [r5, #4]!
    1614:	e2844001 	add	r4, r4, #1
    1618:	e1a0e00f 	mov	lr, pc
    161c:	e12fff13 	bx	r3
    1620:	e1560004 	cmp	r6, r4
    1624:	1afffff9 	bne	1610 <__libc_init_array+0x58>
    1628:	e8bd4070 	pop	{r4, r5, r6, lr}
    162c:	e12fff1e 	bx	lr
    1630:	0004c97c 	.word	0x0004c97c
    1634:	0004c97c 	.word	0x0004c97c
    1638:	0004c97c 	.word	0x0004c97c
    163c:	0004c984 	.word	0x0004c984

Disassembly of section .rodata:

00001644 <title>:
	...
    e110:	ffffffff ffffffff ffffffff ffffffff     ................
    e120:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    e210:	ffff0000 ffffffff ffffffff ffffffff     ................
    e220:	ffffffff ffffffff ffffffff ffffffff     ................
    e230:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e390:	ffffffff ffffffff ffffffff ffffffff     ................
    e3a0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    e490:	ffff0000 ffffffff ffffffff ffffffff     ................
    e4a0:	ffffffff ffffffff ffffffff ffffffff     ................
    e4b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e610:	ffffffff ffffffff ffffffff ffffffff     ................
    e620:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    e710:	ffff0000 ffffffff ffffffff ffffffff     ................
    e720:	ffffffff ffffffff ffffffff ffffffff     ................
    e730:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e888:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    e8a8:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e990:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    e9b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eb08:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eb28:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ec10:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ec34:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ed88:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eda8:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ee90:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eeb4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f008:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f028:	ffffffff ffffffff ffffffff 00000000     ................
	...
    f110:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f134:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f288:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f2a8:	ffffffff ffffffff ffffffff 00000000     ................
	...
    f390:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f3b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f508:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f528:	ffffffff ffffffff ffffffff 00000000     ................
	...
    f610:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f634:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f788:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f7c0:	ffffffff ffffffff ffffffff ffffffff     ................
    f7d0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    f7f4:	ffff0000 ffffffff ffffffff ffffffff     ................
    f804:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    f824:	ffff0000 ffffffff ffffffff ffffffff     ................
    f834:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    f850:	ffffffff ffffffff ffffffff ffffffff     ................
    f860:	ffffffff ffffffff 00000000 00000000     ................
	...
    f890:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f8b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f8d4:	ffffffff ffffffff ffffffff ffffffff     ................
    f8e4:	ffffffff ffffffff 00000000 00000000     ................
	...
    f904:	ffffffff ffffffff ffffffff ffffffff     ................
    f914:	ffffffff ffffffff 00000000 00000000     ................
	...
    f92c:	ffff0000 ffffffff ffffffff ffffffff     ................
    f93c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    f958:	ffffffff ffffffff ffffffff ffffffff     ................
    f968:	ffffffff ffffffff 00000000 00000000     ................
	...
    fa08:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fa40:	ffffffff ffffffff ffffffff ffffffff     ................
    fa50:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    fa74:	ffff0000 ffffffff ffffffff ffffffff     ................
    fa84:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    faa4:	ffff0000 ffffffff ffffffff ffffffff     ................
    fab4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fad0:	ffffffff ffffffff ffffffff ffffffff     ................
    fae0:	ffffffff ffffffff 00000000 00000000     ................
	...
    fb10:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fb34:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fb54:	ffffffff ffffffff ffffffff ffffffff     ................
    fb64:	ffffffff ffffffff 00000000 00000000     ................
	...
    fb84:	ffffffff ffffffff ffffffff ffffffff     ................
    fb94:	ffffffff ffffffff 00000000 00000000     ................
	...
    fbac:	ffff0000 ffffffff ffffffff ffffffff     ................
    fbbc:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fbd8:	ffffffff ffffffff ffffffff ffffffff     ................
    fbe8:	ffffffff ffffffff 00000000 00000000     ................
	...
    fc88:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fcc0:	ffffffff ffffffff ffffffff ffffffff     ................
    fcd0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    fcf4:	ffff0000 ffffffff ffffffff ffffffff     ................
    fd04:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fd24:	ffff0000 ffffffff ffffffff ffffffff     ................
    fd34:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fd50:	ffffffff ffffffff ffffffff ffffffff     ................
    fd60:	ffffffff ffffffff 00000000 00000000     ................
	...
    fd90:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fdb4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fdd4:	ffffffff ffffffff ffffffff ffffffff     ................
    fde4:	ffffffff ffffffff 00000000 00000000     ................
	...
    fe04:	ffffffff ffffffff ffffffff ffffffff     ................
    fe14:	ffffffff ffffffff 00000000 00000000     ................
	...
    fe2c:	ffff0000 ffffffff ffffffff ffffffff     ................
    fe3c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fe58:	ffffffff ffffffff ffffffff ffffffff     ................
    fe68:	ffffffff ffffffff 00000000 00000000     ................
	...
    ff10:	ffffffff ffffffff ffffffff ffffffff     ................
    ff20:	0000ffff 00000000 00000000 00000000     ................
	...
    ff40:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff58:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff70:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff88:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ffa0:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ffb8:	ffffffff ffffffff ffffffff 00000000     ................
    ffc8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ffe0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10010:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10034:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1004c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10064:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1007c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10094:	ffff0000 ffffffff ffffffff 0000ffff     ................
   100a4:	00000000 ffffffff ffffffff ffffffff     ................
	...
   100c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   100d8:	ffffffff ffffffff ffffffff ffffffff     ................
   100e8:	0000ffff 00000000 00000000 00000000     ................
	...
   10190:	ffffffff ffffffff ffffffff ffffffff     ................
   101a0:	0000ffff 00000000 00000000 00000000     ................
	...
   101c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   101d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   101f0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10208:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10220:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10238:	ffffffff ffffffff ffffffff 00000000     ................
   10248:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10260:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10290:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102cc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102e4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102fc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10314:	ffff0000 ffffffff ffffffff 0000ffff     ................
   10324:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10340:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10358:	ffffffff ffffffff ffffffff ffffffff     ................
   10368:	0000ffff 00000000 00000000 00000000     ................
	...
   10410:	ffffffff ffffffff ffffffff ffffffff     ................
   10420:	0000ffff 00000000 00000000 00000000     ................
	...
   10440:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10458:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10470:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10488:	ffffffff ffffffff ffffffff 00000000     ................
	...
   104a0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   104b8:	ffffffff ffffffff ffffffff 00000000     ................
   104c8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   104e0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10510:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10534:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1054c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10564:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1057c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10594:	ffff0000 ffffffff ffffffff 0000ffff     ................
   105a4:	00000000 ffffffff ffffffff ffffffff     ................
	...
   105c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   105d8:	ffffffff ffffffff ffffffff ffffffff     ................
   105e8:	0000ffff 00000000 00000000 00000000     ................
	...
   1069c:	ffffffff ffffffff ffffffff ffffffff     ................
   106ac:	0000ffff 00000000 00000000 00000000     ................
   106bc:	00000000 ffffffff ffffffff ffffffff     ................
	...
   106d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   106fc:	ffffffff ffffffff ffffffff ffffffff     ................
   1070c:	ffffffff ffffffff 00000000 00000000     ................
   1071c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10748:	ffff0000 ffffffff ffffffff ffffffff     ................
   10758:	ffffffff ffffffff ffffffff ffffffff     ................
   10768:	ffffffff 0000ffff 00000000 00000000     ................
	...
   10790:	ffff0000 ffffffff ffffffff ffffffff     ................
   107a0:	ffffffff ffffffff ffffffff ffffffff     ................
   107b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   107d8:	ffff0000 ffffffff ffffffff ffffffff     ................
   107e8:	ffffffff ffffffff 0000ffff 00000000     ................
   107f8:	00000000 ffff0000 ffffffff ffffffff     ................
   10808:	0000ffff 00000000 00000000 00000000     ................
	...
   10828:	ffffffff ffffffff ffffffff ffffffff     ................
   10838:	ffffffff ffffffff ffffffff ffffffff     ................
   10848:	ffffffff 00000000 00000000 00000000     ................
   10858:	ffffffff ffffffff ffffffff 00000000     ................
	...
   1091c:	ffffffff ffffffff ffffffff ffffffff     ................
   1092c:	0000ffff 00000000 00000000 00000000     ................
   1093c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10958:	ffffffff ffffffff ffffffff 00000000     ................
	...
   1097c:	ffffffff ffffffff ffffffff ffffffff     ................
   1098c:	ffffffff ffffffff 00000000 00000000     ................
   1099c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   109c8:	ffff0000 ffffffff ffffffff ffffffff     ................
   109d8:	ffffffff ffffffff ffffffff ffffffff     ................
   109e8:	ffffffff 0000ffff 00000000 00000000     ................
	...
   10a10:	ffff0000 ffffffff ffffffff ffffffff     ................
   10a20:	ffffffff ffffffff ffffffff ffffffff     ................
   10a30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10a58:	ffff0000 ffffffff ffffffff ffffffff     ................
   10a68:	ffffffff ffffffff 0000ffff 00000000     ................
   10a78:	00000000 ffff0000 ffffffff ffffffff     ................
   10a88:	0000ffff 00000000 00000000 00000000     ................
	...
   10aa8:	ffffffff ffffffff ffffffff ffffffff     ................
   10ab8:	ffffffff ffffffff ffffffff ffffffff     ................
   10ac8:	ffffffff 00000000 00000000 00000000     ................
   10ad8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10b9c:	ffffffff ffffffff ffffffff ffffffff     ................
   10bac:	0000ffff 00000000 00000000 00000000     ................
   10bbc:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10bd8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10bfc:	ffffffff ffffffff ffffffff ffffffff     ................
   10c0c:	ffffffff ffffffff 00000000 00000000     ................
   10c1c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10c48:	ffff0000 ffffffff ffffffff ffffffff     ................
   10c58:	ffffffff ffffffff ffffffff ffffffff     ................
   10c68:	ffffffff 0000ffff 00000000 00000000     ................
	...
   10c90:	ffff0000 ffffffff ffffffff ffffffff     ................
   10ca0:	ffffffff ffffffff ffffffff ffffffff     ................
   10cb0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10cd8:	ffff0000 ffffffff ffffffff ffffffff     ................
   10ce8:	ffffffff ffffffff 0000ffff 00000000     ................
   10cf8:	00000000 ffff0000 ffffffff ffffffff     ................
   10d08:	0000ffff 00000000 00000000 00000000     ................
	...
   10d28:	ffffffff ffffffff ffffffff ffffffff     ................
   10d38:	ffffffff ffffffff ffffffff ffffffff     ................
   10d48:	ffffffff 00000000 00000000 00000000     ................
   10d58:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e28:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e58:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e74:	ffff0000 ffffffff ffffffff 0000ffff     ................
   10e84:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10ea0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10ec8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f10:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f34:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f54:	ffffffff ffffffff ffffffff 00000000     ................
   10f64:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f7c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10fa8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10fd8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110a8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110f4:	ffff0000 ffffffff ffffffff 0000ffff     ................
   11104:	00000000 ffffffff ffffffff ffffffff     ................
	...
   11120:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11148:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11190:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   111b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   111d4:	ffffffff ffffffff ffffffff 00000000     ................
   111e4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   111fc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11228:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11258:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11328:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11340:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11358:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11374:	ffff0000 ffffffff ffffffff 0000ffff     ................
   11384:	00000000 ffffffff ffffffff ffffffff     ................
	...
   113a0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   113c8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11410:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11434:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11454:	ffffffff ffffffff ffffffff 00000000     ................
   11464:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1147c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   114a8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   114d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11588:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   115a8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115f0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11608:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11620:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11648:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11690:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116cc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116e4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116fc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11728:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11758:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11808:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11828:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11840:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11858:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11870:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11888:	ffffffff ffffffff ffffffff 00000000     ................
	...
   118a0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   118c8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11910:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11934:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1194c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11964:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1197c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   119a8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   119d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11a88:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11aa8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ac0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ad8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11af0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11b08:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11b20:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11b48:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11b90:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11bb4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11bcc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11be4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11bfc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11c28:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11c58:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d08:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11d28:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d58:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d70:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d88:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11da0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11db8:	ffffffff ffffffff ffffffff 00000000     ................
   11dc8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11de0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e10:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e34:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e4c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e64:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e7c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e94:	ffff0000 ffffffff ffffffff 0000ffff     ................
   11ea4:	00000000 ffffffff ffffffff ffffffff     ................
	...
   11ec0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ed8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11f88:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11fa8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11fc0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11fd8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ff0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12008:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12020:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12038:	ffffffff ffffffff ffffffff 00000000     ................
   12048:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12060:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12090:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120b4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120cc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120e4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120fc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12114:	ffff0000 ffffffff ffffffff 0000ffff     ................
   12124:	00000000 ffffffff ffffffff ffffffff     ................
	...
   12140:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12158:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12208:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12228:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12240:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12258:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12270:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12288:	ffffffff ffffffff ffffffff 00000000     ................
	...
   122a0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   122b8:	ffffffff ffffffff ffffffff 00000000     ................
   122c8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   122e0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12310:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12334:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1234c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12364:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1237c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12394:	ffff0000 ffffffff ffffffff 0000ffff     ................
   123a4:	00000000 ffffffff ffffffff ffffffff     ................
	...
   123c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   123d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12490:	ffffffff ffffffff ffffffff ffffffff     ................
   124a0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   124c0:	ffffffff ffffffff ffffffff ffffffff     ................
   124d0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   124f4:	ffff0000 ffffffff ffffffff ffffffff     ................
   12504:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   12524:	ffff0000 ffffffff ffffffff ffffffff     ................
   12534:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12550:	ffffffff ffffffff ffffffff ffffffff     ................
   12560:	ffffffff ffffffff 00000000 00000000     ................
	...
   12590:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   125bc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   125d4:	ffffffff ffffffff ffffffff ffffffff     ................
   125e4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12604:	ffffffff ffffffff ffffffff ffffffff     ................
   12614:	ffffffff ffffffff 00000000 00000000     ................
	...
   1262c:	ffff0000 ffffffff ffffffff ffffffff     ................
   1263c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12658:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12710:	ffffffff ffffffff ffffffff ffffffff     ................
   12720:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12740:	ffffffff ffffffff ffffffff ffffffff     ................
   12750:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12774:	ffff0000 ffffffff ffffffff ffffffff     ................
   12784:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   127a4:	ffff0000 ffffffff ffffffff ffffffff     ................
   127b4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   127d0:	ffffffff ffffffff ffffffff ffffffff     ................
   127e0:	ffffffff ffffffff 00000000 00000000     ................
	...
   12810:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1283c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12854:	ffffffff ffffffff ffffffff ffffffff     ................
   12864:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12884:	ffffffff ffffffff ffffffff ffffffff     ................
   12894:	ffffffff ffffffff 00000000 00000000     ................
	...
   128ac:	ffff0000 ffffffff ffffffff ffffffff     ................
   128bc:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   128d8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12990:	ffffffff ffffffff ffffffff ffffffff     ................
   129a0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   129c0:	ffffffff ffffffff ffffffff ffffffff     ................
   129d0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   129f4:	ffff0000 ffffffff ffffffff ffffffff     ................
   12a04:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   12a24:	ffff0000 ffffffff ffffffff ffffffff     ................
   12a34:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12a50:	ffffffff ffffffff ffffffff ffffffff     ................
   12a60:	ffffffff ffffffff 00000000 00000000     ................
	...
   12a90:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12abc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12ad4:	ffffffff ffffffff ffffffff ffffffff     ................
   12ae4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12b04:	ffffffff ffffffff ffffffff ffffffff     ................
   12b14:	ffffffff ffffffff 00000000 00000000     ................
	...
   12b2c:	ffff0000 ffffffff ffffffff ffffffff     ................
   12b3c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12b58:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12c40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12ec0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13140:	ffffffff ffffffff ffffffff 00000000     ................
	...
   133c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13640:	ffffffff ffffffff ffffffff 00000000     ................
	...
   138c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13b40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13dc0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   14040:	ffffffff ffffffff ffffffff 00000000     ................
	...
   156cc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
   15714:	ffff0000 0000ffff 00000000 00000000     ................
   15724:	ffff0000 0000ffff 00000000 00000000     ................
	...
   15760:	ffffffff ffffffff 0000ffff 00000000     ................
   15770:	ffffffff 00000000 00000000 00000000     ................
   15780:	ffffffff 00000000 00000000 00000000     ................
	...
   157bc:	ffff0000 ffffffff ffffffff ffffffff     ................
   157cc:	0000ffff ffffffff 00000000 00000000     ................
	...
   157f8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   15820:	ffff0000 0000ffff 00000000 00000000     ................
	...
   1594c:	ffff0000 0000ffff 00000000 ffff0000     ................
   1595c:	0000ffff 00000000 00000000 00000000     ................
	...
   15994:	ffff0000 0000ffff 00000000 00000000     ................
   159a4:	ffff0000 0000ffff 00000000 00000000     ................
	...
   159dc:	ffff0000 0000ffff 00000000 ffffffff     ................
   159ec:	00000000 ffffffff 00000000 00000000     ................
   159fc:	00000000 ffffffff 00000000 00000000     ................
	...
   15a20:	ffffffff 00000000 00000000 00000000     ................
	...
   15a44:	ffffffff 00000000 00000000 ffffffff     ................
	...
   15a78:	ffffffff 00000000 00000000 00000000     ................
	...
   15aa0:	ffff0000 0000ffff 00000000 00000000     ................
	...
   15bcc:	ffff0000 0000ffff 00000000 ffff0000     ................
   15bdc:	0000ffff 00000000 00000000 00000000     ................
	...
   15c18:	ffffffff 00000000 00000000 ffffffff     ................
	...
   15c5c:	ffff0000 0000ffff 00000000 ffffffff     ................
   15c6c:	00000000 ffffffff 00000000 00000000     ................
	...
   15ca0:	ffffffff 00000000 00000000 00000000     ................
	...
   15cc4:	ffffffff 00000000 00000000 ffffffff     ................
	...
   15cf8:	ffffffff 00000000 00000000 00000000     ................
	...
   15d20:	ffff0000 0000ffff 00000000 00000000     ................
	...
   15e4c:	ffff0000 0000ffff 00000000 ffff0000     ................
   15e5c:	0000ffff 00000000 ffffffff ffffffff     ................
	...
   15e74:	ffffffff ffffffff 00000000 ffff0000     ................
   15e84:	ffffffff 0000ffff 00000000 00000000     ................
   15e94:	00000000 ffff0000 0000ffff ffff0000     ................
   15ea4:	0000ffff 00000000 ffff0000 ffffffff     ................
   15eb4:	0000ffff 00000000 ffffffff 00000000     ................
   15ec4:	ffffffff 00000000 ffffffff ffffffff     ................
	...
   15edc:	ffff0000 0000ffff 00000000 00000000     ................
   15eec:	00000000 ffffffff ffffffff 0000ffff     ................
   15efc:	00000000 ffffffff 00000000 ffffffff     ................
   15f0c:	ffffffff 0000ffff 00000000 00000000     ................
   15f1c:	ffff0000 ffffffff 0000ffff ffff0000     ................
   15f2c:	ffffffff 0000ffff 00000000 00000000     ................
	...
   15f44:	ffffffff 00000000 00000000 ffffffff     ................
   15f54:	ffffffff 0000ffff 00000000 ffff0000     ................
   15f64:	ffffffff 0000ffff 00000000 00000000     ................
   15f74:	00000000 ffffffff 00000000 00000000     ................
   15f84:	00000000 ffff0000 ffffffff ffffffff     ................
	...
   15f9c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   160cc:	ffff0000 0000ffff 00000000 ffff0000     ................
   160dc:	0000ffff ffff0000 0000ffff ffff0000     ................
   160ec:	0000ffff ffff0000 0000ffff ffff0000     ................
   160fc:	0000ffff ffffffff 00000000 ffffffff     ................
	...
   1611c:	ffffffff ffffffff 00000000 00000000     ................
   1612c:	ffffffff 00000000 ffffffff 00000000     ................
   1613c:	ffffffff 00000000 ffffffff 00000000     ................
   1614c:	ffffffff 0000ffff 00000000 00000000     ................
   1615c:	00000000 ffffffff 0000ffff 00000000     ................
   1616c:	00000000 ffffffff 00000000 ffffffff     ................
   1617c:	00000000 ffffffff 00000000 ffffffff     ................
   1618c:	00000000 ffffffff 00000000 00000000     ................
   1619c:	00000000 ffffffff 00000000 ffffffff     ................
   161ac:	00000000 ffffffff 00000000 00000000     ................
	...
   161c4:	ffffffff 00000000 00000000 ffffffff     ................
   161d4:	00000000 ffffffff 00000000 ffffffff     ................
   161e4:	00000000 ffffffff 00000000 00000000     ................
   161f4:	00000000 ffffffff ffffffff ffffffff     ................
   16204:	00000000 ffff0000 0000ffff ffff0000     ................
   16214:	0000ffff ffff0000 0000ffff ffff0000     ................
   16224:	0000ffff 00000000 00000000 00000000     ................
	...
   1634c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
   16364:	ffff0000 ffffffff 0000ffff ffff0000     ................
   16374:	0000ffff 00000000 00000000 ffffffff     ................
   16384:	ffffffff ffffffff 00000000 00000000     ................
	...
   1639c:	ffff0000 0000ffff 00000000 00000000     ................
   163ac:	ffffffff 00000000 ffffffff 00000000     ................
   163bc:	ffffffff 00000000 ffffffff 00000000     ................
   163cc:	ffffffff 00000000 00000000 00000000     ................
	...
   163e4:	ffffffff 0000ffff 00000000 ffffffff     ................
   163f4:	00000000 ffffffff 00000000 ffffffff     ................
   16404:	00000000 ffffffff 00000000 ffffffff     ................
	...
   16420:	ffffffff 00000000 ffffffff 00000000     ................
   16430:	ffffffff 00000000 00000000 00000000     ................
   16440:	00000000 ffffffff 00000000 00000000     ................
   16450:	ffffffff 00000000 ffffffff 00000000     ................
   16460:	ffffffff ffffffff ffffffff 00000000     ................
	...
   16478:	ffffffff 00000000 00000000 00000000     ................
   16488:	ffff0000 0000ffff ffff0000 0000ffff     ................
   16498:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   165cc:	ffff0000 0000ffff 00000000 ffff0000     ................
   165dc:	0000ffff 00000000 ffffffff ffff0000     ................
   165ec:	0000ffff ffff0000 0000ffff 00000000     ................
   165fc:	00000000 ffffffff 00000000 00000000     ................
	...
   1661c:	ffff0000 0000ffff 00000000 00000000     ................
   1662c:	ffffffff 00000000 ffffffff 00000000     ................
   1663c:	ffffffff 00000000 ffffffff 00000000     ................
   1664c:	ffffffff 00000000 00000000 00000000     ................
	...
   16668:	ffffffff 00000000 ffffffff 00000000     ................
   16678:	ffffffff 00000000 ffffffff 00000000     ................
   16688:	ffffffff 00000000 ffffffff 00000000     ................
	...
   166a0:	ffffffff 00000000 ffffffff 00000000     ................
   166b0:	ffffffff 00000000 00000000 00000000     ................
   166c0:	00000000 ffffffff 00000000 00000000     ................
   166d0:	ffffffff 00000000 ffffffff 00000000     ................
   166e0:	ffffffff 00000000 00000000 00000000     ................
	...
   166f8:	ffffffff 00000000 00000000 00000000     ................
   16708:	ffff0000 0000ffff ffff0000 0000ffff     ................
   16718:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   1684c:	ffff0000 0000ffff 00000000 ffff0000     ................
   1685c:	0000ffff ffff0000 0000ffff ffff0000     ................
   1686c:	0000ffff ffff0000 0000ffff 00000000     ................
   1687c:	00000000 ffffffff 00000000 00000000     ................
	...
   1689c:	ffff0000 0000ffff 00000000 00000000     ................
   168ac:	ffffffff 00000000 ffffffff 00000000     ................
   168bc:	ffffffff 00000000 ffffffff 00000000     ................
   168cc:	ffffffff 00000000 00000000 00000000     ................
   168dc:	ffff0000 0000ffff 00000000 ffffffff     ................
   168ec:	00000000 ffffffff 00000000 ffffffff     ................
   168fc:	00000000 ffffffff 00000000 ffffffff     ................
   1690c:	00000000 ffffffff 00000000 00000000     ................
   1691c:	00000000 ffffffff 00000000 ffffffff     ................
   1692c:	00000000 ffffffff 00000000 00000000     ................
	...
   16944:	ffffffff 00000000 00000000 ffffffff     ................
   16954:	00000000 ffffffff 00000000 ffffffff     ................
	...
   16978:	ffffffff 00000000 00000000 00000000     ................
   16988:	ffff0000 0000ffff ffff0000 0000ffff     ................
   16998:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   16acc:	ffff0000 0000ffff 00000000 ffff0000     ................
   16adc:	0000ffff ffff0000 0000ffff ffff0000     ................
   16aec:	0000ffff ffff0000 0000ffff ffff0000     ................
   16afc:	0000ffff ffffffff 00000000 ffffffff     ................
	...
   16b1c:	ffff0000 0000ffff 00000000 00000000     ................
   16b2c:	ffffffff 00000000 ffffffff 00000000     ................
   16b3c:	ffffffff 00000000 ffffffff 00000000     ................
   16b4c:	ffffffff 00000000 00000000 00000000     ................
   16b5c:	ffff0000 0000ffff 00000000 ffffffff     ................
   16b6c:	00000000 ffffffff 00000000 ffffffff     ................
   16b7c:	00000000 ffffffff 00000000 ffffffff     ................
   16b8c:	00000000 ffffffff 00000000 00000000     ................
   16b9c:	00000000 ffffffff 00000000 ffffffff     ................
   16bac:	00000000 ffffffff 00000000 00000000     ................
	...
   16bc4:	ffffffff 00000000 00000000 ffffffff     ................
   16bd4:	00000000 ffffffff 00000000 ffffffff     ................
   16be4:	00000000 ffffffff 00000000 00000000     ................
   16bf4:	00000000 ffffffff 00000000 00000000     ................
   16c04:	00000000 ffff0000 0000ffff ffff0000     ................
   16c14:	0000ffff ffff0000 0000ffff ffff0000     ................
   16c24:	0000ffff 00000000 00000000 00000000     ................
	...
   16d4c:	ffff0000 0000ffff 00000000 00000000     ................
   16d5c:	ffffffff 00000000 ffffffff ffffffff     ................
   16d6c:	0000ffff 00000000 ffffffff ffffffff     ................
   16d7c:	00000000 ffff0000 ffffffff 0000ffff     ................
	...
   16d9c:	ffff0000 0000ffff 00000000 00000000     ................
   16dac:	ffff0000 ffffffff 0000ffff 00000000     ................
   16dbc:	ffff0000 ffffffff ffffffff 00000000     ................
   16dcc:	ffffffff 00000000 00000000 00000000     ................
   16ddc:	00000000 ffffffff ffffffff 0000ffff     ................
   16dec:	00000000 ffffffff 00000000 ffffffff     ................
   16dfc:	00000000 ffffffff 00000000 ffffffff     ................
   16e0c:	ffffffff 0000ffff 00000000 00000000     ................
   16e1c:	00000000 ffff0000 0000ffff ffff0000     ................
   16e2c:	ffffffff 0000ffff 00000000 00000000     ................
	...
   16e44:	ffffffff 00000000 00000000 ffffffff     ................
   16e54:	00000000 ffffffff 00000000 ffff0000     ................
   16e64:	ffffffff 0000ffff 00000000 00000000     ................
   16e74:	00000000 ffffffff ffffffff ffffffff     ................
   16e84:	0000ffff ffff0000 0000ffff ffff0000     ................
   16e94:	0000ffff 00000000 ffffffff ffffffff     ................
   16ea4:	0000ffff 00000000 00000000 00000000     ................
	...
   17088:	ffffffff 00000000 00000000 00000000     ................
	...
   17308:	ffffffff 00000000 00000000 00000000     ................
	...
   17588:	ffffffff 00000000 00000000 00000000     ................
	...
   18b6c:	ffffffff ffffffff ffffffff 0000ffff     ................
   18b7c:	ffffffff 00000000 00000000 00000000     ................
	...
   18bcc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   18be4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
   18c08:	ffffffff 00000000 00000000 00000000     ................
	...
   18c3c:	ffff0000 0000ffff 00000000 ffff0000     ................
   18c4c:	0000ffff 00000000 ffff0000 0000ffff     ................
   18c5c:	ffffffff 00000000 00000000 00000000     ................
	...
   18c84:	ffffffff 00000000 00000000 00000000     ................
	...
   18dec:	ffffffff 00000000 00000000 00000000     ................
   18dfc:	ffffffff 00000000 00000000 00000000     ................
	...
   18e1c:	ffff0000 0000ffff 00000000 00000000     ................
   18e2c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   18e4c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   18e64:	ffff0000 0000ffff 00000000 ffff0000     ................
   18e74:	0000ffff 00000000 00000000 00000000     ................
   18e84:	00000000 ffffffff 00000000 00000000     ................
	...
   18ea0:	ffffffff 00000000 00000000 00000000     ................
	...
   18ebc:	ffff0000 0000ffff 00000000 ffff0000     ................
   18ecc:	0000ffff 00000000 ffff0000 0000ffff     ................
   18edc:	ffffffff 00000000 00000000 00000000     ................
	...
   18f04:	ffffffff 00000000 00000000 00000000     ................
	...
   1906c:	ffffffff 00000000 00000000 00000000     ................
	...
   1909c:	ffff0000 0000ffff 00000000 00000000     ................
   190ac:	ffff0000 0000ffff 00000000 00000000     ................
	...
   190cc:	ffff0000 0000ffff 00000000 00000000     ................
	...
   190e4:	ffff0000 0000ffff 00000000 ffff0000     ................
   190f4:	0000ffff 00000000 00000000 00000000     ................
	...
   19120:	ffffffff 00000000 00000000 00000000     ................
	...
   1913c:	ffff0000 0000ffff 00000000 ffff0000     ................
   1914c:	0000ffff 00000000 ffff0000 0000ffff     ................
	...
   19184:	ffffffff 00000000 00000000 00000000     ................
	...
   192ec:	ffffffff 00000000 00000000 00000000     ................
   192fc:	ffffffff 00000000 ffffffff ffffffff     ................
   1930c:	00000000 ffffffff ffffffff 00000000     ................
   1931c:	ffffffff ffffffff 00000000 00000000     ................
   1932c:	ffffffff ffffffff 00000000 ffffffff     ................
   1933c:	ffffffff 00000000 00000000 00000000     ................
   1934c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   19364:	ffff0000 0000ffff 00000000 ffff0000     ................
   19374:	0000ffff ffff0000 ffffffff 0000ffff     ................
   19384:	00000000 ffffffff 00000000 ffffffff     ................
   19394:	ffffffff 0000ffff ffff0000 ffffffff     ................
   193a4:	0000ffff ffff0000 ffffffff 0000ffff     ................
	...
   193c0:	ffffffff 00000000 ffffffff ffffffff     ................
   193d0:	00000000 ffffffff 00000000 ffffffff     ................
   193e0:	00000000 ffffffff ffffffff 0000ffff     ................
   193f0:	00000000 ffff0000 ffffffff 0000ffff     ................
   19400:	00000000 ffffffff 00000000 00000000     ................
	...
   1956c:	ffffffff ffffffff ffffffff 00000000     ................
   1957c:	ffffffff 00000000 ffffffff 0000ffff     ................
   1958c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   1959c:	ffff0000 0000ffff 00000000 00000000     ................
   195ac:	ffff0000 0000ffff ffff0000 0000ffff     ................
   195bc:	ffff0000 0000ffff 00000000 00000000     ................
   195cc:	ffff0000 ffffffff ffffffff 00000000     ................
	...
   195e4:	ffff0000 0000ffff 00000000 ffff0000     ................
   195f4:	0000ffff ffffffff 00000000 ffffffff     ................
   19604:	00000000 ffffffff 00000000 ffffffff     ................
   19614:	00000000 ffffffff 00000000 ffffffff     ................
   19624:	00000000 ffffffff 00000000 ffffffff     ................
	...
   19640:	ffffffff 00000000 ffffffff ffffffff     ................
   19650:	00000000 ffffffff 00000000 ffffffff     ................
   19660:	00000000 ffffffff 00000000 ffffffff     ................
   19670:	00000000 ffffffff 00000000 ffffffff     ................
   19680:	00000000 ffffffff 00000000 00000000     ................
	...
   197ec:	ffffffff 00000000 00000000 00000000     ................
   197fc:	ffffffff 00000000 ffffffff 00000000     ................
   1980c:	ffff0000 0000ffff 00000000 00000000     ................
   1981c:	ffff0000 0000ffff 00000000 00000000     ................
   1982c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   1983c:	ffff0000 0000ffff 00000000 00000000     ................
   1984c:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   19864:	ffff0000 ffffffff ffffffff ffffffff     ................
   19874:	00000000 ffffffff 00000000 ffffffff     ................
   19884:	00000000 ffffffff 00000000 ffffffff     ................
   19894:	00000000 ffffffff 00000000 ffffffff     ................
   198a4:	00000000 ffffffff 00000000 00000000     ................
	...
   198c0:	ffff0000 0000ffff 0000ffff ffff0000     ................
   198d0:	ffff0000 0000ffff 00000000 ffffffff     ................
   198e0:	00000000 ffffffff 00000000 ffffffff     ................
   198f0:	00000000 ffffffff 00000000 00000000     ................
   19900:	00000000 ffffffff 00000000 00000000     ................
	...
   19a6c:	ffffffff 00000000 00000000 00000000     ................
   19a7c:	ffffffff 00000000 ffffffff 00000000     ................
   19a8c:	00000000 ffffffff ffffffff 00000000     ................
   19a9c:	ffff0000 0000ffff 00000000 00000000     ................
   19aac:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19abc:	ffff0000 0000ffff 00000000 00000000     ................
	...
   19ad4:	ffff0000 0000ffff 00000000 00000000     ................
   19ae4:	ffff0000 0000ffff 00000000 00000000     ................
   19af4:	00000000 ffffffff 00000000 ffffffff     ................
   19b04:	00000000 ffffffff 00000000 ffffffff     ................
   19b14:	00000000 ffffffff 00000000 ffffffff     ................
   19b24:	00000000 ffff0000 ffffffff 0000ffff     ................
	...
   19b40:	ffff0000 ffffffff 0000ffff ffff0000     ................
   19b50:	ffffffff 0000ffff 00000000 ffffffff     ................
   19b60:	00000000 ffffffff 00000000 ffffffff     ................
   19b70:	00000000 ffff0000 ffffffff 0000ffff     ................
   19b80:	00000000 ffffffff 00000000 00000000     ................
	...
   19cec:	ffffffff 00000000 00000000 00000000     ................
   19cfc:	ffffffff 00000000 ffffffff 00000000     ................
	...
   19d14:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   19d2c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19d3c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   19d54:	ffff0000 0000ffff 00000000 00000000     ................
   19d64:	ffff0000 0000ffff 00000000 00000000     ................
   19d74:	00000000 ffffffff 00000000 ffffffff     ................
   19d84:	00000000 ffffffff 00000000 ffffffff     ................
   19d94:	00000000 ffffffff 00000000 ffffffff     ................
	...
   19db0:	ffffffff 00000000 00000000 00000000     ................
   19dc0:	00000000 ffffffff 00000000 00000000     ................
   19dd0:	ffffffff 00000000 00000000 ffffffff     ................
   19de0:	00000000 ffffffff 00000000 ffffffff     ................
	...
   19dfc:	ffffffff 00000000 00000000 00000000     ................
	...
   19f6c:	ffffffff 00000000 00000000 00000000     ................
   19f7c:	ffffffff 00000000 ffffffff 00000000     ................
   19f8c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19f9c:	ffff0000 0000ffff 00000000 00000000     ................
   19fac:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19fbc:	ffff0000 0000ffff 00000000 00000000     ................
   19fcc:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   19fe4:	ffff0000 0000ffff 00000000 00000000     ................
   19ff4:	00000000 ffffffff 00000000 ffffffff     ................
   1a004:	00000000 ffffffff 00000000 ffffffff     ................
   1a014:	00000000 ffffffff 00000000 ffffffff     ................
   1a024:	00000000 ffffffff 00000000 ffffffff     ................
	...
   1a044:	ffffffff 00000000 00000000 ffffffff     ................
	...
   1a05c:	ffffffff 00000000 ffffffff 00000000     ................
   1a06c:	ffffffff 00000000 ffffffff 00000000     ................
   1a07c:	ffffffff 00000000 ffffffff 00000000     ................
	...
   1a1ec:	ffffffff 00000000 00000000 00000000     ................
   1a1fc:	ffffffff 00000000 ffffffff 00000000     ................
   1a20c:	00000000 ffffffff ffffffff 00000000     ................
   1a21c:	00000000 ffffffff 00000000 00000000     ................
   1a22c:	00000000 ffffffff 00000000 ffffffff     ................
   1a23c:	ffffffff 00000000 00000000 00000000     ................
   1a24c:	00000000 ffffffff ffffffff 00000000     ................
	...
   1a264:	ffff0000 0000ffff 00000000 00000000     ................
   1a274:	00000000 ffff0000 ffffffff 0000ffff     ................
   1a284:	00000000 ffffffff 00000000 ffffffff     ................
   1a294:	00000000 ffffffff 00000000 ffff0000     ................
   1a2a4:	0000ffff ffff0000 ffffffff 0000ffff     ................
	...
   1a2c4:	ffffffff 00000000 00000000 ffffffff     ................
	...
   1a2dc:	ffffffff 00000000 ffffffff 00000000     ................
   1a2ec:	ffffffff 00000000 ffff0000 ffffffff     ................
   1a2fc:	0000ffff 00000000 ffffffff 00000000     ................
	...

00026e44 <ship>:
	...
   26e54:	ffffffff 00000000 00000000 00000000     ................
	...
   26e74:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
   26e98:	ffffffff 00000000 ffffffff 00000000     ................
   26ea8:	00200000 00200841 00000000 00200000     .. .A. ....... .
   26eb8:	ffff0000 0000ffff 08410000 ffff0000     ..........A.....
   26ec8:	0000ffff 00000000 00000000 00000000     ................
   26ed8:	00000000 ffffffff 00000000 00000000     ................
   26ee8:	00000000 ffffffff 00000000 00000000     ................
   26ef8:	00000841 00000000 0000ffdf 00000000     A...............
	...
   26f10:	ffff0000 00000000 00000000 00000000     ................
   26f20:	00000000 0000ffff 00000000 00000000     ................
   26f30:	00000000 ffff0000 00000000 00000000     ................
	...
   26f48:	0000ffff 00000000 00000000 00000000     ................
   26f58:	ffff0000 00000000 00000000 00000000     ................
   26f68:	00000000 0000ffff 00000000 00000000     ................
   26f78:	00000000 ffff0000 00000000 00000000     ................
	...
   26f90:	0000ffff 00000000 00000000 00000000     ................
   26fa0:	ffff0000 00000000 00000000 00000000     ................
   26fb0:	00000000 0000ffff 00000000 00000000     ................
   26fc0:	00000000 ffff0000 00000000 00200000     .............. .
   26fd0:	00000000 00000020 0000ffff 00000000     .... ...........
	...
   26fe8:	ffff0000 00000000 00000000 00000000     ................
   26ff8:	00000000 0000ffff 00000000 00000000     ................
   27008:	00000000 ffff0000 00000000 00000000     ................
   27018:	00000000 ffff0000 0000ffff 00000000     ................
	...
   27030:	ffff0000 0000ffff 00000000 ffff0000     ................
   27040:	ffffffff 00000000 00000000 00200000     .............. .
	...
   27058:	ffffffff 00000000 ffff0000 0000ffff     ................
   27068:	00000000 00000020 00000000 00000000     .... ...........
   27078:	00000000 ffff0000 0000ffff ffffffff     ................
	...
   270a4:	ffffffff ffffffff 0000ffff 00000000     ................
   270b4:	ffffffff ffffffff ffffffff 00000000     ................
   270c4:	ffff0000 ffffffff ffff0000 ffffffff     ................
   270d4:	ffff0000 ffffffff ffffffff ffffffff     ................
   270e4:	0000ffff ffffffff 0000ffff 00000000     ................
   270f4:	ffff0000 ffff0000 00000000 00000000     ................
   27104:	00000000 0000ffff 0000ffff 00000000     ................
   27114:	00000000 ffff0000 ffffffff 00000000     ................
	...
   2712c:	ffffffff 0000ffff 00000000 00000000     ................
   2713c:	00000000 0000ffff 00000000 00000000     ................
	...

0002715c <end1>:
	...
   343d0:	ffffffff ffffffff ffffffff ffffffff     ................
   343e0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   344cc:	ffffffff ffffffff ffffffff ffffffff     ................
   344dc:	ffffffff ffffffff 00000000 00000000     ................
	...
   34650:	ffffffff ffffffff ffffffff ffffffff     ................
   34660:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   3474c:	ffffffff ffffffff ffffffff ffffffff     ................
   3475c:	ffffffff ffffffff 00000000 00000000     ................
	...
   348d0:	ffffffff ffffffff ffffffff ffffffff     ................
   348e0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   349cc:	ffffffff ffffffff ffffffff ffffffff     ................
   349dc:	ffffffff ffffffff 00000000 00000000     ................
	...
   34b48:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   34b68:	ffffffff ffffffff ffffffff 00000000     ................
	...
   34c44:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   34c5c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   34dc8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   34de8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   34ec4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   34edc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   35048:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   35068:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35144:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   3515c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   352c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   352ec:	ffff0000 ffffffff 00000000 00000000     ................
	...
   353c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   353e4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35544:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3556c:	ffff0000 ffffffff 00000000 00000000     ................
	...
   35640:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35664:	ffffffff ffffffff ffffffff 00000000     ................
	...
   357c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   357ec:	ffff0000 ffffffff 00000000 00000000     ................
	...
   358c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   358e4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35a44:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35a84:	ffff0000 ffffffff ffffffff ffffffff     ................
   35a94:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35ab0:	ffffffff ffffffff ffffffff ffffffff     ................
   35ac0:	ffffffff ffffffff ffffffff ffffffff     ................
   35ad0:	ffffffff ffffffff ffffffff ffffffff     ................
   35ae0:	ffffffff 0000ffff 00000000 00000000     ................
	...
   35afc:	ffff0000 ffffffff ffffffff ffffffff     ................
   35b0c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35b40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35b64:	ffffffff ffffffff ffffffff 00000000     ................
   35b74:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   35b98:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   35bb0:	ffff0000 ffffffff ffffffff ffffffff     ................
   35bc0:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35bdc:	ffffffff ffffffff ffffffff ffffffff     ................
   35bec:	ffffffff ffffffff 00000000 00000000     ................
	...
   35cc4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35d04:	ffff0000 ffffffff ffffffff ffffffff     ................
   35d14:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35d30:	ffffffff ffffffff ffffffff ffffffff     ................
   35d40:	ffffffff ffffffff ffffffff ffffffff     ................
   35d50:	ffffffff ffffffff ffffffff ffffffff     ................
   35d60:	ffffffff 0000ffff 00000000 00000000     ................
	...
   35d7c:	ffff0000 ffffffff ffffffff ffffffff     ................
   35d8c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35dc0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35de4:	ffffffff ffffffff ffffffff 00000000     ................
   35df4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   35e18:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   35e30:	ffff0000 ffffffff ffffffff ffffffff     ................
   35e40:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35e5c:	ffffffff ffffffff ffffffff ffffffff     ................
   35e6c:	ffffffff ffffffff 00000000 00000000     ................
	...
   35f44:	ffffffff ffffffff ffffffff 00000000     ................
	...
   35f84:	ffff0000 ffffffff ffffffff ffffffff     ................
   35f94:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   35fb0:	ffffffff ffffffff ffffffff ffffffff     ................
   35fc0:	ffffffff ffffffff ffffffff ffffffff     ................
   35fd0:	ffffffff ffffffff ffffffff ffffffff     ................
   35fe0:	ffffffff 0000ffff 00000000 00000000     ................
	...
   35ffc:	ffff0000 ffffffff ffffffff ffffffff     ................
   3600c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   36040:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36064:	ffffffff ffffffff ffffffff 00000000     ................
   36074:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   36098:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   360b0:	ffff0000 ffffffff ffffffff ffffffff     ................
   360c0:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   360dc:	ffffffff ffffffff ffffffff ffffffff     ................
   360ec:	ffffffff ffffffff 00000000 00000000     ................
	...
   361c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36200:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36218:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36230:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36248:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36260:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36278:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36290:	ffffffff ffffffff ffffffff 00000000     ................
	...
   362c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   362e4:	ffffffff ffffffff ffffffff 00000000     ................
   362f4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   36318:	ffff0000 ffffffff ffffffff 0000ffff     ................
   36328:	00000000 ffffffff ffffffff ffffffff     ................
	...
   36344:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3635c:	ffffffff ffffffff ffffffff ffffffff     ................
   3636c:	0000ffff 00000000 00000000 00000000     ................
	...
   36444:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36480:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36498:	ffffffff ffffffff ffffffff 00000000     ................
	...
   364b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   364c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   364e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   364f8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36510:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36540:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36564:	ffffffff ffffffff ffffffff 00000000     ................
   36574:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   36598:	ffff0000 ffffffff ffffffff 0000ffff     ................
   365a8:	00000000 ffffffff ffffffff ffffffff     ................
	...
   365c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   365dc:	ffffffff ffffffff ffffffff ffffffff     ................
   365ec:	0000ffff 00000000 00000000 00000000     ................
	...
   366c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36700:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36718:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36730:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36748:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36760:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36778:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36790:	ffffffff ffffffff ffffffff 00000000     ................
	...
   367c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   367e4:	ffffffff ffffffff ffffffff 00000000     ................
   367f4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   36818:	ffff0000 ffffffff ffffffff 0000ffff     ................
   36828:	00000000 ffffffff ffffffff ffffffff     ................
	...
   36844:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3685c:	ffffffff ffffffff ffffffff ffffffff     ................
   3686c:	0000ffff 00000000 00000000 00000000     ................
	...
   36944:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3695c:	ffffffff ffffffff ffffffff ffffffff     ................
   3696c:	ffffffff ffffffff 00000000 00000000     ................
	...
   3698c:	ffffffff ffffffff ffffffff ffffffff     ................
   3699c:	ffffffff ffffffff 00000000 00000000     ................
   369ac:	00000000 ffffffff ffffffff ffffffff     ................
	...
   369c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   369e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   369f8:	ffffffff ffffffff ffffffff ffffffff     ................
   36a08:	ffffffff ffffffff ffffffff ffffffff     ................
   36a18:	ffffffff 00000000 00000000 00000000     ................
	...
   36a40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36a64:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36a7c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36a94:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36aac:	ffffffff ffffffff ffffffff ffffffff     ................
   36abc:	ffffffff ffffffff ffffffff ffffffff     ................
   36acc:	ffffffff 00000000 00000000 00000000     ................
   36adc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36bc4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36bdc:	ffffffff ffffffff ffffffff ffffffff     ................
   36bec:	ffffffff ffffffff 00000000 00000000     ................
	...
   36c0c:	ffffffff ffffffff ffffffff ffffffff     ................
   36c1c:	ffffffff ffffffff 00000000 00000000     ................
   36c2c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   36c48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36c60:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36c78:	ffffffff ffffffff ffffffff ffffffff     ................
   36c88:	ffffffff ffffffff ffffffff ffffffff     ................
   36c98:	ffffffff 00000000 00000000 00000000     ................
	...
   36cc0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36ce4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36cfc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36d14:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36d2c:	ffffffff ffffffff ffffffff ffffffff     ................
   36d3c:	ffffffff ffffffff ffffffff ffffffff     ................
   36d4c:	ffffffff 00000000 00000000 00000000     ................
   36d5c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36e44:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36e5c:	ffffffff ffffffff ffffffff ffffffff     ................
   36e6c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36e8c:	ffffffff ffffffff ffffffff ffffffff     ................
   36e9c:	ffffffff ffffffff 00000000 00000000     ................
   36eac:	00000000 ffffffff ffffffff ffffffff     ................
	...
   36ec8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36ee0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36ef8:	ffffffff ffffffff ffffffff ffffffff     ................
   36f08:	ffffffff ffffffff ffffffff ffffffff     ................
   36f18:	ffffffff 00000000 00000000 00000000     ................
	...
   36f40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36f64:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36f7c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36f94:	ffffffff ffffffff ffffffff 00000000     ................
	...
   36fac:	ffffffff ffffffff ffffffff ffffffff     ................
   36fbc:	ffffffff ffffffff ffffffff ffffffff     ................
   36fcc:	ffffffff 00000000 00000000 00000000     ................
   36fdc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   370c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   370e8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37104:	ffff0000 ffffffff ffffffff 0000ffff     ................
   37114:	00000000 ffffffff ffffffff ffffffff     ................
	...
   37130:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37148:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37160:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37178:	ffffffff ffffffff ffffffff 00000000     ................
	...
   371c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   371e4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   371fc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37214:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3722c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3725c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37344:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37368:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37384:	ffff0000 ffffffff ffffffff 0000ffff     ................
   37394:	00000000 ffffffff ffffffff ffffffff     ................
	...
   373b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   373c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   373e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   373f8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37440:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37464:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3747c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37494:	ffffffff ffffffff ffffffff 00000000     ................
	...
   374ac:	ffffffff ffffffff ffffffff 00000000     ................
	...
   374dc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   375c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   375e8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37604:	ffff0000 ffffffff ffffffff 0000ffff     ................
   37614:	00000000 ffffffff ffffffff ffffffff     ................
	...
   37630:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37648:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37660:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37678:	ffffffff ffffffff ffffffff 00000000     ................
	...
   376c0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   376e4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   376fc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37714:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3772c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3775c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37844:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37868:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37880:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37898:	ffffffff ffffffff ffffffff 00000000     ................
	...
   378b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   378c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   378e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   378f8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37940:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37964:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37980:	ffff0000 ffffffff ffffffff ffffffff     ................
   37990:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   379ac:	ffffffff ffffffff ffffffff 00000000     ................
	...
   379dc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37ac4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37ae8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37b00:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37b18:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37b30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37b48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37b60:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37b78:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37bc0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37be4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37c00:	ffff0000 ffffffff ffffffff ffffffff     ................
   37c10:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   37c2c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37c5c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37d44:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37d68:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37d80:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37d98:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37db0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37dc8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37de0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37df8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37e40:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37e64:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37e80:	ffff0000 ffffffff ffffffff ffffffff     ................
   37e90:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   37eac:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37edc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   37fc8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   37fe8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38000:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38018:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38030:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38048:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38060:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38078:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38090:	ffffffff ffffffff ffffffff 00000000     ................
	...
   380c4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   380dc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   38108:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3812c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38144:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3815c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38248:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   38268:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38280:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38298:	ffffffff ffffffff ffffffff 00000000     ................
	...
   382b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   382c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   382e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   382f8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38310:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38344:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   3835c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   38388:	ffffffff ffffffff ffffffff 00000000     ................
	...
   383ac:	ffffffff ffffffff ffffffff 00000000     ................
	...
   383c4:	ffffffff ffffffff ffffffff 00000000     ................
	...
   383dc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   384c8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   384e8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38500:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38518:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38530:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38548:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38560:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38578:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38590:	ffffffff ffffffff ffffffff 00000000     ................
	...
   385c4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   385dc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   38608:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3862c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38644:	ffffffff ffffffff ffffffff 00000000     ................
	...
   3865c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38750:	ffffffff ffffffff ffffffff ffffffff     ................
   38760:	ffffffff ffffffff 00000000 ffff0000     ................
   38770:	ffffffff 00000000 00000000 00000000     ................
   38780:	00000000 ffff0000 ffffffff ffffffff     ................
   38790:	ffffffff ffffffff ffffffff ffffffff     ................
   387a0:	ffffffff 00000000 00000000 00000000     ................
   387b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   387c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   387e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   387fc:	ffff0000 ffffffff ffffffff ffffffff     ................
   3880c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   3884c:	ffffffff ffffffff ffffffff ffffffff     ................
   3885c:	ffffffff ffffffff 00000000 00000000     ................
	...
   38888:	ffffffff ffffffff ffffffff 00000000     ................
	...
   388b0:	ffff0000 ffffffff ffffffff ffffffff     ................
   388c0:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   388dc:	ffffffff ffffffff ffffffff 00000000     ................
	...
   389d0:	ffffffff ffffffff ffffffff ffffffff     ................
   389e0:	ffffffff ffffffff 00000000 ffff0000     ................
   389f0:	ffffffff 00000000 00000000 00000000     ................
   38a00:	00000000 ffff0000 ffffffff ffffffff     ................
   38a10:	ffffffff ffffffff ffffffff ffffffff     ................
   38a20:	ffffffff 00000000 00000000 00000000     ................
   38a30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38a48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38a60:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38a7c:	ffff0000 ffffffff ffffffff ffffffff     ................
   38a8c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   38acc:	ffffffff ffffffff ffffffff ffffffff     ................
   38adc:	ffffffff ffffffff 00000000 00000000     ................
	...
   38b08:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38b30:	ffff0000 ffffffff ffffffff ffffffff     ................
   38b40:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   38b5c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38c50:	ffffffff ffffffff ffffffff ffffffff     ................
   38c60:	ffffffff ffffffff 00000000 ffff0000     ................
   38c70:	ffffffff 00000000 00000000 00000000     ................
   38c80:	00000000 ffff0000 ffffffff ffffffff     ................
   38c90:	ffffffff ffffffff ffffffff ffffffff     ................
   38ca0:	ffffffff 00000000 00000000 00000000     ................
   38cb0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38cc8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38ce0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38cfc:	ffff0000 ffffffff ffffffff ffffffff     ................
   38d0c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   38d4c:	ffffffff ffffffff ffffffff ffffffff     ................
   38d5c:	ffffffff ffffffff 00000000 00000000     ................
	...
   38d88:	ffffffff ffffffff ffffffff 00000000     ................
	...
   38db0:	ffff0000 ffffffff ffffffff ffffffff     ................
   38dc0:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   38ddc:	ffffffff ffffffff ffffffff 00000000     ................
	...

0004c95c <_global_impure_ptr>:
   4c95c:	0004c9d0 00000043                       ....C...

0004c964 <_init>:
   4c964:	e1a0c00d 	mov	r12, sp
   4c968:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
   4c96c:	e24cb004 	sub	r11, r12, #4
   4c970:	e24bd028 	sub	sp, r11, #40	; 0x28
   4c974:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
   4c978:	e12fff1e 	bx	lr

0004c97c <__init_array_start>:
   4c97c:	000014e8 	.word	0x000014e8

0004c980 <__frame_dummy_init_array_entry>:
   4c980:	00000208                                ....

0004c984 <__libc_fini>:
   4c984:	e1a0c00d 	mov	r12, sp
   4c988:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
   4c98c:	e24cb004 	sub	r11, r12, #4
   4c990:	e24bd028 	sub	sp, r11, #40	; 0x28
   4c994:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
   4c998:	e12fff1e 	bx	lr

0004c99c <__fini_array_start>:
   4c99c:	000001c4 	.word	0x000001c4

0004c9a0 <__cs3_regions>:
   4c9a0:	00000000 	.word	0x00000000
   4c9a4:	00000040 	.word	0x00000040
   4c9a8:	00000040 	.word	0x00000040
   4c9ac:	0004cdc0 	.word	0x0004cdc0
   4c9b0:	000001b8 	.word	0x000001b8

0004c9b4 <__cs3_regions_end>:
   4c9b4:	00000000 	.word	0x00000000


C:/ECE243/project/flappy_bird_project/project/project.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	4c 0e 00 00 50 0e 00 00 54 0e 00 00 58 0e 00 00     L...P...T...X...
  30:	5c 0e 00 00 a4 15 00 00 48 0f 00 00 60 0e 00 00     \.......H...`...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000519 	bl	1540 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0004c9a4 	.word	0x0004c9a4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_region_zero_size_ram>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_region_zero_size_ram+0x4>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_region_zero_size_ram+0x8>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	0004cde8 	.word	0x0004cde8

00000124 <__cs3_heap_start_ptr>:
     124:	0004cf08 	.word	0x0004cf08

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	0004cdf0 	.word	0x0004cdf0
     170:	0004cdf3 	.word	0x0004cdf3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	0004cdf0 	.word	0x0004cdf0
     1bc:	0004cdf0 	.word	0x0004cdf0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	0004cdf0 	.word	0x0004cdf0
     200:	00000000 	.word	0x00000000
     204:	00001630 	.word	0x00001630

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001630 	.word	0x00001630
     250:	0004cdf4 	.word	0x0004cdf4
     254:	0004c9a8 	.word	0x0004c9a8
     258:	00000000 	.word	0x00000000

0000025c <checkKeyPress>:
}

void checkKeyPress()
{

    if (*PUSHBUTTONS == 0b0001 || *PUSHBUTTONS == 0b1101)
     25c:	e3a03000 	mov	r3, #0
     260:	e34f3f20 	movt	r3, #65312	; 0xff20
     264:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     268:	e3530001 	cmp	r3, #1
     26c:	0a000004 	beq	284 <checkKeyPress+0x28>
     270:	e3a03000 	mov	r3, #0
     274:	e34f3f20 	movt	r3, #65312	; 0xff20
     278:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     27c:	e353000d 	cmp	r3, #13
     280:	1a000006 	bne	2a0 <checkKeyPress+0x44>
    {
        Ship1dy = 0;
     284:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     288:	e3403004 	movt	r3, #4
     28c:	e3a02000 	mov	r2, #0
     290:	e5832000 	str	r2, [r3]
        Ship2dy = 1;
     294:	e3a02001 	mov	r2, #1
     298:	e5832004 	str	r2, [r3, #4]
     29c:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0010 || *PUSHBUTTONS == 0b1110)
     2a0:	e3a03000 	mov	r3, #0
     2a4:	e34f3f20 	movt	r3, #65312	; 0xff20
     2a8:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     2ac:	e3530002 	cmp	r3, #2
     2b0:	0a000004 	beq	2c8 <checkKeyPress+0x6c>
     2b4:	e3a03000 	mov	r3, #0
     2b8:	e34f3f20 	movt	r3, #65312	; 0xff20
     2bc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     2c0:	e353000e 	cmp	r3, #14
     2c4:	1a000006 	bne	2e4 <checkKeyPress+0x88>
    {
        Ship1dy = 0;
     2c8:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     2cc:	e3403004 	movt	r3, #4
     2d0:	e3a02000 	mov	r2, #0
     2d4:	e5832000 	str	r2, [r3]
        Ship2dy = -1;
     2d8:	e3e02000 	mvn	r2, #0
     2dc:	e5832004 	str	r2, [r3, #4]
     2e0:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0100 || *PUSHBUTTONS == 0b0111)
     2e4:	e3a03000 	mov	r3, #0
     2e8:	e34f3f20 	movt	r3, #65312	; 0xff20
     2ec:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     2f0:	e3530004 	cmp	r3, #4
     2f4:	0a000004 	beq	30c <checkKeyPress+0xb0>
     2f8:	e3a03000 	mov	r3, #0
     2fc:	e34f3f20 	movt	r3, #65312	; 0xff20
     300:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     304:	e3530007 	cmp	r3, #7
     308:	1a000006 	bne	328 <checkKeyPress+0xcc>
    {
        Ship2dy = 0;
     30c:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     310:	e3403004 	movt	r3, #4
     314:	e3a02000 	mov	r2, #0
     318:	e5832004 	str	r2, [r3, #4]
        Ship1dy = 1;
     31c:	e3a02001 	mov	r2, #1
     320:	e5832000 	str	r2, [r3]
     324:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b1000 || *PUSHBUTTONS == 0b1011)
     328:	e3a03000 	mov	r3, #0
     32c:	e34f3f20 	movt	r3, #65312	; 0xff20
     330:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     334:	e3530008 	cmp	r3, #8
     338:	0a000004 	beq	350 <checkKeyPress+0xf4>
     33c:	e3a03000 	mov	r3, #0
     340:	e34f3f20 	movt	r3, #65312	; 0xff20
     344:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     348:	e353000b 	cmp	r3, #11
     34c:	1a000006 	bne	36c <checkKeyPress+0x110>
    {
        Ship2dy = 0;
     350:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     354:	e3403004 	movt	r3, #4
     358:	e3a02000 	mov	r2, #0
     35c:	e5832004 	str	r2, [r3, #4]
        Ship1dy = -1;
     360:	e3e02000 	mvn	r2, #0
     364:	e5832000 	str	r2, [r3]
     368:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b1001)
     36c:	e3a03000 	mov	r3, #0
     370:	e34f3f20 	movt	r3, #65312	; 0xff20
     374:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     378:	e3530009 	cmp	r3, #9
     37c:	1a000006 	bne	39c <checkKeyPress+0x140>
    {
        Ship2dy = 1;
     380:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     384:	e3403004 	movt	r3, #4
     388:	e3a02001 	mov	r2, #1
     38c:	e5832004 	str	r2, [r3, #4]
        Ship1dy = -1;
     390:	e3e02000 	mvn	r2, #0
     394:	e5832000 	str	r2, [r3]
     398:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0110)
     39c:	e3a03000 	mov	r3, #0
     3a0:	e34f3f20 	movt	r3, #65312	; 0xff20
     3a4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     3a8:	e3530006 	cmp	r3, #6
     3ac:	1a000006 	bne	3cc <checkKeyPress+0x170>
    {
        Ship1dy = 1;
     3b0:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     3b4:	e3403004 	movt	r3, #4
     3b8:	e3a02001 	mov	r2, #1
     3bc:	e5832000 	str	r2, [r3]
        Ship2dy = -1;
     3c0:	e3e02000 	mvn	r2, #0
     3c4:	e5832004 	str	r2, [r3, #4]
     3c8:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b0101)
     3cc:	e3a03000 	mov	r3, #0
     3d0:	e34f3f20 	movt	r3, #65312	; 0xff20
     3d4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     3d8:	e3530005 	cmp	r3, #5
     3dc:	1a000005 	bne	3f8 <checkKeyPress+0x19c>
    {
        Ship1dy = 1;
     3e0:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     3e4:	e3403004 	movt	r3, #4
     3e8:	e3a02001 	mov	r2, #1
     3ec:	e5832000 	str	r2, [r3]
        Ship2dy = 1;
     3f0:	e5832004 	str	r2, [r3, #4]
     3f4:	e12fff1e 	bx	lr
    }
    else if (*PUSHBUTTONS == 0b1010)
     3f8:	e3a03000 	mov	r3, #0
     3fc:	e34f3f20 	movt	r3, #65312	; 0xff20
     400:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     404:	e353000a 	cmp	r3, #10
    {
        Ship1dy = -1;
     408:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     40c:	e3403004 	movt	r3, #4
     410:	03e02000 	mvneq	r2, #0
        Ship2dy = -1;
    }
    else
    {
        Ship1dy = 0;
     414:	13a02000 	movne	r2, #0
     418:	e5832000 	str	r2, [r3]
        Ship2dy = 0;
     41c:	e5832004 	str	r2, [r3, #4]
     420:	e12fff1e 	bx	lr

00000424 <initialize>:
        }
    }
}

void initialize()
{
     424:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     428:	e59f410c 	ldr	r4, [pc, #268]	; 53c <initialize+0x118>
     42c:	e3a05000 	mov	r5, #0
    // initialize location and direction of rectangles(not shown)
    for (int i = 0; i < numAsteroids; i++)
    {
        // initialize direction
        Asteroids[i].dx = 3 * (((rand() % 2) * 2) - 1); // 1 or -1
        Asteroids[i].dy = 0;
     430:	e1a09005 	mov	r9, r5

        // initialize x and y positions
        Asteroids[i].x = rand() % 319;
     434:	e30479d5 	movw	r7, #18901	; 0x49d5
     438:	e343735c 	movt	r7, #13148	; 0x335c
        Asteroids[i].y = rand() % 239;
     43c:	e30c673b 	movw	r6, #51003	; 0xc73b
     440:	e348691a 	movt	r6, #35098	; 0x891a
        ONCHIP[i].x = Asteroids[i].x;
     444:	e30c8e0c 	movw	r8, #52748	; 0xce0c
     448:	e3408004 	movt	r8, #4
     44c:	e288a058 	add	r10, r8, #88	; 0x58
        ONCHIP[i].y = Asteroids[i].y;
        SDRAM[i].x = Asteroids[i].x;
     450:	e2888080 	add	r8, r8, #128	; 0x80
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
    for (int i = 0; i < numAsteroids; i++)
    {
        // initialize direction
        Asteroids[i].dx = 3 * (((rand() % 2) * 2) - 1); // 1 or -1
     454:	eb00036c 	bl	120c <rand>
     458:	e0803fa0 	add	r3, r0, r0, lsr #31
     45c:	e2033001 	and	r3, r3, #1
     460:	e0430fa0 	sub	r0, r3, r0, lsr #31
     464:	e0800080 	add	r0, r0, r0, lsl #1
     468:	e1a00080 	lsl	r0, r0, #1
     46c:	e2400003 	sub	r0, r0, #3
     470:	e5840000 	str	r0, [r4]
        Asteroids[i].dy = 0;
     474:	e5849004 	str	r9, [r4, #4]

        // initialize x and y positions
        Asteroids[i].x = rand() % 319;
     478:	eb000363 	bl	120c <rand>
     47c:	e0c23097 	smull	r3, r2, r7, r0
     480:	e1a03fc0 	asr	r3, r0, #31
     484:	e0633342 	rsb	r3, r3, r2, asr #6
     488:	e0832103 	add	r2, r3, r3, lsl #2
     48c:	e0633302 	rsb	r3, r3, r2, lsl #6
     490:	e0630000 	rsb	r0, r3, r0
     494:	e5040008 	str	r0, [r4, #-8]
        Asteroids[i].y = rand() % 239;
     498:	eb00035b 	bl	120c <rand>
     49c:	e0c32096 	smull	r2, r3, r6, r0
     4a0:	e0833000 	add	r3, r3, r0
     4a4:	e1a02fc0 	asr	r2, r0, #31
     4a8:	e06233c3 	rsb	r3, r2, r3, asr #7
     4ac:	e0632203 	rsb	r2, r3, r3, lsl #4
     4b0:	e0633202 	rsb	r3, r3, r2, lsl #4
     4b4:	e0633000 	rsb	r3, r3, r0
     4b8:	e5043004 	str	r3, [r4, #-4]
        ONCHIP[i].x = Asteroids[i].x;
     4bc:	e5141008 	ldr	r1, [r4, #-8]
     4c0:	e1a0200a 	mov	r2, r10
     4c4:	e7a21005 	str	r1, [r2, r5]!
        ONCHIP[i].y = Asteroids[i].y;
     4c8:	e5823004 	str	r3, [r2, #4]
        SDRAM[i].x = Asteroids[i].x;
     4cc:	e1a02008 	mov	r2, r8
     4d0:	e7a21005 	str	r1, [r2, r5]!
        SDRAM[i].y = Asteroids[i].y;
     4d4:	e5823004 	str	r3, [r2, #4]
     4d8:	e2844010 	add	r4, r4, #16
     4dc:	e2855008 	add	r5, r5, #8
void initialize()
{
    // initialize
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
    for (int i = 0; i < numAsteroids; i++)
     4e0:	e3550028 	cmp	r5, #40	; 0x28
     4e4:	1affffda 	bne	454 <initialize+0x30>
        ONCHIP[i].y = Asteroids[i].y;
        SDRAM[i].x = Asteroids[i].x;
        SDRAM[i].y = Asteroids[i].y;
    }

    Ship1.x = 319 / 4 - shipWidth / 2;
     4e8:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     4ec:	e3403004 	movt	r3, #4
     4f0:	e3a0104a 	mov	r1, #74	; 0x4a
     4f4:	e58310a8 	str	r1, [r3, #168]	; 0xa8
    Ship1.y = 239 - shipLength - 1;
     4f8:	e3a020d9 	mov	r2, #217	; 0xd9
     4fc:	e58320ac 	str	r2, [r3, #172]	; 0xac
    Ship1dy = 0; // initialize ship1dy
     500:	e3a00000 	mov	r0, #0
     504:	e5830000 	str	r0, [r3]

    Ship1SDRAM.x = 319 / 4 - shipWidth / 2;
     508:	e58310b8 	str	r1, [r3, #184]	; 0xb8
    Ship1SDRAM.y = 239 - shipLength - 1;
     50c:	e58320bc 	str	r2, [r3, #188]	; 0xbc

    Ship1ONCHIP.x = 319 / 4 - shipWidth / 2;
     510:	e58310c0 	str	r1, [r3, #192]	; 0xc0
    Ship1ONCHIP.y = 239 - shipLength - 1;
     514:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    Ship2.x = 319 * 3 / 4 - shipWidth / 2;
     518:	e3a010ea 	mov	r1, #234	; 0xea
     51c:	e58310c8 	str	r1, [r3, #200]	; 0xc8
    Ship2.y = 239 - shipLength - 1;
     520:	e58320cc 	str	r2, [r3, #204]	; 0xcc
    Ship2dy = 0; // initialize ship1dy
     524:	e5830004 	str	r0, [r3, #4]

    Ship2SDRAM.x = 319 * 3 / 4 - shipWidth / 2;
     528:	e58310d8 	str	r1, [r3, #216]	; 0xd8
    Ship2SDRAM.y = 239 - shipLength - 1;
     52c:	e58320dc 	str	r2, [r3, #220]	; 0xdc

    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
     530:	e58310e0 	str	r1, [r3, #224]	; 0xe0
    Ship2ONCHIP.y = 239 - shipLength - 1;
     534:	e58320e4 	str	r2, [r3, #228]	; 0xe4
     538:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
     53c:	0004ce1c 	.word	0x0004ce1c

00000540 <update>:
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
{
     540:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     544:	e24dd00c 	sub	sp, sp, #12
     548:	e59f62bc 	ldr	r6, [pc, #700]	; 80c <update+0x2cc>
     54c:	e2864008 	add	r4, r6, #8
     550:	e3a07000 	mov	r7, #0
    for (int i = 0; i < numAsteroids; i++)
    {
        // save the position to erase
        if (pixel_buffer_start == 0xC0000000)
     554:	e30c8e0c 	movw	r8, #52748	; 0xce0c
     558:	e3408004 	movt	r8, #4
            SDRAM[i].x = Asteroids[i].x;
            SDRAM[i].y = Asteroids[i].y;
        }
        else if (pixel_buffer_start == 0xC8000000)
        {
            ONCHIP[i].x = Asteroids[i].x;
     55c:	e2882058 	add	r2, r8, #88	; 0x58
     560:	e58d2004 	str	r2, [sp, #4]
    for (int i = 0; i < numAsteroids; i++)
    {
        // save the position to erase
        if (pixel_buffer_start == 0xC0000000)
        {
            SDRAM[i].x = Asteroids[i].x;
     564:	e288b080 	add	r11, r8, #128	; 0x80
            ONCHIP[i].x = Asteroids[i].x;
            ONCHIP[i].y = Asteroids[i].y;
        }

        // if reached right side or left side, reverse direction
        if ((Asteroids[i].x) >= 319 || Asteroids[i].x <= 0)
     568:	e300a13d 	movw	r10, #317	; 0x13d
        {
            Asteroids[i].dx *= -1;
            Asteroids[i].y = rand() % 239;
     56c:	e30c973b 	movw	r9, #51003	; 0xc73b
     570:	e348991a 	movt	r9, #35098	; 0x891a
void update()
{
    for (int i = 0; i < numAsteroids; i++)
    {
        // save the position to erase
        if (pixel_buffer_start == 0xC0000000)
     574:	e59830e8 	ldr	r3, [r8, #232]	; 0xe8
     578:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
     57c:	1a000005 	bne	598 <update+0x58>
        {
            SDRAM[i].x = Asteroids[i].x;
     580:	e5142008 	ldr	r2, [r4, #-8]
     584:	e1a0300b 	mov	r3, r11
     588:	e7a32007 	str	r2, [r3, r7]!
            SDRAM[i].y = Asteroids[i].y;
     58c:	e5142004 	ldr	r2, [r4, #-4]
     590:	e5832004 	str	r2, [r3, #4]
     594:	ea000006 	b	5b4 <update+0x74>
        }
        else if (pixel_buffer_start == 0xC8000000)
     598:	e59830e8 	ldr	r3, [r8, #232]	; 0xe8
     59c:	e3530332 	cmp	r3, #-939524096	; 0xc8000000
        {
            ONCHIP[i].x = Asteroids[i].x;
     5a0:	05142008 	ldreq	r2, [r4, #-8]
     5a4:	059d3004 	ldreq	r3, [sp, #4]
     5a8:	07a32007 	streq	r2, [r3, r7]!
            ONCHIP[i].y = Asteroids[i].y;
     5ac:	05142004 	ldreq	r2, [r4, #-4]
     5b0:	05832004 	streq	r2, [r3, #4]
    draw_line(x + width, y, x + width, y + length, line_color);
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
     5b4:	e1a05004 	mov	r5, r4
            ONCHIP[i].x = Asteroids[i].x;
            ONCHIP[i].y = Asteroids[i].y;
        }

        // if reached right side or left side, reverse direction
        if ((Asteroids[i].x) >= 319 || Asteroids[i].x <= 0)
     5b8:	e5143008 	ldr	r3, [r4, #-8]
     5bc:	e2433001 	sub	r3, r3, #1
     5c0:	e153000a 	cmp	r3, r10
     5c4:	9a00000b 	bls	5f8 <update+0xb8>
        {
            Asteroids[i].dx *= -1;
     5c8:	e5963008 	ldr	r3, [r6, #8]
     5cc:	e2633000 	rsb	r3, r3, #0
     5d0:	e5863008 	str	r3, [r6, #8]
            Asteroids[i].y = rand() % 239;
     5d4:	eb00030c 	bl	120c <rand>
     5d8:	e0c32099 	smull	r2, r3, r9, r0
     5dc:	e0833000 	add	r3, r3, r0
     5e0:	e1a02fc0 	asr	r2, r0, #31
     5e4:	e06233c3 	rsb	r3, r2, r3, asr #7
     5e8:	e0632203 	rsb	r2, r3, r3, lsl #4
     5ec:	e0633202 	rsb	r3, r3, r2, lsl #4
     5f0:	e0630000 	rsb	r0, r3, r0
     5f4:	e5040004 	str	r0, [r4, #-4]
        }

        // actually move
        Asteroids[i].x = Asteroids[i].x + Asteroids[i].dx;
     5f8:	e5152008 	ldr	r2, [r5, #-8]
     5fc:	e5963008 	ldr	r3, [r6, #8]
     600:	e0823003 	add	r3, r2, r3
     604:	e5053008 	str	r3, [r5, #-8]
        Asteroids[i].y = Asteroids[i].y + Asteroids[i].dy;
     608:	e5152004 	ldr	r2, [r5, #-4]
     60c:	e596300c 	ldr	r3, [r6, #12]
     610:	e0823003 	add	r3, r2, r3
     614:	e5053004 	str	r3, [r5, #-4]
     618:	e2866010 	add	r6, r6, #16
     61c:	e2844010 	add	r4, r4, #16
     620:	e2877008 	add	r7, r7, #8
}

// update movement of boxes
void update()
{
    for (int i = 0; i < numAsteroids; i++)
     624:	e3570028 	cmp	r7, #40	; 0x28
     628:	1affffd1 	bne	574 <update+0x34>
        // actually move
        Asteroids[i].x = Asteroids[i].x + Asteroids[i].dx;
        Asteroids[i].y = Asteroids[i].y + Asteroids[i].dy;
    }
    // update ship
    if (pixel_buffer_start == 0xC0000000)
     62c:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     630:	e3403004 	movt	r3, #4
     634:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     638:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
     63c:	1a00000a 	bne	66c <update+0x12c>
    {
        Ship1SDRAM.x = Ship1.x;
     640:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     644:	e3403004 	movt	r3, #4
     648:	e59320a8 	ldr	r2, [r3, #168]	; 0xa8
     64c:	e58320b8 	str	r2, [r3, #184]	; 0xb8
        Ship1SDRAM.y = Ship1.y;
     650:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
     654:	e58320bc 	str	r2, [r3, #188]	; 0xbc
        Ship2SDRAM.x = Ship2.x;
     658:	e59320c8 	ldr	r2, [r3, #200]	; 0xc8
     65c:	e58320d8 	str	r2, [r3, #216]	; 0xd8
        Ship2SDRAM.y = Ship2.y;
     660:	e59320cc 	ldr	r2, [r3, #204]	; 0xcc
     664:	e58320dc 	str	r2, [r3, #220]	; 0xdc
     668:	ea00000e 	b	6a8 <update+0x168>
    }
    else if (pixel_buffer_start == 0xC8000000)
     66c:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     670:	e3403004 	movt	r3, #4
     674:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     678:	e3530332 	cmp	r3, #-939524096	; 0xc8000000
     67c:	1a000009 	bne	6a8 <update+0x168>
    {
        Ship1ONCHIP.x = Ship1.x;
     680:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     684:	e3403004 	movt	r3, #4
     688:	e59320a8 	ldr	r2, [r3, #168]	; 0xa8
     68c:	e58320c0 	str	r2, [r3, #192]	; 0xc0
        Ship1ONCHIP.y = Ship1.y;
     690:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
     694:	e58320c4 	str	r2, [r3, #196]	; 0xc4
        Ship2ONCHIP.x = Ship2.x;
     698:	e59320c8 	ldr	r2, [r3, #200]	; 0xc8
     69c:	e58320e0 	str	r2, [r3, #224]	; 0xe0
        Ship2ONCHIP.y = Ship2.y;
     6a0:	e59320cc 	ldr	r2, [r3, #204]	; 0xcc
     6a4:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    }

    if (Ship1.y <= 0 || Ship1.y + shipLength >= 239)
     6a8:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     6ac:	e3403004 	movt	r3, #4
     6b0:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
     6b4:	e3530000 	cmp	r3, #0
     6b8:	da000002 	ble	6c8 <update+0x188>
     6bc:	e2832015 	add	r2, r3, #21
     6c0:	e35200ee 	cmp	r2, #238	; 0xee
     6c4:	da000009 	ble	6f0 <update+0x1b0>
    {
    	if (Ship1.y <=1){
     6c8:	e3530001 	cmp	r3, #1
        	score++;
     6cc:	d30c3e0c 	movwle	r3, #52748	; 0xce0c
     6d0:	d3403004 	movtle	r3, #4
     6d4:	d59320ec 	ldrle	r2, [r3, #236]	; 0xec
     6d8:	d2822001 	addle	r2, r2, #1
     6dc:	d58320ec 	strle	r2, [r3, #236]	; 0xec
        }
        Ship1.y = 239 - shipLength - 1;
     6e0:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     6e4:	e3403004 	movt	r3, #4
     6e8:	e3a020d9 	mov	r2, #217	; 0xd9
     6ec:	e58320ac 	str	r2, [r3, #172]	; 0xac
    }
    if (Ship2.y <= 0 || Ship2.y + shipLength >= 239)
     6f0:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     6f4:	e3403004 	movt	r3, #4
     6f8:	e59330cc 	ldr	r3, [r3, #204]	; 0xcc
     6fc:	e3530000 	cmp	r3, #0
     700:	da000002 	ble	710 <update+0x1d0>
     704:	e2832015 	add	r2, r3, #21
     708:	e35200ee 	cmp	r2, #238	; 0xee
     70c:	da000030 	ble	7d4 <update+0x294>
    {
    	if (Ship2.y <= 1){
     710:	e3530001 	cmp	r3, #1
        	score2++;
     714:	d30c3e0c 	movwle	r3, #52748	; 0xce0c
     718:	d3403004 	movtle	r3, #4
     71c:	d59320f0 	ldrle	r2, [r3, #240]	; 0xf0
     720:	d2822001 	addle	r2, r2, #1
     724:	d58320f0 	strle	r2, [r3, #240]	; 0xf0
        }
        Ship2.y = 239 - shipLength - 1;
     728:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     72c:	e3403004 	movt	r3, #4
     730:	e3a020d9 	mov	r2, #217	; 0xd9
     734:	e58320cc 	str	r2, [r3, #204]	; 0xcc
     738:	ea000025 	b	7d4 <update+0x294>
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     73c:	e2812008 	add	r2, r1, #8
     740:	e7932002 	ldr	r2, [r3, r2]
     744:	e1520005 	cmp	r2, r5
     748:	ca000008 	bgt	770 <update+0x230>
     74c:	e1520007 	cmp	r2, r7
     750:	ba000006 	blt	770 <update+0x230>
    draw_line(x + width, y, x + width, y + length, line_color);
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
     754:	e0818003 	add	r8, r1, r3
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     758:	e598800c 	ldr	r8, [r8, #12]
     75c:	e28ca015 	add	r10, r12, #21
     760:	e158000a 	cmp	r8, r10
     764:	ca000001 	bgt	770 <update+0x230>
        {
            Ship1.y = 239 - shipLength - 1;
     768:	e158000c 	cmp	r8, r12
     76c:	a3a0c0d9 	movge	r12, #217	; 0xd9
        }

        if ((Asteroids[i].x <= Ship2.x + shipWidth) && (Asteroids[i].x >= Ship2.x) && (Asteroids[i].y <= Ship2.y + shipLength) && (Asteroids[i].y >= Ship2.y))
     770:	e1520004 	cmp	r2, r4
     774:	ca000008 	bgt	79c <update+0x25c>
     778:	e1520006 	cmp	r2, r6
     77c:	ba000006 	blt	79c <update+0x25c>
    draw_line(x + width, y, x + width, y + length, line_color);
    draw_line(x, y + length, x + width, y + length, line_color);
}

// update movement of boxes
void update()
     780:	e0812003 	add	r2, r1, r3
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
        {
            Ship1.y = 239 - shipLength - 1;
        }

        if ((Asteroids[i].x <= Ship2.x + shipWidth) && (Asteroids[i].x >= Ship2.x) && (Asteroids[i].y <= Ship2.y + shipLength) && (Asteroids[i].y >= Ship2.y))
     784:	e592200c 	ldr	r2, [r2, #12]
     788:	e2808015 	add	r8, r0, #21
     78c:	e1520008 	cmp	r2, r8
     790:	ca000001 	bgt	79c <update+0x25c>
        {
            Ship2.y = 239 - shipLength - 1;
     794:	e1520000 	cmp	r2, r0
     798:	a3a000d9 	movge	r0, #217	; 0xd9
     79c:	e2833010 	add	r3, r3, #16
        	score2++;
        }
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
     7a0:	e3530050 	cmp	r3, #80	; 0x50
     7a4:	1affffe4 	bne	73c <update+0x1fc>
     7a8:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     7ac:	e3403004 	movt	r3, #4
     7b0:	e583c0ac 	str	r12, [r3, #172]	; 0xac
     7b4:	e58300cc 	str	r0, [r3, #204]	; 0xcc
            Ship2.y = 239 - shipLength - 1;
        }
    }

    // actually move the ship
    Ship1.y += Ship1dy;
     7b8:	e5932000 	ldr	r2, [r3]
     7bc:	e08cc002 	add	r12, r12, r2
     7c0:	e583c0ac 	str	r12, [r3, #172]	; 0xac
    Ship2.y += Ship2dy;
     7c4:	e5932004 	ldr	r2, [r3, #4]
     7c8:	e0800002 	add	r0, r0, r2
     7cc:	e58300cc 	str	r0, [r3, #204]	; 0xcc
     7d0:	ea00000b 	b	804 <update+0x2c4>
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     7d4:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     7d8:	e3403004 	movt	r3, #4
     7dc:	e59370a8 	ldr	r7, [r3, #168]	; 0xa8
     7e0:	e287500b 	add	r5, r7, #11
        {
            Ship1.y = 239 - shipLength - 1;
        }

        if ((Asteroids[i].x <= Ship2.x + shipWidth) && (Asteroids[i].x >= Ship2.x) && (Asteroids[i].y <= Ship2.y + shipLength) && (Asteroids[i].y >= Ship2.y))
     7e4:	e59360c8 	ldr	r6, [r3, #200]	; 0xc8
     7e8:	e286400b 	add	r4, r6, #11
     7ec:	e593c0ac 	ldr	r12, [r3, #172]	; 0xac
     7f0:	e59300cc 	ldr	r0, [r3, #204]	; 0xcc
     7f4:	e3a03000 	mov	r3, #0
        Ship2.y = 239 - shipLength - 1;
    }

    for (int i = 0; i < numAsteroids; ++i)
    {
        if ((Asteroids[i].x <= Ship1.x + shipWidth) && (Asteroids[i].x >= Ship1.x) && (Asteroids[i].y <= Ship1.y + shipLength) && (Asteroids[i].y >= Ship1.y))
     7f8:	e30c1e0c 	movw	r1, #52748	; 0xce0c
     7fc:	e3401004 	movt	r1, #4
     800:	eaffffcd 	b	73c <update+0x1fc>
    }

    // actually move the ship
    Ship1.y += Ship1dy;
    Ship2.y += Ship2dy;
}
     804:	e28dd00c 	add	sp, sp, #12
     808:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     80c:	0004ce14 	.word	0x0004ce14

00000810 <clear_screen>:

// clears screen by drawing all black
void clear_screen()
{
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
     810:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    {
        *(short int *)(i) = 0x0000;
     814:	e3a01000 	mov	r1, #0
}

// clears screen by drawing all black
void clear_screen()
{
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
     818:	e30b2e7e 	movw	r2, #48766	; 0xbe7e
     81c:	e34c2803 	movt	r2, #51203	; 0xc803
    {
        *(short int *)(i) = 0x0000;
     820:	e0c310b2 	strh	r1, [r3], #2
}

// clears screen by drawing all black
void clear_screen()
{
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
     824:	e1530002 	cmp	r3, r2
     828:	1afffffc 	bne	820 <clear_screen+0x10>
     82c:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
        *(short int *)(i) = 0x0000;
    }

    for (int i = 0xC0000000; i < 0xC003BE7E; i = i + 2)
    {
        *(short int *)(i) = 0x0000;
     830:	e3a01000 	mov	r1, #0
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
    {
        *(short int *)(i) = 0x0000;
    }

    for (int i = 0xC0000000; i < 0xC003BE7E; i = i + 2)
     834:	e30b2e7e 	movw	r2, #48766	; 0xbe7e
     838:	e34c2003 	movt	r2, #49155	; 0xc003
    {
        *(short int *)(i) = 0x0000;
     83c:	e0c310b2 	strh	r1, [r3], #2
    for (int i = 0xC8000000; i < 0xC803BE7E; i = i + 2)
    {
        *(short int *)(i) = 0x0000;
    }

    for (int i = 0xC0000000; i < 0xC003BE7E; i = i + 2)
     840:	e1530002 	cmp	r3, r2
     844:	1afffffc 	bne	83c <clear_screen+0x2c>
    {
        *(short int *)(i) = 0x0000;
    }
}
     848:	e12fff1e 	bx	lr

0000084c <plot_pixel>:

// plot pixel function (provided)
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     84c:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     850:	e3403004 	movt	r3, #4
     854:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     858:	e1a00080 	lsl	r0, r0, #1
     85c:	e0831501 	add	r1, r3, r1, lsl #10
     860:	e18120b0 	strh	r2, [r1, r0]
     864:	e12fff1e 	bx	lr

00000868 <clear_ship>:
        Ship1dy = 0;
        Ship2dy = 0;
    }
}

void clear_ship(int x, int y) {
     868:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     86c:	e1a07000 	mov	r7, r0
     870:	e1a0a001 	mov	r10, r1
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     874:	e3a08000 	mov	r8, #0
        Ship1dy = 0;
        Ship2dy = 0;
    }
}

void clear_ship(int x, int y) {
     878:	e1a05008 	mov	r5, r8
     87c:	ea000009 	b	8a8 <clear_ship+0x40>
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
             //*(pixel_buffer_start + (j<<0) + (i<<9)) = bird[i][j];
			 plot_pixel(x + j, y + i, 0x0000);	
     880:	e0840007 	add	r0, r4, r7
     884:	e1a01006 	mov	r1, r6
     888:	e1a02005 	mov	r2, r5
     88c:	ebffffee 	bl	84c <plot_pixel>

void clear_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
     890:	e2844001 	add	r4, r4, #1
     894:	e3540012 	cmp	r4, #18
     898:	1afffff8 	bne	880 <clear_ship+0x18>
}

void clear_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     89c:	e2888001 	add	r8, r8, #1
     8a0:	e3580016 	cmp	r8, #22
     8a4:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, r10, pc}
        Ship1dy = 0;
        Ship2dy = 0;
    }
}

void clear_ship(int x, int y) {
     8a8:	e1a04005 	mov	r4, r5
     8ac:	e088600a 	add	r6, r8, r10
     8b0:	eafffff2 	b	880 <clear_ship+0x18>

000008b4 <clear>:
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
{
     8b4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
     8b8:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     8bc:	e3403004 	movt	r3, #4
     8c0:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     8c4:	e3530103 	cmp	r3, #-1073741824	; 0xc0000000
     8c8:	1a000023 	bne	95c <clear+0xa8>
     8cc:	e3a04000 	mov	r4, #0
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     8d0:	e59f5128 	ldr	r5, [pc, #296]	; a00 <clear+0x14c>
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(SDRAM[i].x, SDRAM[i].y, 0x0000);
     8d4:	e1a07004 	mov	r7, r4
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     8d8:	e0856004 	add	r6, r5, r4
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(SDRAM[i].x, SDRAM[i].y, 0x0000);
     8dc:	e7950004 	ldr	r0, [r5, r4]
     8e0:	e5961004 	ldr	r1, [r6, #4]
     8e4:	e1a02007 	mov	r2, r7
     8e8:	ebffffd7 	bl	84c <plot_pixel>
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y, 0x0000);
     8ec:	e7940005 	ldr	r0, [r4, r5]
     8f0:	e2800001 	add	r0, r0, #1
     8f4:	e5961004 	ldr	r1, [r6, #4]
     8f8:	e1a02007 	mov	r2, r7
     8fc:	ebffffd2 	bl	84c <plot_pixel>
            plot_pixel(SDRAM[i].x, SDRAM[i].y + 1, 0x0000);
     900:	e5961004 	ldr	r1, [r6, #4]
     904:	e7950004 	ldr	r0, [r5, r4]
     908:	e2811001 	add	r1, r1, #1
     90c:	e1a02007 	mov	r2, r7
     910:	ebffffcd 	bl	84c <plot_pixel>
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y + 1, 0x0000);
     914:	e7940005 	ldr	r0, [r4, r5]
     918:	e5961004 	ldr	r1, [r6, #4]
     91c:	e2800001 	add	r0, r0, #1
     920:	e2811001 	add	r1, r1, #1
     924:	e1a02007 	mov	r2, r7
     928:	ebffffc7 	bl	84c <plot_pixel>
     92c:	e2844008 	add	r4, r4, #8
void clear()
{
    // if start buffer is SDRAM
    if (pixel_buffer_start == 0xC0000000)
    {
        for (int i = 0; i < numAsteroids; i++)
     930:	e3540028 	cmp	r4, #40	; 0x28
     934:	1affffe7 	bne	8d8 <clear+0x24>
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y, 0x0000);
            plot_pixel(SDRAM[i].x, SDRAM[i].y + 1, 0x0000);
            plot_pixel(SDRAM[i].x + 1, SDRAM[i].y + 1, 0x0000);
        }

        clear_ship(Ship1SDRAM.x, Ship1SDRAM.y);
     938:	e30c4e0c 	movw	r4, #52748	; 0xce0c
     93c:	e3404004 	movt	r4, #4
     940:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
     944:	e59410bc 	ldr	r1, [r4, #188]	; 0xbc
     948:	ebffffc6 	bl	868 <clear_ship>
        clear_ship(Ship2SDRAM.x, Ship2SDRAM.y);
     94c:	e59400d8 	ldr	r0, [r4, #216]	; 0xd8
     950:	e59410dc 	ldr	r1, [r4, #220]	; 0xdc
     954:	ebffffc3 	bl	868 <clear_ship>
     958:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    }
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
     95c:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     960:	e3403004 	movt	r3, #4
     964:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
     968:	e3530332 	cmp	r3, #-939524096	; 0xc8000000
     96c:	18bd80f8 	popne	{r3, r4, r5, r6, r7, pc}
     970:	e3a04000 	mov	r4, #0
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     974:	e59f5088 	ldr	r5, [pc, #136]	; a04 <clear+0x150>
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y, 0x0000);
     978:	e1a07004 	mov	r7, r4
    Ship2ONCHIP.x = 319 * 3 / 4 - shipWidth / 2;
    Ship2ONCHIP.y = 239 - shipLength - 1;
}

// override the previous lines with black, depending on which was the previous buffer
void clear()
     97c:	e0856004 	add	r6, r5, r4
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
    {
        for (int i = 0; i < numAsteroids; i++)
        {
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y, 0x0000);
     980:	e7950004 	ldr	r0, [r5, r4]
     984:	e5961004 	ldr	r1, [r6, #4]
     988:	e1a02007 	mov	r2, r7
     98c:	ebffffae 	bl	84c <plot_pixel>
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y, 0x0000);
     990:	e7940005 	ldr	r0, [r4, r5]
     994:	e2800001 	add	r0, r0, #1
     998:	e5961004 	ldr	r1, [r6, #4]
     99c:	e1a02007 	mov	r2, r7
     9a0:	ebffffa9 	bl	84c <plot_pixel>
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y + 1, 0x0000);
     9a4:	e5961004 	ldr	r1, [r6, #4]
     9a8:	e7950004 	ldr	r0, [r5, r4]
     9ac:	e2811001 	add	r1, r1, #1
     9b0:	e1a02007 	mov	r2, r7
     9b4:	ebffffa4 	bl	84c <plot_pixel>
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y + 1, 0x0000);
     9b8:	e7940005 	ldr	r0, [r4, r5]
     9bc:	e5961004 	ldr	r1, [r6, #4]
     9c0:	e2800001 	add	r0, r0, #1
     9c4:	e2811001 	add	r1, r1, #1
     9c8:	e1a02007 	mov	r2, r7
     9cc:	ebffff9e 	bl	84c <plot_pixel>
     9d0:	e2844008 	add	r4, r4, #8
        clear_ship(Ship2SDRAM.x, Ship2SDRAM.y);
    }
    // if start buffer is On chip memory
    else if (pixel_buffer_start == 0xC8000000)
    {
        for (int i = 0; i < numAsteroids; i++)
     9d4:	e3540028 	cmp	r4, #40	; 0x28
     9d8:	1affffe7 	bne	97c <clear+0xc8>
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y, 0x0000);
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y, 0x0000);
            plot_pixel(ONCHIP[i].x, ONCHIP[i].y + 1, 0x0000);
            plot_pixel(ONCHIP[i].x + 1, ONCHIP[i].y + 1, 0x0000);
        }
        clear_ship(Ship1ONCHIP.x, Ship1ONCHIP.y);
     9dc:	e30c4e0c 	movw	r4, #52748	; 0xce0c
     9e0:	e3404004 	movt	r4, #4
     9e4:	e59400c0 	ldr	r0, [r4, #192]	; 0xc0
     9e8:	e59410c4 	ldr	r1, [r4, #196]	; 0xc4
     9ec:	ebffff9d 	bl	868 <clear_ship>
        clear_ship(Ship2ONCHIP.x, Ship2ONCHIP.y);
     9f0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
     9f4:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
     9f8:	ebffff9a 	bl	868 <clear_ship>
     9fc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
     a00:	0004ce8c 	.word	0x0004ce8c
     a04:	0004ce64 	.word	0x0004ce64

00000a08 <draw_ship>:
    return 1;
}



void draw_ship(int x, int y) {
     a08:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a0c:	e1a0b000 	mov	r11, r0
     a10:	e1a09001 	mov	r9, r1
     a14:	e59f6050 	ldr	r6, [pc, #80]	; a6c <draw_ship+0x64>
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     a18:	e3a08000 	mov	r8, #0
    return 1;
}



void draw_ship(int x, int y) {
     a1c:	e306ae34 	movw	r10, #28212	; 0x6e34
     a20:	e340a002 	movt	r10, #2
     a24:	ea00000a 	b	a54 <draw_ship+0x4c>
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
			 plot_pixel(x + j, y + i,ship[i][j]);	
     a28:	e1a00004 	mov	r0, r4
     a2c:	e1a01007 	mov	r1, r7
     a30:	e1f520f2 	ldrsh	r2, [r5, #2]!
     a34:	ebffff84 	bl	84c <plot_pixel>
     a38:	e2844001 	add	r4, r4, #1

void draw_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
    	for(j = 0; j < 18; j++){
     a3c:	e1560005 	cmp	r6, r5
     a40:	1afffff8 	bne	a28 <draw_ship+0x20>


void draw_ship(int x, int y) {
    //volatile short * pixelbuf = 0xc8000000;
	int i, j;
    for(i = 0; i < 22; i++){
     a44:	e2888001 	add	r8, r8, #1
     a48:	e2866024 	add	r6, r6, #36	; 0x24
     a4c:	e3580016 	cmp	r8, #22
     a50:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    return 1;
}



void draw_ship(int x, int y) {
     a54:	e0885188 	add	r5, r8, r8, lsl #3
     a58:	e08a5105 	add	r5, r10, r5, lsl #2
     a5c:	e2455002 	sub	r5, r5, #2
     a60:	e1a0400b 	mov	r4, r11
     a64:	e0887009 	add	r7, r8, r9
     a68:	eaffffee 	b	a28 <draw_ship+0x20>
     a6c:	00026e56 	.word	0x00026e56

00000a70 <wait_for_sync>:
void wait_for_sync()
{
    volatile int *pixel_ctrl_ptr = 0xFF203020;
    register int status;

    *pixel_ctrl_ptr = 1;
     a70:	e3033fff 	movw	r3, #16383	; 0x3fff
     a74:	e34f3f20 	movt	r3, #65312	; 0xff20
     a78:	e3a02001 	mov	r2, #1
     a7c:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    status = *(pixel_ctrl_ptr + 3);
     a80:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0)
     a84:	e3130001 	tst	r3, #1
     a88:	012fff1e 	bxeq	lr
    {
        status = *(pixel_ctrl_ptr + 3);
     a8c:	e3032fff 	movw	r2, #16383	; 0x3fff
     a90:	e34f2f20 	movt	r2, #65312	; 0xff20
     a94:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status;

    *pixel_ctrl_ptr = 1;

    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0)
     a98:	e3130001 	tst	r3, #1
     a9c:	1afffffc 	bne	a94 <wait_for_sync+0x24>
     aa0:	e12fff1e 	bx	lr

00000aa4 <wait_for_vsync>:
void wait_for_vsync()
{
    volatile int *pixel_ctrl_ptr = 0xFF203020;
    register int status;

    *pixel_ctrl_ptr = 1;
     aa4:	e3033fff 	movw	r3, #16383	; 0x3fff
     aa8:	e34f3f20 	movt	r3, #65312	; 0xff20
     aac:	e3a02001 	mov	r2, #1
     ab0:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    status = *(pixel_ctrl_ptr + 3);
     ab4:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0)
     ab8:	e3130001 	tst	r3, #1
     abc:	012fff1e 	bxeq	lr
    {
        status = *(pixel_ctrl_ptr + 3);
     ac0:	e3032fff 	movw	r2, #16383	; 0x3fff
     ac4:	e34f2f20 	movt	r2, #65312	; 0xff20
     ac8:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status;

    *pixel_ctrl_ptr = 1;

    status = *(pixel_ctrl_ptr + 3);
    while ((status & 0x01) != 0)
     acc:	e3130001 	tst	r3, #1
     ad0:	1afffffc 	bne	ac8 <wait_for_vsync+0x24>
     ad4:	e12fff1e 	bx	lr

00000ad8 <load_end1>:
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
}

void load_end1() {
     ad8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     adc:	e3a06000 	mov	r6, #0
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
}

void load_end1() {
     ae0:	e307714c 	movw	r7, #29004	; 0x714c
     ae4:	e3407002 	movt	r7, #2
     ae8:	e1a08006 	mov	r8, r6
     aec:	ea000009 	b	b18 <load_end1+0x40>
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, end1[i][j]);
     af0:	e1a00004 	mov	r0, r4
     af4:	e1a01006 	mov	r1, r6
     af8:	e1f520f2 	ldrsh	r2, [r5, #2]!
     afc:	ebffff52 	bl	84c <plot_pixel>
void load_end1() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
     b00:	e2844001 	add	r4, r4, #1
     b04:	e3540d05 	cmp	r4, #320	; 0x140
     b08:	1afffff8 	bne	af0 <load_end1+0x18>

void load_end1() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     b0c:	e2866001 	add	r6, r6, #1
     b10:	e35600f0 	cmp	r6, #240	; 0xf0
     b14:	0a000004 	beq	b2c <load_end1+0x54>
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
}

void load_end1() {
     b18:	e0865106 	add	r5, r6, r6, lsl #2
     b1c:	e0875385 	add	r5, r7, r5, lsl #7
     b20:	e2455002 	sub	r5, r5, #2
     b24:	e1a04008 	mov	r4, r8
     b28:	eafffff0 	b	af0 <load_end1+0x18>
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, end1[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
     b2c:	ebffffdc 	bl	aa4 <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     b30:	e30c39b0 	movw	r3, #51632	; 0xc9b0
     b34:	e3403004 	movt	r3, #4
     b38:	e5933000 	ldr	r3, [r3]
     b3c:	e5932004 	ldr	r2, [r3, #4]
     b40:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     b44:	e3403004 	movt	r3, #4
     b48:	e58320e8 	str	r2, [r3, #232]	; 0xe8
     b4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000b50 <load_title>:
			 plot_pixel(x + j, y + i,ship[i][j]);	
        }
    }
}

void load_title() {
     b50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     b54:	e3a06000 	mov	r6, #0
			 plot_pixel(x + j, y + i,ship[i][j]);	
        }
    }
}

void load_title() {
     b58:	e3017634 	movw	r7, #5684	; 0x1634
     b5c:	e3407000 	movt	r7, #0
     b60:	e1a08006 	mov	r8, r6
     b64:	ea000009 	b	b90 <load_title+0x40>
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, title[i][j]);
     b68:	e1a00004 	mov	r0, r4
     b6c:	e1a01006 	mov	r1, r6
     b70:	e1f520f2 	ldrsh	r2, [r5, #2]!
     b74:	ebffff34 	bl	84c <plot_pixel>
void load_title() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
     b78:	e2844001 	add	r4, r4, #1
     b7c:	e3540d05 	cmp	r4, #320	; 0x140
     b80:	1afffff8 	bne	b68 <load_title+0x18>

void load_title() {
	
    volatile short * pixelbuf = 0xc8000000;
    int i, j;
    for (i=0; i<240; i++) 
     b84:	e2866001 	add	r6, r6, #1
     b88:	e35600f0 	cmp	r6, #240	; 0xf0
     b8c:	0a000004 	beq	ba4 <load_title+0x54>
			 plot_pixel(x + j, y + i,ship[i][j]);	
        }
    }
}

void load_title() {
     b90:	e0865106 	add	r5, r6, r6, lsl #2
     b94:	e0875385 	add	r5, r7, r5, lsl #7
     b98:	e2455002 	sub	r5, r5, #2
     b9c:	e1a04008 	mov	r4, r8
     ba0:	eafffff0 	b	b68 <load_title+0x18>
    int i, j;
    for (i=0; i<240; i++) 
        for (j=0; j<320; j++)
        //*(pixelbuf + (j<<0) + (i<<9)) = gameOver[i][j];
		plot_pixel(j, i, title[i][j]);
	wait_for_vsync(); // swap front and back buffers on VGA vertical sync
     ba4:	ebffffbe 	bl	aa4 <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     ba8:	e30c39b0 	movw	r3, #51632	; 0xc9b0
     bac:	e3403004 	movt	r3, #4
     bb0:	e5933000 	ldr	r3, [r3]
     bb4:	e5932004 	ldr	r2, [r3, #4]
     bb8:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     bbc:	e3403004 	movt	r3, #4
     bc0:	e58320e8 	str	r2, [r3, #232]	; 0xe8
     bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000bc8 <swap>:
    }
}

void swap(int *x, int *y)
{
    int temp = *x;
     bc8:	e5903000 	ldr	r3, [r0]
    *x = *y;
     bcc:	e5912000 	ldr	r2, [r1]
     bd0:	e5802000 	str	r2, [r0]
    *y = temp;
     bd4:	e5813000 	str	r3, [r1]
     bd8:	e12fff1e 	bx	lr

00000bdc <draw_line>:
    }
    return;
}

void draw_line(int x0, int y0, int x1, int y1, short int line_color)
{
     bdc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     be0:	e24dd014 	sub	sp, sp, #20
     be4:	e58d000c 	str	r0, [sp, #12]
     be8:	e58d1008 	str	r1, [sp, #8]
     bec:	e58d2004 	str	r2, [sp, #4]
     bf0:	e58d3000 	str	r3, [sp]
     bf4:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep = abs(y1 - y0) > abs(x1 - x0);
     bf8:	e0613003 	rsb	r3, r1, r3
     bfc:	e3530000 	cmp	r3, #0
     c00:	b2633000 	rsblt	r3, r3, #0
     c04:	e0602002 	rsb	r2, r0, r2
     c08:	e0228fc2 	eor	r8, r2, r2, asr #31
     c0c:	e0488fc2 	sub	r8, r8, r2, asr #31
     c10:	e1530008 	cmp	r3, r8
     c14:	d3a08000 	movle	r8, #0
     c18:	c3a08001 	movgt	r8, #1

    if (is_steep)
     c1c:	e3580000 	cmp	r8, #0
     c20:	0a000005 	beq	c3c <draw_line+0x60>
    {
        swap(&x0, &y0);
     c24:	e28d000c 	add	r0, sp, #12
     c28:	e28d1008 	add	r1, sp, #8
     c2c:	ebffffe5 	bl	bc8 <swap>
        swap(&x1, &y1);
     c30:	e28d0004 	add	r0, sp, #4
     c34:	e1a0100d 	mov	r1, sp
     c38:	ebffffe2 	bl	bc8 <swap>
    }
    if (x0 > x1)
     c3c:	e59d3004 	ldr	r3, [sp, #4]
     c40:	e59d200c 	ldr	r2, [sp, #12]
     c44:	e1520003 	cmp	r2, r3
     c48:	da000005 	ble	c64 <draw_line+0x88>
    {
        swap(&x0, &x1);
     c4c:	e28d000c 	add	r0, sp, #12
     c50:	e28d1004 	add	r1, sp, #4
     c54:	ebffffdb 	bl	bc8 <swap>
        swap(&y0, &y1);
     c58:	e28d0008 	add	r0, sp, #8
     c5c:	e1a0100d 	mov	r1, sp
     c60:	ebffffd8 	bl	bc8 <swap>
    }

    int deltax = x1 - x0;
     c64:	e59d3004 	ldr	r3, [sp, #4]
     c68:	e59d500c 	ldr	r5, [sp, #12]
     c6c:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
     c70:	e59d2000 	ldr	r2, [sp]
     c74:	e59d6008 	ldr	r6, [sp, #8]
     c78:	e0667002 	rsb	r7, r6, r2
     c7c:	e3570000 	cmp	r7, #0
     c80:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
     c84:	e0894fa9 	add	r4, r9, r9, lsr #31
     c88:	e1a040c4 	asr	r4, r4, #1
     c8c:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;

    if (y0 < y1)
    {
        y_step = 1;
     c90:	e1520006 	cmp	r2, r6
     c94:	d3e0b000 	mvnle	r11, #0
     c98:	c3a0b001 	movgt	r11, #1
    else
    {
        y_step = -1;
    }

    for (int x = x0; x < x1; ++x)
     c9c:	e1530005 	cmp	r3, r5
     ca0:	da00000d 	ble	cdc <draw_line+0x100>
    {
        if (is_steep)
     ca4:	e3580000 	cmp	r8, #0
        {
            plot_pixel(y, x, line_color);
     ca8:	11a00006 	movne	r0, r6
     cac:	11a01005 	movne	r1, r5
        }
        else
        {
            plot_pixel(x, y, line_color);
     cb0:	01a00005 	moveq	r0, r5
     cb4:	01a01006 	moveq	r1, r6
     cb8:	e1a0200a 	mov	r2, r10
     cbc:	ebfffee2 	bl	84c <plot_pixel>
        }
        error = error + deltay;
        if (error >= 0)
     cc0:	e0944007 	adds	r4, r4, r7
        {
            y = y + y_step;
     cc4:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
     cc8:	50694004 	rsbpl	r4, r9, r4
    else
    {
        y_step = -1;
    }

    for (int x = x0; x < x1; ++x)
     ccc:	e2855001 	add	r5, r5, #1
     cd0:	e59d3004 	ldr	r3, [sp, #4]
     cd4:	e1530005 	cmp	r3, r5
     cd8:	cafffff1 	bgt	ca4 <draw_line+0xc8>
        {
            y = y + y_step;
            error = error - deltax;
        }
    }
}
     cdc:	e28dd014 	add	sp, sp, #20
     ce0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000ce4 <drawSquare>:
    draw_ship(Ship1.x, Ship1.y);
    draw_ship(Ship2.x, Ship2.y);
}

void drawSquare(int x, int y, int length, int width, short int line_color)
{
     ce4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     ce8:	e24dd008 	sub	sp, sp, #8
     cec:	e1a06000 	mov	r6, r0
     cf0:	e1a08001 	mov	r8, r1
     cf4:	e1a04002 	mov	r4, r2
     cf8:	e1dd72f0 	ldrsh	r7, [sp, #32]
    draw_line(x, y, x + width, y, line_color);
     cfc:	e0805003 	add	r5, r0, r3
     d00:	e58d7000 	str	r7, [sp]
     d04:	e1a02005 	mov	r2, r5
     d08:	e1a03001 	mov	r3, r1
     d0c:	ebffffb2 	bl	bdc <draw_line>
    draw_line(x, y, x, y + length, line_color);
     d10:	e0884004 	add	r4, r8, r4
     d14:	e58d7000 	str	r7, [sp]
     d18:	e1a00006 	mov	r0, r6
     d1c:	e1a01008 	mov	r1, r8
     d20:	e1a02006 	mov	r2, r6
     d24:	e1a03004 	mov	r3, r4
     d28:	ebffffab 	bl	bdc <draw_line>
    draw_line(x + width, y, x + width, y + length, line_color);
     d2c:	e58d7000 	str	r7, [sp]
     d30:	e1a00005 	mov	r0, r5
     d34:	e1a01008 	mov	r1, r8
     d38:	e1a02005 	mov	r2, r5
     d3c:	e1a03004 	mov	r3, r4
     d40:	ebffffa5 	bl	bdc <draw_line>
    draw_line(x, y + length, x + width, y + length, line_color);
     d44:	e58d7000 	str	r7, [sp]
     d48:	e1a00006 	mov	r0, r6
     d4c:	e1a01004 	mov	r1, r4
     d50:	e1a02005 	mov	r2, r5
     d54:	e1a03004 	mov	r3, r4
     d58:	ebffff9f 	bl	bdc <draw_line>
}
     d5c:	e28dd008 	add	sp, sp, #8
     d60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000d64 <draw>:
    }
}

// code for subroutines (not shown)
void draw()
{
     d64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     d68:	e24dd00c 	sub	sp, sp, #12
     d6c:	e3a04000 	mov	r4, #0
        clear_ship(Ship2ONCHIP.x, Ship2ONCHIP.y);
    }
}

// code for subroutines (not shown)
void draw()
     d70:	e59f50bc 	ldr	r5, [pc, #188]	; e34 <draw+0xd0>

    // draw asteroids
    for (int i = 0; i < numAsteroids; i++)
    {
        // drawing rectangles
        plot_pixel(Asteroids[i].x, Asteroids[i].y, 0xFFFF);
     d74:	e3e07000 	mvn	r7, #0
        clear_ship(Ship2ONCHIP.x, Ship2ONCHIP.y);
    }
}

// code for subroutines (not shown)
void draw()
     d78:	e0856004 	add	r6, r5, r4

    // draw asteroids
    for (int i = 0; i < numAsteroids; i++)
    {
        // drawing rectangles
        plot_pixel(Asteroids[i].x, Asteroids[i].y, 0xFFFF);
     d7c:	e7950004 	ldr	r0, [r5, r4]
     d80:	e5961004 	ldr	r1, [r6, #4]
     d84:	e1a02007 	mov	r2, r7
     d88:	ebfffeaf 	bl	84c <plot_pixel>
        plot_pixel(Asteroids[i].x + 1, Asteroids[i].y, 0xFFFF);
     d8c:	e7940005 	ldr	r0, [r4, r5]
     d90:	e2800001 	add	r0, r0, #1
     d94:	e5961004 	ldr	r1, [r6, #4]
     d98:	e1a02007 	mov	r2, r7
     d9c:	ebfffeaa 	bl	84c <plot_pixel>
        plot_pixel(Asteroids[i].x, Asteroids[i].y + 1, 0xFFFF);
     da0:	e5961004 	ldr	r1, [r6, #4]
     da4:	e7950004 	ldr	r0, [r5, r4]
     da8:	e2811001 	add	r1, r1, #1
     dac:	e1a02007 	mov	r2, r7
     db0:	ebfffea5 	bl	84c <plot_pixel>
        plot_pixel(Asteroids[i].x + 1, Asteroids[i].y + 1, 0xFFFF);
     db4:	e7940005 	ldr	r0, [r4, r5]
     db8:	e5961004 	ldr	r1, [r6, #4]
     dbc:	e2800001 	add	r0, r0, #1
     dc0:	e2811001 	add	r1, r1, #1
     dc4:	e1a02007 	mov	r2, r7
     dc8:	ebfffe9f 	bl	84c <plot_pixel>
     dcc:	e2844010 	add	r4, r4, #16
// code for subroutines (not shown)
void draw()
{

    // draw asteroids
    for (int i = 0; i < numAsteroids; i++)
     dd0:	e3540050 	cmp	r4, #80	; 0x50
     dd4:	1affffe7 	bne	d78 <draw+0x14>
        plot_pixel(Asteroids[i].x, Asteroids[i].y + 1, 0xFFFF);
        plot_pixel(Asteroids[i].x + 1, Asteroids[i].y + 1, 0xFFFF);
    }

    // draw ship
    drawSquare(Ship1.x, Ship1.y, shipLength, shipWidth, 0xFFFF);
     dd8:	e30c4e0c 	movw	r4, #52748	; 0xce0c
     ddc:	e3404004 	movt	r4, #4
     de0:	e59400a8 	ldr	r0, [r4, #168]	; 0xa8
     de4:	e59410ac 	ldr	r1, [r4, #172]	; 0xac
     de8:	e3e05000 	mvn	r5, #0
     dec:	e58d5000 	str	r5, [sp]
     df0:	e3a02015 	mov	r2, #21
     df4:	e3a0300b 	mov	r3, #11
     df8:	ebffffb9 	bl	ce4 <drawSquare>
    drawSquare(Ship2.x, Ship2.y, shipLength, shipWidth, 0xFFFF);
     dfc:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
     e00:	e59410cc 	ldr	r1, [r4, #204]	; 0xcc
     e04:	e58d5000 	str	r5, [sp]
     e08:	e3a02015 	mov	r2, #21
     e0c:	e3a0300b 	mov	r3, #11
     e10:	ebffffb3 	bl	ce4 <drawSquare>
    
    draw_ship(Ship1.x, Ship1.y);
     e14:	e59400a8 	ldr	r0, [r4, #168]	; 0xa8
     e18:	e59410ac 	ldr	r1, [r4, #172]	; 0xac
     e1c:	ebfffef9 	bl	a08 <draw_ship>
    draw_ship(Ship2.x, Ship2.y);
     e20:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
     e24:	e59410cc 	ldr	r1, [r4, #204]	; 0xcc
     e28:	ebfffef6 	bl	a08 <draw_ship>
}
     e2c:	e28dd00c 	add	sp, sp, #12
     e30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
     e34:	0004ce14 	.word	0x0004ce14

00000e38 <config_KEYs>:


/* setup the KEY interrupts in the FPGA */
void config_KEYs() {
volatile int * KEY_ptr = (int *) 0xFF200050; // pushbutton KEY base address
*(KEY_ptr + 2) = 0xF; // enable interrupts for the two KEYs
     e38:	e3a03000 	mov	r3, #0
     e3c:	e34f3f20 	movt	r3, #65312	; 0xff20
     e40:	e3a0200f 	mov	r2, #15
     e44:	e5832058 	str	r2, [r3, #88]	; 0x58
     e48:	e12fff1e 	bx	lr

00000e4c <__cs3_reset>:
	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *)0xFFFEC110) = interrupt_ID;
}

// Define the remaining exception handlers
void __attribute__((interrupt)) __cs3_reset(void) {
     e4c:	eafffffe 	b	e4c <__cs3_reset>

00000e50 <__cs3_isr_undef>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_undef(void) {
     e50:	eafffffe 	b	e50 <__cs3_isr_undef>

00000e54 <__cs3_isr_swi>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_swi(void) {
     e54:	eafffffe 	b	e54 <__cs3_isr_swi>

00000e58 <__cs3_isr_pabort>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_pabort(void) {
     e58:	eafffffe 	b	e58 <__cs3_isr_pabort>

00000e5c <__cs3_isr_dabort>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_dabort(void) {
     e5c:	eafffffe 	b	e5c <__cs3_isr_dabort>

00000e60 <__cs3_isr_fiq>:
while (1);
}
void __attribute__((interrupt)) __cs3_isr_fiq(void) {
     e60:	eafffffe 	b	e60 <__cs3_isr_fiq>

00000e64 <disable_A9_interrupts>:
/*
* Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void) {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     e64:	e3a030d3 	mov	r3, #211	; 0xd3
     e68:	e129f003 	msr	CPSR_fc, r3
     e6c:	e12fff1e 	bx	lr

00000e70 <set_A9_IRQ_stack>:
void set_A9_IRQ_stack(void) {
	int stack, mode;
	stack = 0xFFFFFFFF - 7; // top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     e70:	e3a030d2 	mov	r3, #210	; 0xd2
     e74:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r"(stack));
     e78:	e3e03007 	mvn	r3, #7
     e7c:	e1a0d003 	mov	sp, r3
	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
     e80:	e3a030d3 	mov	r3, #211	; 0xd3
     e84:	e129f003 	msr	CPSR_fc, r3
     e88:	e12fff1e 	bx	lr

00000e8c <enable_A9_interrupts>:
/*
* Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void) {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps] "r"(status));
     e8c:	e3a03053 	mov	r3, #83	; 0x53
     e90:	e129f003 	msr	CPSR_fc, r3
     e94:	e12fff1e 	bx	lr

00000e98 <config_interrupt>:
/*
* Configure Set Enable Registers (ICDISERn) and Interrupt Processor Target
* Registers (ICDIPTRn). The default (reset) values are used for other registers
* in the GIC.
*/
void config_interrupt(int N, int CPU_target) {
     e98:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     e9c:	e1a031c0 	asr	r3, r0, #3
     ea0:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
     ea4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int reg_offset, index, value, address;
	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     ea8:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     eac:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     eb0:	e3a04001 	mov	r4, #1
     eb4:	e18c2214 	orr	r2, r12, r4, lsl r2
     eb8:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the
	* appropriate byte */
	*(char *)address = (char)CPU_target;
     ebc:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     ec0:	e5c01000 	strb	r1, [r0]
}
     ec4:	e8bd0010 	ldmfd	sp!, {r4}
     ec8:	e12fff1e 	bx	lr

00000ecc <config_GIC>:
}

/*
* Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void) {
     ecc:	e92d4008 	push	{r3, lr}
	config_interrupt (73, 1); // configure the FPGA KEYs interrupt (73)
     ed0:	e3a00049 	mov	r0, #73	; 0x49
     ed4:	e3a01001 	mov	r1, #1
     ed8:	ebffffee 	bl	e98 <config_interrupt>
	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all
	// priorities
	*((int *) 0xFFFEC104) = 0xFFFF;
     edc:	e3e02a13 	mvn	r2, #77824	; 0x13000
     ee0:	e30f3fff 	movw	r3, #65535	; 0xffff
     ee4:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	// Set CPU Interface Control Register (ICCICR). Enable signaling of
	// interrupts
	*((int *) 0xFFFEC100) = 1;
     ee8:	e3a03001 	mov	r3, #1
     eec:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	// Configure the Distributor Control Register (ICDDCR) to send pending
	// interrupts to CPUs
	*((int *) 0xFFFED000) = 1;
     ef0:	e3e02a12 	mvn	r2, #73728	; 0x12000
     ef4:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     ef8:	e8bd8008 	pop	{r3, pc}

00000efc <pushbutton_ISR>:
	/* HEX display base address */
	volatile int * HEX3_HEX0_ptr = (int *) 0xFF200020;
	
	int press, HEX_bits;
	
	press = *(KEY_ptr + 3); // read the pushbutton interrupt register
     efc:	e3a03000 	mov	r3, #0
     f00:	e34f3f20 	movt	r3, #65312	; 0xff20
     f04:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
	*(KEY_ptr + 3) = press; // Clear the interrupt
     f08:	e583205c 	str	r2, [r3, #92]	; 0x5c
	if (press & 0x1) { // KEY0
     f0c:	e3120001 	tst	r2, #1
     f10:	0a000004 	beq	f28 <pushbutton_ISR+0x2c>
		start = true;
     f14:	e30c3e0c 	movw	r3, #52748	; 0xce0c
     f18:	e3403004 	movt	r3, #4
     f1c:	e3a02001 	mov	r2, #1
     f20:	e5c320f4 	strb	r2, [r3, #244]	; 0xf4
     f24:	e12fff1e 	bx	lr
	}
	else if (press & 0x2) { // KEY1
     f28:	e3120002 	tst	r2, #2
     f2c:	112fff1e 	bxne	lr
	}	
	else if (press & 0x4) { // KEY2
     f30:	e3120004 	tst	r2, #4
		start = true;
     f34:	130c3e0c 	movwne	r3, #52748	; 0xce0c
     f38:	13403004 	movtne	r3, #4
     f3c:	13a02001 	movne	r2, #1
     f40:	15c320f4 	strbne	r2, [r3, #244]	; 0xf4
     f44:	e12fff1e 	bx	lr

00000f48 <__cs3_isr_irq>:
* 3. provides code that initializes the generic interrupt controller
*/
void pushbutton_ISR(void);
void config_interrupt(int, int);
// Define the IRQ exception handler
void __attribute__((interrupt)) __cs3_isr_irq(void) {
     f48:	e24ee004 	sub	lr, lr, #4
     f4c:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
	// Read the ICCIAR from the CPU Interface in the GIC
	int interrupt_ID = *((int *)0xFFFEC10C);
     f50:	e3e03a13 	mvn	r3, #77824	; 0x13000
	if (interrupt_ID == 73) // check if interrupt is from the KEYs
     f54:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
     f58:	e3530049 	cmp	r3, #73	; 0x49
     f5c:	1a000004 	bne	f74 <__cs3_isr_irq+0x2c>
		pushbutton_ISR();
     f60:	ebffffe5 	bl	efc <pushbutton_ISR>
	else
		while (1); // if unexpected, then stay here
	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *)0xFFFEC110) = interrupt_ID;
     f64:	e3a02049 	mov	r2, #73	; 0x49
     f68:	e3e03a13 	mvn	r3, #77824	; 0x13000
     f6c:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
     f70:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
     f74:	eafffffe 	b	f74 <__cs3_isr_irq+0x2c>

00000f78 <write_char>:
	return;
}

void write_char(int x, int y, char c) {
  // VGA character buffer
  volatile char * character_buffer = (char *) (0xC9000000 + (y<<7) + x);
     f78:	e28004c9 	add	r0, r0, #-922746880	; 0xc9000000
  *character_buffer = c;
     f7c:	e7c02381 	strb	r2, [r0, r1, lsl #7]
     f80:	e12fff1e 	bx	lr

00000f84 <main>:
struct prevLocation Ship2ONCHIP;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------

int main(void)
{
     f84:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    
    disable_A9_interrupts(); // disable interrupts in the A9 processor
     f88:	ebffffb5 	bl	e64 <disable_A9_interrupts>
	set_A9_IRQ_stack(); // initialize the stack pointer for IRQ mode
     f8c:	ebffffb7 	bl	e70 <set_A9_IRQ_stack>
	config_GIC(); // configure the general interrupt controller
     f90:	ebffffcd 	bl	ecc <config_GIC>
	config_KEYs(); // configure pushbutton KEYs to generate interrupts
     f94:	ebffffa7 	bl	e38 <config_KEYs>
	enable_A9_interrupts(); // enable interrupts in the A9 processor
     f98:	ebffffbb 	bl	e8c <enable_A9_interrupts>
    
    initialize();
     f9c:	ebfffd20 	bl	424 <initialize>
    
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)
   
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
     fa0:	e30c59b0 	movw	r5, #51632	; 0xc9b0
     fa4:	e3405004 	movt	r5, #4
     fa8:	e5953000 	ldr	r3, [r5]
     fac:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
     fb0:	e5832004 	str	r2, [r3, #4]
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
     fb4:	ebfffeba 	bl	aa4 <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
     fb8:	e5953000 	ldr	r3, [r5]
     fbc:	e5933000 	ldr	r3, [r3]
     fc0:	e30c4e0c 	movw	r4, #52748	; 0xce0c
     fc4:	e3404004 	movt	r4, #4
     fc8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    clear_screen(); // pixel_buffer_start points to the pixel buffer
     fcc:	ebfffe0f 	bl	810 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
     fd0:	e5953000 	ldr	r3, [r5]
     fd4:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
     fd8:	e5832004 	str	r2, [r3, #4]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     fdc:	e5933004 	ldr	r3, [r3, #4]
     fe0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
	clear_screen();
     fe4:	ebfffe09 	bl	810 <clear_screen>
	
	/* SW base address */
	volatile int * SW_ptr = (int *) 0xFF200040;	
	int before = * SW_ptr;
     fe8:	e3a03000 	mov	r3, #0
     fec:	e34f3f20 	movt	r3, #65312	; 0xff20
     ff0:	e5932040 	ldr	r2, [r3, #64]	; 0x40
	
    
	// start screen
	int current = * SW_ptr;
     ff4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    start = false;
     ff8:	e3a03000 	mov	r3, #0
     ffc:	e5c430f4 	strb	r3, [r4, #244]	; 0xf4
	//while (current == before) {		
		//load_title();
		//current = * SW_ptr;
	//}
    while (start == false) {		
    1000:	e30c4e0c 	movw	r4, #52748	; 0xce0c
    1004:	e3404004 	movt	r4, #4
		load_title();
    1008:	ebfffed0 	bl	b50 <load_title>
    start = false;
	//while (current == before) {		
		//load_title();
		//current = * SW_ptr;
	//}
    while (start == false) {		
    100c:	e5d430f4 	ldrb	r3, [r4, #244]	; 0xf4
    1010:	e3530000 	cmp	r3, #0
    1014:	0afffffb 	beq	1008 <main+0x84>
		load_title();
	}
    
    clear_screen();
    1018:	ebfffdfc 	bl	810 <clear_screen>
 	
    score = 0;
    101c:	e30c3e0c 	movw	r3, #52748	; 0xce0c
    1020:	e3403004 	movt	r3, #4
    1024:	e3a02000 	mov	r2, #0
    1028:	e58320ec 	str	r2, [r3, #236]	; 0xec
    score2 = 0;
    102c:	e58320f0 	str	r2, [r3, #240]	; 0xf0

        checkKeyPress();
        // code for updating the locations of boxes
        update();
        
        write_char(3, 6, 'S');
    1030:	e3a0a003 	mov	r10, #3
    1034:	e3a04006 	mov	r4, #6
    1038:	e3a06053 	mov	r6, #83	; 0x53
		write_char(4, 6, 'C');
    103c:	e3a08004 	mov	r8, #4
		write_char(5, 6, 'O');
		write_char(6, 6, 'R');
		write_char(7, 6, 'E');
		write_char(8, 6, ':');
		write_char(9, 6, ('0'+score));
    1040:	e1a05003 	mov	r5, r3
			}
            clear_screen();
        }        

        wait_for_sync();                            // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1044:	e30c79b0 	movw	r7, #51632	; 0xc9b0
    1048:	e3407004 	movt	r7, #4
 	
    score = 0;
    score2 = 0;
	while (1) {
        // clear_screen_partial();
        clear();
    104c:	ebfffe18 	bl	8b4 <clear>

        // code for drawing the boxes and lines
        draw();
    1050:	ebffff43 	bl	d64 <draw>

        checkKeyPress();
    1054:	ebfffc80 	bl	25c <checkKeyPress>
        // code for updating the locations of boxes
        update();
    1058:	ebfffd38 	bl	540 <update>
        
        write_char(3, 6, 'S');
    105c:	e1a0000a 	mov	r0, r10
    1060:	e1a01004 	mov	r1, r4
    1064:	e1a02006 	mov	r2, r6
    1068:	ebffffc2 	bl	f78 <write_char>
		write_char(4, 6, 'C');
    106c:	e1a00008 	mov	r0, r8
    1070:	e1a01004 	mov	r1, r4
    1074:	e3a02043 	mov	r2, #67	; 0x43
    1078:	ebffffbe 	bl	f78 <write_char>
		write_char(5, 6, 'O');
    107c:	e3a00005 	mov	r0, #5
    1080:	e1a01004 	mov	r1, r4
    1084:	e3a0204f 	mov	r2, #79	; 0x4f
    1088:	ebffffba 	bl	f78 <write_char>
		write_char(6, 6, 'R');
    108c:	e1a00004 	mov	r0, r4
    1090:	e1a01004 	mov	r1, r4
    1094:	e3a02052 	mov	r2, #82	; 0x52
    1098:	ebffffb6 	bl	f78 <write_char>
		write_char(7, 6, 'E');
    109c:	e3a00007 	mov	r0, #7
    10a0:	e1a01004 	mov	r1, r4
    10a4:	e3a02045 	mov	r2, #69	; 0x45
    10a8:	ebffffb2 	bl	f78 <write_char>
		write_char(8, 6, ':');
    10ac:	e3a00008 	mov	r0, #8
    10b0:	e1a01004 	mov	r1, r4
    10b4:	e3a0203a 	mov	r2, #58	; 0x3a
    10b8:	ebffffae 	bl	f78 <write_char>
		write_char(9, 6, ('0'+score));
    10bc:	e59520ec 	ldr	r2, [r5, #236]	; 0xec
    10c0:	e2822030 	add	r2, r2, #48	; 0x30
    10c4:	e3a00009 	mov	r0, #9
    10c8:	e1a01004 	mov	r1, r4
    10cc:	e6ef2072 	uxtb	r2, r2
    10d0:	ebffffa8 	bl	f78 <write_char>
        
        write_char(63, 6, 'S');
    10d4:	e3a0003f 	mov	r0, #63	; 0x3f
    10d8:	e1a01004 	mov	r1, r4
    10dc:	e1a02006 	mov	r2, r6
    10e0:	ebffffa4 	bl	f78 <write_char>
		write_char(64, 6, 'C');
    10e4:	e3a00040 	mov	r0, #64	; 0x40
    10e8:	e1a01004 	mov	r1, r4
    10ec:	e3a02043 	mov	r2, #67	; 0x43
    10f0:	ebffffa0 	bl	f78 <write_char>
		write_char(65, 6, 'O');
    10f4:	e3a00041 	mov	r0, #65	; 0x41
    10f8:	e1a01004 	mov	r1, r4
    10fc:	e3a0204f 	mov	r2, #79	; 0x4f
    1100:	ebffff9c 	bl	f78 <write_char>
		write_char(66, 6, 'R');
    1104:	e3a00042 	mov	r0, #66	; 0x42
    1108:	e1a01004 	mov	r1, r4
    110c:	e3a02052 	mov	r2, #82	; 0x52
    1110:	ebffff98 	bl	f78 <write_char>
		write_char(67, 6, 'E');
    1114:	e3a00043 	mov	r0, #67	; 0x43
    1118:	e1a01004 	mov	r1, r4
    111c:	e3a02045 	mov	r2, #69	; 0x45
    1120:	ebffff94 	bl	f78 <write_char>
		write_char(68, 6, ':');
    1124:	e3a00044 	mov	r0, #68	; 0x44
    1128:	e1a01004 	mov	r1, r4
    112c:	e3a0203a 	mov	r2, #58	; 0x3a
    1130:	ebffff90 	bl	f78 <write_char>
		write_char(69, 6, ('0'+score2));
    1134:	e59520f0 	ldr	r2, [r5, #240]	; 0xf0
    1138:	e2822030 	add	r2, r2, #48	; 0x30
    113c:	e3a00045 	mov	r0, #69	; 0x45
    1140:	e1a01004 	mov	r1, r4
    1144:	e6ef2072 	uxtb	r2, r2
    1148:	ebffff8a 	bl	f78 <write_char>
        
        if (score == 5 || score2 == 5){
    114c:	e59530ec 	ldr	r3, [r5, #236]	; 0xec
    1150:	e3530005 	cmp	r3, #5
    1154:	0a000002 	beq	1164 <main+0x1e0>
    1158:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
    115c:	e3530005 	cmp	r3, #5
    1160:	1a000008 	bne	1188 <main+0x204>
            start = false;
    1164:	e3a03000 	mov	r3, #0
    1168:	e5c530f4 	strb	r3, [r5, #244]	; 0xf4
            score = 0;
    116c:	e58530ec 	str	r3, [r5, #236]	; 0xec
            score2 = 0;
    1170:	e58530f0 	str	r3, [r5, #240]	; 0xf0
            while (start == false) {		
				load_end1();
    1174:	ebfffe57 	bl	ad8 <load_end1>
        
        if (score == 5 || score2 == 5){
            start = false;
            score = 0;
            score2 = 0;
            while (start == false) {		
    1178:	e5d530f4 	ldrb	r3, [r5, #244]	; 0xf4
    117c:	e3530000 	cmp	r3, #0
    1180:	0afffffb 	beq	1174 <main+0x1f0>
				load_end1();
			}
            clear_screen();
    1184:	ebfffda1 	bl	810 <clear_screen>
        }        

        wait_for_sync();                            // swap front and back buffers on VGA vertical sync
    1188:	ebfffe38 	bl	a70 <wait_for_sync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    118c:	e5973000 	ldr	r3, [r7]
    1190:	e5933004 	ldr	r3, [r3, #4]
    1194:	e58530e8 	str	r3, [r5, #232]	; 0xe8
	}
    1198:	eaffffab 	b	104c <main+0xc8>

0000119c <atexit>:
    119c:	e1a01000 	mov	r1, r0
    11a0:	e3a00000 	mov	r0, #0
    11a4:	e92d4008 	push	{r3, lr}
    11a8:	e1a02000 	mov	r2, r0
    11ac:	e1a03000 	mov	r3, r0
    11b0:	eb00002c 	bl	1268 <__register_exitproc>
    11b4:	e8bd4008 	pop	{r3, lr}
    11b8:	e12fff1e 	bx	lr

000011bc <exit>:
    11bc:	e92d4008 	push	{r3, lr}
    11c0:	e3a01000 	mov	r1, #0
    11c4:	e1a04000 	mov	r4, r0
    11c8:	eb000063 	bl	135c <__call_exitprocs>
    11cc:	e59f3018 	ldr	r3, [pc, #24]	; 11ec <exit+0x30>
    11d0:	e5930000 	ldr	r0, [r3]
    11d4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    11d8:	e3530000 	cmp	r3, #0
    11dc:	11a0e00f 	movne	lr, pc
    11e0:	112fff13 	bxne	r3
    11e4:	e1a00004 	mov	r0, r4
    11e8:	eb0000e7 	bl	158c <_exit>
    11ec:	0004c94c 	.word	0x0004c94c

000011f0 <srand>:
    11f0:	e59f3010 	ldr	r3, [pc, #16]	; 1208 <srand+0x18>
    11f4:	e5933000 	ldr	r3, [r3]
    11f8:	e3a02000 	mov	r2, #0
    11fc:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    1200:	e58320ac 	str	r2, [r3, #172]	; 0xac
    1204:	e12fff1e 	bx	lr
    1208:	0004c9b8 	.word	0x0004c9b8

0000120c <rand>:
    120c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1210:	e59f3044 	ldr	r3, [pc, #68]	; 125c <rand+0x50>
    1214:	e593c000 	ldr	r12, [r3]
    1218:	e59f4040 	ldr	r4, [pc, #64]	; 1260 <rand+0x54>
    121c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    1220:	e0040492 	mul	r4, r2, r4
    1224:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    1228:	e59f3034 	ldr	r3, [pc, #52]	; 1264 <rand+0x58>
    122c:	e0244193 	mla	r4, r3, r1, r4
    1230:	e0810392 	umull	r0, r1, r2, r3
    1234:	e3a02001 	mov	r2, #1
    1238:	e0922000 	adds	r2, r2, r0
    123c:	e0841001 	add	r1, r4, r1
    1240:	e3a03000 	mov	r3, #0
    1244:	e0a33001 	adc	r3, r3, r1
    1248:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    124c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1250:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1254:	e8bd0010 	ldmfd	sp!, {r4}
    1258:	e12fff1e 	bx	lr
    125c:	0004c9b8 	.word	0x0004c9b8
    1260:	5851f42d 	.word	0x5851f42d
    1264:	4c957f2d 	.word	0x4c957f2d

00001268 <__register_exitproc>:
    1268:	e59fc0e4 	ldr	r12, [pc, #228]	; 1354 <__register_exitproc+0xec>
    126c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1270:	e59c4000 	ldr	r4, [r12]
    1274:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1278:	e35c0000 	cmp	r12, #0
    127c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1280:	e59c5004 	ldr	r5, [r12, #4]
    1284:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1288:	e355001f 	cmp	r5, #31
    128c:	e24dd010 	sub	sp, sp, #16
    1290:	e1a06000 	mov	r6, r0
    1294:	da000015 	ble	12f0 <__register_exitproc+0x88>
    1298:	e59f00b8 	ldr	r0, [pc, #184]	; 1358 <__register_exitproc+0xf0>
    129c:	e3500000 	cmp	r0, #0
    12a0:	1a000001 	bne	12ac <__register_exitproc+0x44>
    12a4:	e3e00000 	mvn	r0, #0
    12a8:	ea000018 	b	1310 <__register_exitproc+0xa8>
    12ac:	e3a00e19 	mov	r0, #400	; 0x190
    12b0:	e58d100c 	str	r1, [sp, #12]
    12b4:	e58d2008 	str	r2, [sp, #8]
    12b8:	e58d3004 	str	r3, [sp, #4]
    12bc:	e320f000 	nop	{0}
    12c0:	e250c000 	subs	r12, r0, #0
    12c4:	e59d100c 	ldr	r1, [sp, #12]
    12c8:	e59d2008 	ldr	r2, [sp, #8]
    12cc:	e59d3004 	ldr	r3, [sp, #4]
    12d0:	0afffff3 	beq	12a4 <__register_exitproc+0x3c>
    12d4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    12d8:	e3a00000 	mov	r0, #0
    12dc:	e58c0004 	str	r0, [r12, #4]
    12e0:	e58c5000 	str	r5, [r12]
    12e4:	e584c148 	str	r12, [r4, #328]	; 0x148
    12e8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    12ec:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    12f0:	e3560000 	cmp	r6, #0
    12f4:	e59c4004 	ldr	r4, [r12, #4]
    12f8:	1a000007 	bne	131c <__register_exitproc+0xb4>
    12fc:	e2843002 	add	r3, r4, #2
    1300:	e2844001 	add	r4, r4, #1
    1304:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1308:	e58c4004 	str	r4, [r12, #4]
    130c:	e3a00000 	mov	r0, #0
    1310:	e28dd010 	add	sp, sp, #16
    1314:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1318:	e12fff1e 	bx	lr
    131c:	e3a00001 	mov	r0, #1
    1320:	e1a00410 	lsl	r0, r0, r4
    1324:	e08c8104 	add	r8, r12, r4, lsl #2
    1328:	e3560002 	cmp	r6, #2
    132c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1330:	e5883108 	str	r3, [r8, #264]	; 0x108
    1334:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1338:	e1877000 	orr	r7, r7, r0
    133c:	01830000 	orreq	r0, r3, r0
    1340:	e1a05008 	mov	r5, r8
    1344:	e5882088 	str	r2, [r8, #136]	; 0x88
    1348:	e58c7188 	str	r7, [r12, #392]	; 0x188
    134c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1350:	eaffffe9 	b	12fc <__register_exitproc+0x94>
    1354:	0004c94c 	.word	0x0004c94c
    1358:	00000000 	.word	0x00000000

0000135c <__call_exitprocs>:
    135c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1360:	e59f3168 	ldr	r3, [pc, #360]	; 14d0 <__call_exitprocs+0x174>
    1364:	e5933000 	ldr	r3, [r3]
    1368:	e24dd014 	sub	sp, sp, #20
    136c:	e58d3004 	str	r3, [sp, #4]
    1370:	e2833f52 	add	r3, r3, #328	; 0x148
    1374:	e58d0008 	str	r0, [sp, #8]
    1378:	e58d300c 	str	r3, [sp, #12]
    137c:	e1a07001 	mov	r7, r1
    1380:	e3a08001 	mov	r8, #1
    1384:	e59d3004 	ldr	r3, [sp, #4]
    1388:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    138c:	e3560000 	cmp	r6, #0
    1390:	e59db00c 	ldr	r11, [sp, #12]
    1394:	0a000033 	beq	1468 <__call_exitprocs+0x10c>
    1398:	e5965004 	ldr	r5, [r6, #4]
    139c:	e2554001 	subs	r4, r5, #1
    13a0:	5286a088 	addpl	r10, r6, #136	; 0x88
    13a4:	5285501f 	addpl	r5, r5, #31
    13a8:	508a5105 	addpl	r5, r10, r5, lsl #2
    13ac:	5a000007 	bpl	13d0 <__call_exitprocs+0x74>
    13b0:	ea000029 	b	145c <__call_exitprocs+0x100>
    13b4:	e5953000 	ldr	r3, [r5]
    13b8:	e1530007 	cmp	r3, r7
    13bc:	0a000005 	beq	13d8 <__call_exitprocs+0x7c>
    13c0:	e2444001 	sub	r4, r4, #1
    13c4:	e3740001 	cmn	r4, #1
    13c8:	e2455004 	sub	r5, r5, #4
    13cc:	0a000022 	beq	145c <__call_exitprocs+0x100>
    13d0:	e3570000 	cmp	r7, #0
    13d4:	1afffff6 	bne	13b4 <__call_exitprocs+0x58>
    13d8:	e5963004 	ldr	r3, [r6, #4]
    13dc:	e06a2005 	rsb	r2, r10, r5
    13e0:	e2433001 	sub	r3, r3, #1
    13e4:	e0862002 	add	r2, r6, r2
    13e8:	e1530004 	cmp	r3, r4
    13ec:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    13f0:	13a01000 	movne	r1, #0
    13f4:	05864004 	streq	r4, [r6, #4]
    13f8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    13fc:	e3530000 	cmp	r3, #0
    1400:	0affffee 	beq	13c0 <__call_exitprocs+0x64>
    1404:	e1a02418 	lsl	r2, r8, r4
    1408:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    140c:	e1120001 	tst	r2, r1
    1410:	e5969004 	ldr	r9, [r6, #4]
    1414:	0a000016 	beq	1474 <__call_exitprocs+0x118>
    1418:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    141c:	e1120001 	tst	r2, r1
    1420:	1a000016 	bne	1480 <__call_exitprocs+0x124>
    1424:	e59d0008 	ldr	r0, [sp, #8]
    1428:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    142c:	e1a0e00f 	mov	lr, pc
    1430:	e12fff13 	bx	r3
    1434:	e5963004 	ldr	r3, [r6, #4]
    1438:	e1530009 	cmp	r3, r9
    143c:	1affffd0 	bne	1384 <__call_exitprocs+0x28>
    1440:	e59b3000 	ldr	r3, [r11]
    1444:	e1530006 	cmp	r3, r6
    1448:	1affffcd 	bne	1384 <__call_exitprocs+0x28>
    144c:	e2444001 	sub	r4, r4, #1
    1450:	e3740001 	cmn	r4, #1
    1454:	e2455004 	sub	r5, r5, #4
    1458:	1affffdc 	bne	13d0 <__call_exitprocs+0x74>
    145c:	e59f1070 	ldr	r1, [pc, #112]	; 14d4 <__call_exitprocs+0x178>
    1460:	e3510000 	cmp	r1, #0
    1464:	1a000009 	bne	1490 <__call_exitprocs+0x134>
    1468:	e28dd014 	add	sp, sp, #20
    146c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1470:	e12fff1e 	bx	lr
    1474:	e1a0e00f 	mov	lr, pc
    1478:	e12fff13 	bx	r3
    147c:	eaffffec 	b	1434 <__call_exitprocs+0xd8>
    1480:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1484:	e1a0e00f 	mov	lr, pc
    1488:	e12fff13 	bx	r3
    148c:	eaffffe8 	b	1434 <__call_exitprocs+0xd8>
    1490:	e5963004 	ldr	r3, [r6, #4]
    1494:	e3530000 	cmp	r3, #0
    1498:	e5963000 	ldr	r3, [r6]
    149c:	1a000008 	bne	14c4 <__call_exitprocs+0x168>
    14a0:	e3530000 	cmp	r3, #0
    14a4:	0a000006 	beq	14c4 <__call_exitprocs+0x168>
    14a8:	e1a00006 	mov	r0, r6
    14ac:	e58b3000 	str	r3, [r11]
    14b0:	e320f000 	nop	{0}
    14b4:	e59b6000 	ldr	r6, [r11]
    14b8:	e3560000 	cmp	r6, #0
    14bc:	1affffb5 	bne	1398 <__call_exitprocs+0x3c>
    14c0:	eaffffe8 	b	1468 <__call_exitprocs+0x10c>
    14c4:	e1a0b006 	mov	r11, r6
    14c8:	e1a06003 	mov	r6, r3
    14cc:	eafffff9 	b	14b8 <__call_exitprocs+0x15c>
    14d0:	0004c94c 	.word	0x0004c94c
    14d4:	00000000 	.word	0x00000000

000014d8 <register_fini>:
    14d8:	e92d4008 	push	{r3, lr}
    14dc:	e59f3010 	ldr	r3, [pc, #16]	; 14f4 <register_fini+0x1c>
    14e0:	e3530000 	cmp	r3, #0
    14e4:	159f000c 	ldrne	r0, [pc, #12]	; 14f8 <register_fini+0x20>
    14e8:	1bffff2b 	blne	119c <atexit>
    14ec:	e8bd4008 	pop	{r3, lr}
    14f0:	e12fff1e 	bx	lr
    14f4:	0004c974 	.word	0x0004c974
    14f8:	000014fc 	.word	0x000014fc

000014fc <__libc_fini_array>:
    14fc:	e92d4038 	push	{r3, r4, r5, lr}
    1500:	e59f5030 	ldr	r5, [pc, #48]	; 1538 <__libc_fini_array+0x3c>
    1504:	e59f4030 	ldr	r4, [pc, #48]	; 153c <__libc_fini_array+0x40>
    1508:	e0654004 	rsb	r4, r5, r4
    150c:	e1b04144 	asrs	r4, r4, #2
    1510:	10855104 	addne	r5, r5, r4, lsl #2
    1514:	0a000004 	beq	152c <__libc_fini_array+0x30>
    1518:	e5353004 	ldr	r3, [r5, #-4]!
    151c:	e1a0e00f 	mov	lr, pc
    1520:	e12fff13 	bx	r3
    1524:	e2544001 	subs	r4, r4, #1
    1528:	1afffffa 	bne	1518 <__libc_fini_array+0x1c>
    152c:	eb012d10 	bl	4c974 <__libc_fini>
    1530:	e8bd4038 	pop	{r3, r4, r5, lr}
    1534:	e12fff1e 	bx	lr
    1538:	0004c98c 	.word	0x0004c98c
    153c:	0004c990 	.word	0x0004c990

00001540 <__cs3_premain>:
    1540:	e92d4008 	push	{r3, lr}
    1544:	eb000017 	bl	15a8 <__libc_init_array>
    1548:	e59f3030 	ldr	r3, [pc, #48]	; 1580 <__cs3_premain+0x40>
    154c:	e3530000 	cmp	r3, #0
    1550:	15930000 	ldrne	r0, [r3]
    1554:	01a00003 	moveq	r0, r3
    1558:	e59f3024 	ldr	r3, [pc, #36]	; 1584 <__cs3_premain+0x44>
    155c:	e3530000 	cmp	r3, #0
    1560:	15931000 	ldrne	r1, [r3]
    1564:	01a01003 	moveq	r1, r3
    1568:	e3a02000 	mov	r2, #0
    156c:	ebfffe84 	bl	f84 <main>
    1570:	e59f3010 	ldr	r3, [pc, #16]	; 1588 <__cs3_premain+0x48>
    1574:	e3530000 	cmp	r3, #0
    1578:	1bffff0f 	blne	11bc <exit>
    157c:	eafffffe 	b	157c <__cs3_premain+0x3c>
	...
    1588:	000011bc 	.word	0x000011bc

0000158c <_exit>:
    158c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1590:	e3a00018 	mov	r0, #24
    1594:	e59f1004 	ldr	r1, [pc, #4]	; 15a0 <_exit+0x14>
    1598:	ef123456 	svc	0x00123456
    159c:	eafffffe 	b	159c <_exit+0x10>
    15a0:	00020026 	.word	0x00020026

000015a4 <__cs3_isr_interrupt>:
    15a4:	eafffffe 	b	15a4 <__cs3_isr_interrupt>

000015a8 <__libc_init_array>:
    15a8:	e92d4070 	push	{r4, r5, r6, lr}
    15ac:	e59f506c 	ldr	r5, [pc, #108]	; 1620 <__libc_init_array+0x78>
    15b0:	e59f606c 	ldr	r6, [pc, #108]	; 1624 <__libc_init_array+0x7c>
    15b4:	e0656006 	rsb	r6, r5, r6
    15b8:	e1b06146 	asrs	r6, r6, #2
    15bc:	12455004 	subne	r5, r5, #4
    15c0:	13a04000 	movne	r4, #0
    15c4:	0a000005 	beq	15e0 <__libc_init_array+0x38>
    15c8:	e5b53004 	ldr	r3, [r5, #4]!
    15cc:	e2844001 	add	r4, r4, #1
    15d0:	e1a0e00f 	mov	lr, pc
    15d4:	e12fff13 	bx	r3
    15d8:	e1560004 	cmp	r6, r4
    15dc:	1afffff9 	bne	15c8 <__libc_init_array+0x20>
    15e0:	e59f5040 	ldr	r5, [pc, #64]	; 1628 <__libc_init_array+0x80>
    15e4:	e59f6040 	ldr	r6, [pc, #64]	; 162c <__libc_init_array+0x84>
    15e8:	e0656006 	rsb	r6, r5, r6
    15ec:	eb012cd8 	bl	4c954 <_init>
    15f0:	e1b06146 	asrs	r6, r6, #2
    15f4:	12455004 	subne	r5, r5, #4
    15f8:	13a04000 	movne	r4, #0
    15fc:	0a000005 	beq	1618 <__libc_init_array+0x70>
    1600:	e5b53004 	ldr	r3, [r5, #4]!
    1604:	e2844001 	add	r4, r4, #1
    1608:	e1a0e00f 	mov	lr, pc
    160c:	e12fff13 	bx	r3
    1610:	e1560004 	cmp	r6, r4
    1614:	1afffff9 	bne	1600 <__libc_init_array+0x58>
    1618:	e8bd4070 	pop	{r4, r5, r6, lr}
    161c:	e12fff1e 	bx	lr
    1620:	0004c96c 	.word	0x0004c96c
    1624:	0004c96c 	.word	0x0004c96c
    1628:	0004c96c 	.word	0x0004c96c
    162c:	0004c974 	.word	0x0004c974

Disassembly of section .rodata:

00001634 <title>:
	...
    e100:	ffffffff ffffffff ffffffff ffffffff     ................
    e110:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    e200:	ffff0000 ffffffff ffffffff ffffffff     ................
    e210:	ffffffff ffffffff ffffffff ffffffff     ................
    e220:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e380:	ffffffff ffffffff ffffffff ffffffff     ................
    e390:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    e480:	ffff0000 ffffffff ffffffff ffffffff     ................
    e490:	ffffffff ffffffff ffffffff ffffffff     ................
    e4a0:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e600:	ffffffff ffffffff ffffffff ffffffff     ................
    e610:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    e700:	ffff0000 ffffffff ffffffff ffffffff     ................
    e710:	ffffffff ffffffff ffffffff ffffffff     ................
    e720:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e878:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    e898:	ffffffff ffffffff ffffffff 00000000     ................
	...
    e980:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    e9a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eaf8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eb18:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ec00:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ec24:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ed78:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ed98:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ee80:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eea4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    eff8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f018:	ffffffff ffffffff ffffffff 00000000     ................
	...
    f100:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f124:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f278:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f298:	ffffffff ffffffff ffffffff 00000000     ................
	...
    f380:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f3a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f4f8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f518:	ffffffff ffffffff ffffffff 00000000     ................
	...
    f600:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f624:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f778:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f7b0:	ffffffff ffffffff ffffffff ffffffff     ................
    f7c0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    f7e4:	ffff0000 ffffffff ffffffff ffffffff     ................
    f7f4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    f814:	ffff0000 ffffffff ffffffff ffffffff     ................
    f824:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    f840:	ffffffff ffffffff ffffffff ffffffff     ................
    f850:	ffffffff ffffffff 00000000 00000000     ................
	...
    f880:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f8a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    f8c4:	ffffffff ffffffff ffffffff ffffffff     ................
    f8d4:	ffffffff ffffffff 00000000 00000000     ................
	...
    f8f4:	ffffffff ffffffff ffffffff ffffffff     ................
    f904:	ffffffff ffffffff 00000000 00000000     ................
	...
    f91c:	ffff0000 ffffffff ffffffff ffffffff     ................
    f92c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    f948:	ffffffff ffffffff ffffffff ffffffff     ................
    f958:	ffffffff ffffffff 00000000 00000000     ................
	...
    f9f8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fa30:	ffffffff ffffffff ffffffff ffffffff     ................
    fa40:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    fa64:	ffff0000 ffffffff ffffffff ffffffff     ................
    fa74:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fa94:	ffff0000 ffffffff ffffffff ffffffff     ................
    faa4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fac0:	ffffffff ffffffff ffffffff ffffffff     ................
    fad0:	ffffffff ffffffff 00000000 00000000     ................
	...
    fb00:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fb24:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fb44:	ffffffff ffffffff ffffffff ffffffff     ................
    fb54:	ffffffff ffffffff 00000000 00000000     ................
	...
    fb74:	ffffffff ffffffff ffffffff ffffffff     ................
    fb84:	ffffffff ffffffff 00000000 00000000     ................
	...
    fb9c:	ffff0000 ffffffff ffffffff ffffffff     ................
    fbac:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fbc8:	ffffffff ffffffff ffffffff ffffffff     ................
    fbd8:	ffffffff ffffffff 00000000 00000000     ................
	...
    fc78:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fcb0:	ffffffff ffffffff ffffffff ffffffff     ................
    fcc0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
    fce4:	ffff0000 ffffffff ffffffff ffffffff     ................
    fcf4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fd14:	ffff0000 ffffffff ffffffff ffffffff     ................
    fd24:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fd40:	ffffffff ffffffff ffffffff ffffffff     ................
    fd50:	ffffffff ffffffff 00000000 00000000     ................
	...
    fd80:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fda4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    fdc4:	ffffffff ffffffff ffffffff ffffffff     ................
    fdd4:	ffffffff ffffffff 00000000 00000000     ................
	...
    fdf4:	ffffffff ffffffff ffffffff ffffffff     ................
    fe04:	ffffffff ffffffff 00000000 00000000     ................
	...
    fe1c:	ffff0000 ffffffff ffffffff ffffffff     ................
    fe2c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
    fe48:	ffffffff ffffffff ffffffff ffffffff     ................
    fe58:	ffffffff ffffffff 00000000 00000000     ................
	...
    ff00:	ffffffff ffffffff ffffffff ffffffff     ................
    ff10:	0000ffff 00000000 00000000 00000000     ................
	...
    ff30:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff48:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff60:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff78:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ff90:	ffffffff ffffffff ffffffff 00000000     ................
	...
    ffa8:	ffffffff ffffffff ffffffff 00000000     ................
    ffb8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
    ffd0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10000:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10024:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1003c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10054:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1006c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10084:	ffff0000 ffffffff ffffffff 0000ffff     ................
   10094:	00000000 ffffffff ffffffff ffffffff     ................
	...
   100b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   100c8:	ffffffff ffffffff ffffffff ffffffff     ................
   100d8:	0000ffff 00000000 00000000 00000000     ................
	...
   10180:	ffffffff ffffffff ffffffff ffffffff     ................
   10190:	0000ffff 00000000 00000000 00000000     ................
	...
   101b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   101c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   101e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   101f8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10210:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10228:	ffffffff ffffffff ffffffff 00000000     ................
   10238:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10250:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10280:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102bc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102d4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   102ec:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10304:	ffff0000 ffffffff ffffffff 0000ffff     ................
   10314:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10330:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10348:	ffffffff ffffffff ffffffff ffffffff     ................
   10358:	0000ffff 00000000 00000000 00000000     ................
	...
   10400:	ffffffff ffffffff ffffffff ffffffff     ................
   10410:	0000ffff 00000000 00000000 00000000     ................
	...
   10430:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10448:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10460:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10478:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10490:	ffffffff ffffffff ffffffff 00000000     ................
	...
   104a8:	ffffffff ffffffff ffffffff 00000000     ................
   104b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   104d0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10500:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10524:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1053c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10554:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1056c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10584:	ffff0000 ffffffff ffffffff 0000ffff     ................
   10594:	00000000 ffffffff ffffffff ffffffff     ................
	...
   105b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   105c8:	ffffffff ffffffff ffffffff ffffffff     ................
   105d8:	0000ffff 00000000 00000000 00000000     ................
	...
   1068c:	ffffffff ffffffff ffffffff ffffffff     ................
   1069c:	0000ffff 00000000 00000000 00000000     ................
   106ac:	00000000 ffffffff ffffffff ffffffff     ................
	...
   106c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   106ec:	ffffffff ffffffff ffffffff ffffffff     ................
   106fc:	ffffffff ffffffff 00000000 00000000     ................
   1070c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10738:	ffff0000 ffffffff ffffffff ffffffff     ................
   10748:	ffffffff ffffffff ffffffff ffffffff     ................
   10758:	ffffffff 0000ffff 00000000 00000000     ................
	...
   10780:	ffff0000 ffffffff ffffffff ffffffff     ................
   10790:	ffffffff ffffffff ffffffff ffffffff     ................
   107a0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   107c8:	ffff0000 ffffffff ffffffff ffffffff     ................
   107d8:	ffffffff ffffffff 0000ffff 00000000     ................
   107e8:	00000000 ffff0000 ffffffff ffffffff     ................
   107f8:	0000ffff 00000000 00000000 00000000     ................
	...
   10818:	ffffffff ffffffff ffffffff ffffffff     ................
   10828:	ffffffff ffffffff ffffffff ffffffff     ................
   10838:	ffffffff 00000000 00000000 00000000     ................
   10848:	ffffffff ffffffff ffffffff 00000000     ................
	...
   1090c:	ffffffff ffffffff ffffffff ffffffff     ................
   1091c:	0000ffff 00000000 00000000 00000000     ................
   1092c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10948:	ffffffff ffffffff ffffffff 00000000     ................
	...
   1096c:	ffffffff ffffffff ffffffff ffffffff     ................
   1097c:	ffffffff ffffffff 00000000 00000000     ................
   1098c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   109b8:	ffff0000 ffffffff ffffffff ffffffff     ................
   109c8:	ffffffff ffffffff ffffffff ffffffff     ................
   109d8:	ffffffff 0000ffff 00000000 00000000     ................
	...
   10a00:	ffff0000 ffffffff ffffffff ffffffff     ................
   10a10:	ffffffff ffffffff ffffffff ffffffff     ................
   10a20:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10a48:	ffff0000 ffffffff ffffffff ffffffff     ................
   10a58:	ffffffff ffffffff 0000ffff 00000000     ................
   10a68:	00000000 ffff0000 ffffffff ffffffff     ................
   10a78:	0000ffff 00000000 00000000 00000000     ................
	...
   10a98:	ffffffff ffffffff ffffffff ffffffff     ................
   10aa8:	ffffffff ffffffff ffffffff ffffffff     ................
   10ab8:	ffffffff 00000000 00000000 00000000     ................
   10ac8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10b8c:	ffffffff ffffffff ffffffff ffffffff     ................
   10b9c:	0000ffff 00000000 00000000 00000000     ................
   10bac:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10bc8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10bec:	ffffffff ffffffff ffffffff ffffffff     ................
   10bfc:	ffffffff ffffffff 00000000 00000000     ................
   10c0c:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10c38:	ffff0000 ffffffff ffffffff ffffffff     ................
   10c48:	ffffffff ffffffff ffffffff ffffffff     ................
   10c58:	ffffffff 0000ffff 00000000 00000000     ................
	...
   10c80:	ffff0000 ffffffff ffffffff ffffffff     ................
   10c90:	ffffffff ffffffff ffffffff ffffffff     ................
   10ca0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10cc8:	ffff0000 ffffffff ffffffff ffffffff     ................
   10cd8:	ffffffff ffffffff 0000ffff 00000000     ................
   10ce8:	00000000 ffff0000 ffffffff ffffffff     ................
   10cf8:	0000ffff 00000000 00000000 00000000     ................
	...
   10d18:	ffffffff ffffffff ffffffff ffffffff     ................
   10d28:	ffffffff ffffffff ffffffff ffffffff     ................
   10d38:	ffffffff 00000000 00000000 00000000     ................
   10d48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e18:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10e64:	ffff0000 ffffffff ffffffff 0000ffff     ................
   10e74:	00000000 ffffffff ffffffff ffffffff     ................
	...
   10e90:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10eb8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f00:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f24:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f44:	ffffffff ffffffff ffffffff 00000000     ................
   10f54:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f6c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   10f98:	ffffffff ffffffff ffffffff 00000000     ................
	...
   10fc8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11098:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   110e4:	ffff0000 ffffffff ffffffff 0000ffff     ................
   110f4:	00000000 ffffffff ffffffff ffffffff     ................
	...
   11110:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11138:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11180:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   111a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   111c4:	ffffffff ffffffff ffffffff 00000000     ................
   111d4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   111ec:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11218:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11248:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11318:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11330:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11348:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11364:	ffff0000 ffffffff ffffffff 0000ffff     ................
   11374:	00000000 ffffffff ffffffff ffffffff     ................
	...
   11390:	ffffffff ffffffff ffffffff 00000000     ................
	...
   113b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11400:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11424:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11444:	ffffffff ffffffff ffffffff 00000000     ................
   11454:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1146c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11498:	ffffffff ffffffff ffffffff 00000000     ................
	...
   114c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11578:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11598:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115e0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   115f8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11610:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11638:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11680:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116bc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116d4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   116ec:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11718:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11748:	ffffffff ffffffff ffffffff 00000000     ................
	...
   117f8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11818:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11830:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11848:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11860:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11878:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11890:	ffffffff ffffffff ffffffff 00000000     ................
	...
   118b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11900:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11924:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1193c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11954:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1196c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11998:	ffffffff ffffffff ffffffff 00000000     ................
	...
   119c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11a78:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11a98:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ab0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ac8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ae0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11af8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11b10:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11b38:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11b80:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11ba4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11bbc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11bd4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11bec:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11c18:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11c48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11cf8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11d18:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d60:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d78:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11d90:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11da8:	ffffffff ffffffff ffffffff 00000000     ................
   11db8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11dd0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e00:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e24:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e3c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e54:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e6c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11e84:	ffff0000 ffffffff ffffffff 0000ffff     ................
   11e94:	00000000 ffffffff ffffffff ffffffff     ................
	...
   11eb0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ec8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11f78:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   11f98:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11fb0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11fc8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11fe0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   11ff8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12010:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12028:	ffffffff ffffffff ffffffff 00000000     ................
   12038:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12050:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12080:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120a4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120bc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120d4:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   120ec:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12104:	ffff0000 ffffffff ffffffff 0000ffff     ................
   12114:	00000000 ffffffff ffffffff ffffffff     ................
	...
   12130:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12148:	ffffffff ffffffff ffffffff 00000000     ................
	...
   121f8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12218:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12230:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12248:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12260:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12278:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12290:	ffffffff ffffffff ffffffff 00000000     ................
	...
   122a8:	ffffffff ffffffff ffffffff 00000000     ................
   122b8:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   122d0:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12300:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12324:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1233c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12354:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1236c:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12384:	ffff0000 ffffffff ffffffff 0000ffff     ................
   12394:	00000000 ffffffff ffffffff ffffffff     ................
	...
   123b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   123c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12480:	ffffffff ffffffff ffffffff ffffffff     ................
   12490:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   124b0:	ffffffff ffffffff ffffffff ffffffff     ................
   124c0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   124e4:	ffff0000 ffffffff ffffffff ffffffff     ................
   124f4:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   12514:	ffff0000 ffffffff ffffffff ffffffff     ................
   12524:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12540:	ffffffff ffffffff ffffffff ffffffff     ................
   12550:	ffffffff ffffffff 00000000 00000000     ................
	...
   12580:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   125ac:	ffffffff ffffffff ffffffff 00000000     ................
	...
   125c4:	ffffffff ffffffff ffffffff ffffffff     ................
   125d4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   125f4:	ffffffff ffffffff ffffffff ffffffff     ................
   12604:	ffffffff ffffffff 00000000 00000000     ................
	...
   1261c:	ffff0000 ffffffff ffffffff ffffffff     ................
   1262c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12648:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12700:	ffffffff ffffffff ffffffff ffffffff     ................
   12710:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12730:	ffffffff ffffffff ffffffff ffffffff     ................
   12740:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12764:	ffff0000 ffffffff ffffffff ffffffff     ................
   12774:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   12794:	ffff0000 ffffffff ffffffff ffffffff     ................
   127a4:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   127c0:	ffffffff ffffffff ffffffff ffffffff     ................
   127d0:	ffffffff ffffffff 00000000 00000000     ................
	...
   12800:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   1282c:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12844:	ffffffff ffffffff ffffffff ffffffff     ................
   12854:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12874:	ffffffff ffffffff ffffffff ffffffff     ................
   12884:	ffffffff ffffffff 00000000 00000000     ................
	...
   1289c:	ffff0000 ffffffff ffffffff ffffffff     ................
   128ac:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   128c8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12980:	ffffffff ffffffff ffffffff ffffffff     ................
   12990:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   129b0:	ffffffff ffffffff ffffffff ffffffff     ................
   129c0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   129e4:	ffff0000 ffffffff ffffffff ffffffff     ................
   129f4:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   12a14:	ffff0000 ffffffff ffffffff ffffffff     ................
   12a24:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12a40:	ffffffff ffffffff ffffffff ffffffff     ................
   12a50:	ffffffff ffffffff 00000000 00000000     ................
	...
   12a80:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   12aac:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12ac4:	ffffffff ffffffff ffffffff ffffffff     ................
   12ad4:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   12af4:	ffffffff ffffffff ffffffff ffffffff     ................
   12b04:	ffffffff ffffffff 00000000 00000000     ................
	...
   12b1c:	ffff0000 ffffffff ffffffff ffffffff     ................
   12b2c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   12b48:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12c30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   12eb0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13130:	ffffffff ffffffff ffffffff 00000000     ................
	...
   133b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13630:	ffffffff ffffffff ffffffff 00000000     ................
	...
   138b0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13b30:	ffffffff ffffffff ffffffff 00000000     ................
	...
   13db0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   14030:	ffffffff ffffffff ffffffff 00000000     ................
	...
   156bc:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
   15704:	ffff0000 0000ffff 00000000 00000000     ................
   15714:	ffff0000 0000ffff 00000000 00000000     ................
	...
   15750:	ffffffff ffffffff 0000ffff 00000000     ................
   15760:	ffffffff 00000000 00000000 00000000     ................
   15770:	ffffffff 00000000 00000000 00000000     ................
	...
   157ac:	ffff0000 ffffffff ffffffff ffffffff     ................
   157bc:	0000ffff ffffffff 00000000 00000000     ................
	...
   157e8:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   15810:	ffff0000 0000ffff 00000000 00000000     ................
	...
   1593c:	ffff0000 0000ffff 00000000 ffff0000     ................
   1594c:	0000ffff 00000000 00000000 00000000     ................
	...
   15984:	ffff0000 0000ffff 00000000 00000000     ................
   15994:	ffff0000 0000ffff 00000000 00000000     ................
	...
   159cc:	ffff0000 0000ffff 00000000 ffffffff     ................
   159dc:	00000000 ffffffff 00000000 00000000     ................
   159ec:	00000000 ffffffff 00000000 00000000     ................
	...
   15a10:	ffffffff 00000000 00000000 00000000     ................
	...
   15a34:	ffffffff 00000000 00000000 ffffffff     ................
	...
   15a68:	ffffffff 00000000 00000000 00000000     ................
	...
   15a90:	ffff0000 0000ffff 00000000 00000000     ................
	...
   15bbc:	ffff0000 0000ffff 00000000 ffff0000     ................
   15bcc:	0000ffff 00000000 00000000 00000000     ................
	...
   15c08:	ffffffff 00000000 00000000 ffffffff     ................
	...
   15c4c:	ffff0000 0000ffff 00000000 ffffffff     ................
   15c5c:	00000000 ffffffff 00000000 00000000     ................
	...
   15c90:	ffffffff 00000000 00000000 00000000     ................
	...
   15cb4:	ffffffff 00000000 00000000 ffffffff     ................
	...
   15ce8:	ffffffff 00000000 00000000 00000000     ................
	...
   15d10:	ffff0000 0000ffff 00000000 00000000     ................
	...
   15e3c:	ffff0000 0000ffff 00000000 ffff0000     ................
   15e4c:	0000ffff 00000000 ffffffff ffffffff     ................
	...
   15e64:	ffffffff ffffffff 00000000 ffff0000     ................
   15e74:	ffffffff 0000ffff 00000000 00000000     ................
   15e84:	00000000 ffff0000 0000ffff ffff0000     ................
   15e94:	0000ffff 00000000 ffff0000 ffffffff     ................
   15ea4:	0000ffff 00000000 ffffffff 00000000     ................
   15eb4:	ffffffff 00000000 ffffffff ffffffff     ................
	...
   15ecc:	ffff0000 0000ffff 00000000 00000000     ................
   15edc:	00000000 ffffffff ffffffff 0000ffff     ................
   15eec:	00000000 ffffffff 00000000 ffffffff     ................
   15efc:	ffffffff 0000ffff 00000000 00000000     ................
   15f0c:	ffff0000 ffffffff 0000ffff ffff0000     ................
   15f1c:	ffffffff 0000ffff 00000000 00000000     ................
	...
   15f34:	ffffffff 00000000 00000000 ffffffff     ................
   15f44:	ffffffff 0000ffff 00000000 ffff0000     ................
   15f54:	ffffffff 0000ffff 00000000 00000000     ................
   15f64:	00000000 ffffffff 00000000 00000000     ................
   15f74:	00000000 ffff0000 ffffffff ffffffff     ................
	...
   15f8c:	ffffffff ffffffff 0000ffff 00000000     ................
	...
   160bc:	ffff0000 0000ffff 00000000 ffff0000     ................
   160cc:	0000ffff ffff0000 0000ffff ffff0000     ................
   160dc:	0000ffff ffff0000 0000ffff ffff0000     ................
   160ec:	0000ffff ffffffff 00000000 ffffffff     ................
	...
   1610c:	ffffffff ffffffff 00000000 00000000     ................
   1611c:	ffffffff 00000000 ffffffff 00000000     ................
   1612c:	ffffffff 00000000 ffffffff 00000000     ................
   1613c:	ffffffff 0000ffff 00000000 00000000     ................
   1614c:	00000000 ffffffff 0000ffff 00000000     ................
   1615c:	00000000 ffffffff 00000000 ffffffff     ................
   1616c:	00000000 ffffffff 00000000 ffffffff     ................
   1617c:	00000000 ffffffff 00000000 00000000     ................
   1618c:	00000000 ffffffff 00000000 ffffffff     ................
   1619c:	00000000 ffffffff 00000000 00000000     ................
	...
   161b4:	ffffffff 00000000 00000000 ffffffff     ................
   161c4:	00000000 ffffffff 00000000 ffffffff     ................
   161d4:	00000000 ffffffff 00000000 00000000     ................
   161e4:	00000000 ffffffff ffffffff ffffffff     ................
   161f4:	00000000 ffff0000 0000ffff ffff0000     ................
   16204:	0000ffff ffff0000 0000ffff ffff0000     ................
   16214:	0000ffff 00000000 00000000 00000000     ................
	...
   1633c:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
   16354:	ffff0000 ffffffff 0000ffff ffff0000     ................
   16364:	0000ffff 00000000 00000000 ffffffff     ................
   16374:	ffffffff ffffffff 00000000 00000000     ................
	...
   1638c:	ffff0000 0000ffff 00000000 00000000     ................
   1639c:	ffffffff 00000000 ffffffff 00000000     ................
   163ac:	ffffffff 00000000 ffffffff 00000000     ................
   163bc:	ffffffff 00000000 00000000 00000000     ................
	...
   163d4:	ffffffff 0000ffff 00000000 ffffffff     ................
   163e4:	00000000 ffffffff 00000000 ffffffff     ................
   163f4:	00000000 ffffffff 00000000 ffffffff     ................
	...
   16410:	ffffffff 00000000 ffffffff 00000000     ................
   16420:	ffffffff 00000000 00000000 00000000     ................
   16430:	00000000 ffffffff 00000000 00000000     ................
   16440:	ffffffff 00000000 ffffffff 00000000     ................
   16450:	ffffffff ffffffff ffffffff 00000000     ................
	...
   16468:	ffffffff 00000000 00000000 00000000     ................
   16478:	ffff0000 0000ffff ffff0000 0000ffff     ................
   16488:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   165bc:	ffff0000 0000ffff 00000000 ffff0000     ................
   165cc:	0000ffff 00000000 ffffffff ffff0000     ................
   165dc:	0000ffff ffff0000 0000ffff 00000000     ................
   165ec:	00000000 ffffffff 00000000 00000000     ................
	...
   1660c:	ffff0000 0000ffff 00000000 00000000     ................
   1661c:	ffffffff 00000000 ffffffff 00000000     ................
   1662c:	ffffffff 00000000 ffffffff 00000000     ................
   1663c:	ffffffff 00000000 00000000 00000000     ................
	...
   16658:	ffffffff 00000000 ffffffff 00000000     ................
   16668:	ffffffff 00000000 ffffffff 00000000     ................
   16678:	ffffffff 00000000 ffffffff 00000000     ................
	...
   16690:	ffffffff 00000000 ffffffff 00000000     ................
   166a0:	ffffffff 00000000 00000000 00000000     ................
   166b0:	00000000 ffffffff 00000000 00000000     ................
   166c0:	ffffffff 00000000 ffffffff 00000000     ................
   166d0:	ffffffff 00000000 00000000 00000000     ................
	...
   166e8:	ffffffff 00000000 00000000 00000000     ................
   166f8:	ffff0000 0000ffff ffff0000 0000ffff     ................
   16708:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   1683c:	ffff0000 0000ffff 00000000 ffff0000     ................
   1684c:	0000ffff ffff0000 0000ffff ffff0000     ................
   1685c:	0000ffff ffff0000 0000ffff 00000000     ................
   1686c:	00000000 ffffffff 00000000 00000000     ................
	...
   1688c:	ffff0000 0000ffff 00000000 00000000     ................
   1689c:	ffffffff 00000000 ffffffff 00000000     ................
   168ac:	ffffffff 00000000 ffffffff 00000000     ................
   168bc:	ffffffff 00000000 00000000 00000000     ................
   168cc:	ffff0000 0000ffff 00000000 ffffffff     ................
   168dc:	00000000 ffffffff 00000000 ffffffff     ................
   168ec:	00000000 ffffffff 00000000 ffffffff     ................
   168fc:	00000000 ffffffff 00000000 00000000     ................
   1690c:	00000000 ffffffff 00000000 ffffffff     ................
   1691c:	00000000 ffffffff 00000000 00000000     ................
	...
   16934:	ffffffff 00000000 00000000 ffffffff     ................
   16944:	00000000 ffffffff 00000000 ffffffff     ................
	...
   16968:	ffffffff 00000000 00000000 00000000     ................
   16978:	ffff0000 0000ffff ffff0000 0000ffff     ................
   16988:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   16abc:	ffff0000 0000ffff 00000000 ffff0000     ................
   16acc:	0000ffff ffff0000 0000ffff ffff0000     ................
   16adc:	0000ffff ffff0000 0000ffff ffff0000     ................
   16aec:	0000ffff ffffffff 00000000 ffffffff     ................
	...
   16b0c:	ffff0000 0000ffff 00000000 00000000     ................
   16b1c:	ffffffff 00000000 ffffffff 00000000     ................
   16b2c:	ffffffff 00000000 ffffffff 00000000     ................
   16b3c:	ffffffff 00000000 00000000 00000000     ................
   16b4c:	ffff0000 0000ffff 00000000 ffffffff     ................
   16b5c:	00000000 ffffffff 00000000 ffffffff     ................
   16b6c:	00000000 ffffffff 00000000 ffffffff     ................
   16b7c:	00000000 ffffffff 00000000 00000000     ................
   16b8c:	00000000 ffffffff 00000000 ffffffff     ................
   16b9c:	00000000 ffffffff 00000000 00000000     ................
	...
   16bb4:	ffffffff 00000000 00000000 ffffffff     ................
   16bc4:	00000000 ffffffff 00000000 ffffffff     ................
   16bd4:	00000000 ffffffff 00000000 00000000     ................
   16be4:	00000000 ffffffff 00000000 00000000     ................
   16bf4:	00000000 ffff0000 0000ffff ffff0000     ................
   16c04:	0000ffff ffff0000 0000ffff ffff0000     ................
   16c14:	0000ffff 00000000 00000000 00000000     ................
	...
   16d3c:	ffff0000 0000ffff 00000000 00000000     ................
   16d4c:	ffffffff 00000000 ffffffff ffffffff     ................
   16d5c:	0000ffff 00000000 ffffffff ffffffff     ................
   16d6c:	00000000 ffff0000 ffffffff 0000ffff     ................
	...
   16d8c:	ffff0000 0000ffff 00000000 00000000     ................
   16d9c:	ffff0000 ffffffff 0000ffff 00000000     ................
   16dac:	ffff0000 ffffffff ffffffff 00000000     ................
   16dbc:	ffffffff 00000000 00000000 00000000     ................
   16dcc:	00000000 ffffffff ffffffff 0000ffff     ................
   16ddc:	00000000 ffffffff 00000000 ffffffff     ................
   16dec:	00000000 ffffffff 00000000 ffffffff     ................
   16dfc:	ffffffff 0000ffff 00000000 00000000     ................
   16e0c:	00000000 ffff0000 0000ffff ffff0000     ................
   16e1c:	ffffffff 0000ffff 00000000 00000000     ................
	...
   16e34:	ffffffff 00000000 00000000 ffffffff     ................
   16e44:	00000000 ffffffff 00000000 ffff0000     ................
   16e54:	ffffffff 0000ffff 00000000 00000000     ................
   16e64:	00000000 ffffffff ffffffff ffffffff     ................
   16e74:	0000ffff ffff0000 0000ffff ffff0000     ................
   16e84:	0000ffff 00000000 ffffffff ffffffff     ................
   16e94:	0000ffff 00000000 00000000 00000000     ................
	...
   17078:	ffffffff 00000000 00000000 00000000     ................
	...
   172f8:	ffffffff 00000000 00000000 00000000     ................
	...
   17578:	ffffffff 00000000 00000000 00000000     ................
	...
   18b5c:	ffffffff ffffffff ffffffff 0000ffff     ................
   18b6c:	ffffffff 00000000 00000000 00000000     ................
	...
   18bbc:	ffff0000 ffffffff ffffffff 0000ffff     ................
	...
   18bd4:	ffff0000 ffffffff ffffffff ffffffff     ................
	...
   18bf8:	ffffffff 00000000 00000000 00000000     ................
	...
   18c2c:	ffff0000 0000ffff 00000000 ffff0000     ................
   18c3c:	0000ffff 00000000 ffff0000 0000ffff     ................
   18c4c:	ffffffff 00000000 00000000 00000000     ................
	...
   18c74:	ffffffff 00000000 00000000 00000000     ................
	...
   18ddc:	ffffffff 00000000 00000000 00000000     ................
   18dec:	ffffffff 00000000 00000000 00000000     ................
	...
   18e0c:	ffff0000 0000ffff 00000000 00000000     ................
   18e1c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   18e3c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   18e54:	ffff0000 0000ffff 00000000 ffff0000     ................
   18e64:	0000ffff 00000000 00000000 00000000     ................
   18e74:	00000000 ffffffff 00000000 00000000     ................
	...
   18e90:	ffffffff 00000000 00000000 00000000     ................
	...
   18eac:	ffff0000 0000ffff 00000000 ffff0000     ................
   18ebc:	0000ffff 00000000 ffff0000 0000ffff     ................
   18ecc:	ffffffff 00000000 00000000 00000000     ................
	...
   18ef4:	ffffffff 00000000 00000000 00000000     ................
	...
   1905c:	ffffffff 00000000 00000000 00000000     ................
	...
   1908c:	ffff0000 0000ffff 00000000 00000000     ................
   1909c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   190bc:	ffff0000 0000ffff 00000000 00000000     ................
	...
   190d4:	ffff0000 0000ffff 00000000 ffff0000     ................
   190e4:	0000ffff 00000000 00000000 00000000     ................
	...
   19110:	ffffffff 00000000 00000000 00000000     ................
	...
   1912c:	ffff0000 0000ffff 00000000 ffff0000     ................
   1913c:	0000ffff 00000000 ffff0000 0000ffff     ................
	...
   19174:	ffffffff 00000000 00000000 00000000     ................
	...
   192dc:	ffffffff 00000000 00000000 00000000     ................
   192ec:	ffffffff 00000000 ffffffff ffffffff     ................
   192fc:	00000000 ffffffff ffffffff 00000000     ................
   1930c:	ffffffff ffffffff 00000000 00000000     ................
   1931c:	ffffffff ffffffff 00000000 ffffffff     ................
   1932c:	ffffffff 00000000 00000000 00000000     ................
   1933c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   19354:	ffff0000 0000ffff 00000000 ffff0000     ................
   19364:	0000ffff ffff0000 ffffffff 0000ffff     ................
   19374:	00000000 ffffffff 00000000 ffffffff     ................
   19384:	ffffffff 0000ffff ffff0000 ffffffff     ................
   19394:	0000ffff ffff0000 ffffffff 0000ffff     ................
	...
   193b0:	ffffffff 00000000 ffffffff ffffffff     ................
   193c0:	00000000 ffffffff 00000000 ffffffff     ................
   193d0:	00000000 ffffffff ffffffff 0000ffff     ................
   193e0:	00000000 ffff0000 ffffffff 0000ffff     ................
   193f0:	00000000 ffffffff 00000000 00000000     ................
	...
   1955c:	ffffffff ffffffff ffffffff 00000000     ................
   1956c:	ffffffff 00000000 ffffffff 0000ffff     ................
   1957c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   1958c:	ffff0000 0000ffff 00000000 00000000     ................
   1959c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   195ac:	ffff0000 0000ffff 00000000 00000000     ................
   195bc:	ffff0000 ffffffff ffffffff 00000000     ................
	...
   195d4:	ffff0000 0000ffff 00000000 ffff0000     ................
   195e4:	0000ffff ffffffff 00000000 ffffffff     ................
   195f4:	00000000 ffffffff 00000000 ffffffff     ................
   19604:	00000000 ffffffff 00000000 ffffffff     ................
   19614:	00000000 ffffffff 00000000 ffffffff     ................
	...
   19630:	ffffffff 00000000 ffffffff ffffffff     ................
   19640:	00000000 ffffffff 00000000 ffffffff     ................
   19650:	00000000 ffffffff 00000000 ffffffff     ................
   19660:	00000000 ffffffff 00000000 ffffffff     ................
   19670:	00000000 ffffffff 00000000 00000000     ................
	...
   197dc:	ffffffff 00000000 00000000 00000000     ................
   197ec:	ffffffff 00000000 ffffffff 00000000     ................
   197fc:	ffff0000 0000ffff 00000000 00000000     ................
   1980c:	ffff0000 0000ffff 00000000 00000000     ................
   1981c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   1982c:	ffff0000 0000ffff 00000000 00000000     ................
   1983c:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   19854:	ffff0000 ffffffff ffffffff ffffffff     ................
   19864:	00000000 ffffffff 00000000 ffffffff     ................
   19874:	00000000 ffffffff 00000000 ffffffff     ................
   19884:	00000000 ffffffff 00000000 ffffffff     ................
   19894:	00000000 ffffffff 00000000 00000000     ................
	...
   198b0:	ffff0000 0000ffff 0000ffff ffff0000     ................
   198c0:	ffff0000 0000ffff 00000000 ffffffff     ................
   198d0:	00000000 ffffffff 00000000 ffffffff     ................
   198e0:	00000000 ffffffff 00000000 00000000     ................
   198f0:	00000000 ffffffff 00000000 00000000     ................
	...
   19a5c:	ffffffff 00000000 00000000 00000000     ................
   19a6c:	ffffffff 00000000 ffffffff 00000000     ................
   19a7c:	00000000 ffffffff ffffffff 00000000     ................
   19a8c:	ffff0000 0000ffff 00000000 00000000     ................
   19a9c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19aac:	ffff0000 0000ffff 00000000 00000000     ................
	...
   19ac4:	ffff0000 0000ffff 00000000 00000000     ................
   19ad4:	ffff0000 0000ffff 00000000 00000000     ................
   19ae4:	00000000 ffffffff 00000000 ffffffff     ................
   19af4:	00000000 ffffffff 00000000 ffffffff     ................
   19b04:	00000000 ffffffff 00000000 ffffffff     ................
   19b14:	00000000 ffff0000 ffffffff 0000ffff     ................
	...
   19b30:	ffff0000 ffffffff 0000ffff ffff0000     ................
   19b40:	ffffffff 0000ffff 00000000 ffffffff     ................
   19b50:	00000000 ffffffff 00000000 ffffffff     ................
   19b60:	00000000 ffff0000 ffffffff 0000ffff     ................
   19b70:	00000000 ffffffff 00000000 00000000     ................
	...
   19cdc:	ffffffff 00000000 00000000 00000000     ................
   19cec:	ffffffff 00000000 ffffffff 00000000     ................
	...
   19d04:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   19d1c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19d2c:	ffff0000 0000ffff 00000000 00000000     ................
	...
   19d44:	ffff0000 0000ffff 00000000 00000000     ................
   19d54:	ffff0000 0000ffff 00000000 00000000     ................
   19d64:	00000000 ffffffff 00000000 ffffffff     ................
   19d74:	00000000 ffffffff 00000000 ffffffff     ................
   19d84:	00000000 ffffffff 00000000 ffffffff     ................
	...
   19da0:	ffffffff 00000000 00000000 00000000     ................
   19db0:	00000000 ffffffff 00000000 00000000     ................
   19dc0:	ffffffff 00000000 00000000 ffffffff     ................
   19dd0:	00000000 ffffffff 00000000 ffffffff     ................
	...
   19dec:	ffffffff 00000000 00000000 00000000     ................
	...
   19f5c:	ffffffff 00000000 00000000 00000000     ................
   19f6c:	ffffffff 00000000 ffffffff 00000000     ................
   19f7c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19f8c:	ffff0000 0000ffff 00000000 00000000     ................
   19f9c:	ffff0000 0000ffff ffff0000 0000ffff     ................
   19fac:	ffff0000 0000ffff 00000000 00000000     ................
   19fbc:	ffff0000 0000ffff ffff0000 0000ffff     ................
	...
   19fd4:	ffff0000 0000ffff 00000000 00000000     ................
   19fe4:	00000000 ffffffff 00000000 ffffffff     ................
   19ff4:	00000000 ffffffff 00000000 ffffffff     ................
   1a004:	00000000 ffffffff 00000000 ffffffff     ................
   1a014:	00000000 ffffffff 00000000 ffffffff     ................
	...
   1a034:	ffffffff 00000000 00000000 ffffffff     ................
	...
   1a04c:	ffffffff 00000000 ffffffff 00000000     ................
   1a05c:	ffffffff 00000000 ffffffff 00000000     ................
   1a06c:	ffffffff 00000000 ffffffff 00000000     ................
	...
   1a1dc:	ffffffff 00000000 00000000 00000000     ................
   1a1ec:	ffffffff 00000000 ffffffff 00000000     ................
   1a1fc:	00000000 ffffffff ffffffff 00000000     ................
   1a20c:	00000000 ffffffff 00000000 00000000     ................
   1a21c:	00000000 ffffffff 00000000 ffffffff     ................
   1a22c:	ffffffff 00000000 00000000 00000000     ................
   1a23c:	00000000 ffffffff ffffffff 00000000     ................
	...
   1a254:	ffff0000 0000ffff 00000000 00000000     ................
   1a264:	00000000 ffff0000 ffffffff 0000ffff     ................
   1a274:	00000000 ffffffff 00000000 ffffffff     ................
   1a284:	00000000 ffffffff 00000000 ffff0000     ................
   1a294:	0000ffff ffff0000 ffffffff 0000ffff     ................
	...
   1a2b4:	ffffffff 00000000 00000000 ffffffff     ................
	...
   1a2cc:	ffffffff 00000000 ffffffff 00000000     ................
   1a2dc:	ffffffff 00000000 ffff0000 ffffffff     ................
   1a2ec:	0000ffff 00000000 ffffffff 00000000     ................
	...

00026e34 <ship>:
	...
   26e44:	ffffffff 00000000 00000000 00000000     ................
	...
   26e64:	ffff0000 ffffffff 0000ffff 00000000     ................
	...
   26e88:	ffffffff 00000000 ffffffff 00000000     ................
   26e98:	00200000 00200841 00000000 00200000     .. .A. ....... .
   26ea8:	ffff0000 0000ffff 08410000 ffff0000     ..........A.....
   26eb8:	0000ffff 00000000 00000000 00000000     ................
   26ec8:	00000000 ffffffff 00000000 00000000     ................
   26ed8:	00000000 ffffffff 00000000 00000000     ................
   26ee8:	00000841 00000000 0000ffdf 00000000     A...............
	...
   26f00:	ffff0000 00000000 00000000 00000000     ................
   26f10:	00000000 0000ffff 00000000 00000000     ................
   26f20:	00000000 ffff0000 00000000 00000000     ................
	...
   26f38:	0000ffff 00000000 00000000 00000000     ................
   26f48:	ffff0000 00000000 00000000 00000000     ................
   26f58:	00000000 0000ffff 00000000 00000000     ................
   26f68:	00000000 ffff0000 00000000 00000000     ................
	...
   26f80:	0000ffff 00000000 00000000 00000000     ................
   26f90:	ffff0000 00000000 00000000 00000000     ................
   26fa0:	00000000 0000ffff 00000000 00000000     ................
   26fb0:	00000000 ffff0000 00000000 00200000     .............. .
   26fc0:	00000000 00000020 0000ffff 00000000     .... ...........
	...
   26fd8:	ffff0000 00000000 00000000 00000000     ................
   26fe8:	00000000 0000ffff 00000000 00000000     ................
   26ff8:	00000000 ffff0000 00000000 00000000     ................
   27008:	00000000 ffff0000 0000ffff 00000000     ................
	...
   27020:	ffff0000 0000ffff 00000000 ffff0000     ................
   27030:	ffffffff 00000000 00000000 00200000     .............. .
	...
   27048:	ffffffff 00000000 ffff0000 0000ffff     ................
   27058:	00000000 00000020 00000000 00000000     .... ...........
   27068:	00000000 ffff0000 0000ffff ffffffff     ................
	...
   27094:	ffffffff ffffffff 0000ffff 00000000     ................
   270a4:	ffffffff ffffffff ffffffff 00000000     ................
   270b4:	ffff0000 ffffffff ffff0000 ffffffff     ................
   270c4:	ffff0000 ffffffff ffffffff ffffffff     ................
   270d4:	0000ffff ffffffff 0000ffff 00000000     ................
   270e4:	ffff0000 ffff0000 00000000 00000000     ................
   270f4:	00000000 0000ffff 0000ffff 00000000     ................
   27104:	00000000 ffff0000 ffffffff 00000000     ................
	...
   2711c:	ffffffff 0000ffff 00000000 00000000     ................
   2712c:	00000000 0000ffff 00000000 00000000     ................
	...

0002714c <end1>:
	...
   352cc:	ffffffff ffffffff ffffffff ffffffff     ................
   352dc:	ffffffff ffffffff ffffffff 00000000     ................
   352ec:	00000000 ffffffff ffffffff 00000000     ................
	...
   3538c:	ffffffff ffffffff 00000000 00000000     ................
	...
   353b0:	ffffffff ffffffff 00000000 00000000     ................
	...
   353c8:	ffffffff ffffffff 00000000 00000000     ................
	...
   353e0:	ffffffff ffffffff 00000000 ffffffff     ................
   353f0:	ffffffff 00000000 00000000 00000000     ................
	...
   3554c:	ffffffff ffffffff ffffffff ffffffff     ................
   3555c:	ffffffff ffffffff ffffffff 00000000     ................
   3556c:	00000000 ffffffff ffffffff 00000000     ................
	...
   3560c:	ffffffff ffffffff 00000000 00000000     ................
	...
   35630:	ffffffff ffffffff 00000000 00000000     ................
	...
   35648:	ffffffff ffffffff 00000000 00000000     ................
	...
   35660:	ffffffff ffffffff 00000000 ffffffff     ................
   35670:	ffffffff 00000000 00000000 00000000     ................
	...
   357cc:	ffffffff ffffffff 00000000 00000000     ................
	...
   357e4:	ffffffff ffffffff 00000000 ffffffff     ................
   357f4:	ffffffff 00000000 00000000 00000000     ................
	...
   35884:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   358b0:	ffffffff ffffffff 00000000 00000000     ................
	...
   358c8:	ffffffff ffffffff 00000000 00000000     ................
	...
   358e0:	ffffffff ffffffff 00000000 ffffffff     ................
   358f0:	ffffffff 00000000 00000000 00000000     ................
	...
   35a4c:	ffffffff ffffffff 00000000 00000000     ................
	...
   35a64:	ffffffff ffffffff 00000000 ffffffff     ................
   35a74:	ffffffff 00000000 00000000 00000000     ................
	...
   35b04:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   35b30:	ffffffff ffffffff 00000000 00000000     ................
	...
   35b48:	ffffffff ffffffff 00000000 00000000     ................
	...
   35b60:	ffffffff ffffffff 00000000 ffffffff     ................
   35b70:	ffffffff 00000000 00000000 00000000     ................
	...
   35ccc:	ffffffff ffffffff 00000000 00000000     ................
	...
   35ce4:	ffffffff ffffffff 00000000 ffffffff     ................
   35cf4:	ffffffff 00000000 00000000 00000000     ................
	...
   35d8c:	ffffffff ffffffff 00000000 00000000     ................
	...
   35db0:	ffffffff ffffffff 00000000 00000000     ................
	...
   35dc8:	ffffffff ffffffff 00000000 00000000     ................
	...
   35de0:	ffffffff ffffffff 00000000 00000000     ................
	...
   35f4c:	ffffffff ffffffff 00000000 00000000     ................
	...
   35f64:	ffffffff ffffffff 00000000 ffffffff     ................
   35f74:	ffffffff 00000000 00000000 00000000     ................
	...
   3600c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36030:	ffffffff ffffffff 00000000 00000000     ................
	...
   36048:	ffffffff ffffffff 00000000 00000000     ................
	...
   36060:	ffffffff ffffffff 00000000 00000000     ................
	...
   361cc:	ffffffff ffffffff 00000000 00000000     ................
	...
   361e4:	ffffffff ffffffff 00000000 ffffffff     ................
   361f4:	ffffffff 00000000 00000000 00000000     ................
   36204:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3621c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36234:	ffffffff ffffffff 00000000 00000000     ................
   36244:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   36260:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3628c:	ffffffff ffffffff 00000000 00000000     ................
	...
   362b4:	ffffffff ffffffff 00000000 00000000     ................
   362c4:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   362dc:	ffffffff ffffffff 00000000 00000000     ................
   362ec:	ffffffff ffffffff 00000000 00000000     ................
   362fc:	ffffffff ffffffff ffffffff ffffffff     ................
   3630c:	ffffffff 00000000 00000000 00000000     ................
   3631c:	00000000 ffffffff ffffffff ffffffff     ................
   3632c:	ffffffff 00000000 00000000 00000000     ................
	...
   3644c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36464:	ffffffff ffffffff 00000000 ffffffff     ................
   36474:	ffffffff 00000000 00000000 00000000     ................
   36484:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3649c:	ffffffff ffffffff 00000000 00000000     ................
	...
   364b4:	ffffffff ffffffff 00000000 00000000     ................
   364c4:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   364e0:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3650c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36534:	ffffffff ffffffff 00000000 00000000     ................
   36544:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3655c:	ffffffff ffffffff 00000000 00000000     ................
   3656c:	ffffffff ffffffff 00000000 00000000     ................
   3657c:	ffffffff ffffffff ffffffff ffffffff     ................
   3658c:	ffffffff 00000000 00000000 00000000     ................
   3659c:	00000000 ffffffff ffffffff ffffffff     ................
   365ac:	ffffffff 00000000 00000000 00000000     ................
	...
   366cc:	ffffffff ffffffff 00000000 00000000     ................
	...
   366e4:	ffffffff ffffffff 00000000 ffffffff     ................
   366f4:	ffffffff 00000000 00000000 ffffffff     ................
   36704:	ffffffff 00000000 00000000 ffffffff     ................
   36714:	ffffffff 00000000 ffffffff ffffffff     ................
	...
   36734:	ffffffff ffffffff 00000000 ffffffff     ................
   36744:	ffffffff 00000000 00000000 ffffffff     ................
   36754:	ffffffff 00000000 00000000 ffffffff     ................
   36764:	ffffffff ffffffff 00000000 00000000     ................
	...
   3678c:	ffffffff ffffffff 00000000 00000000     ................
	...
   367b4:	ffffffff ffffffff 00000000 00000000     ................
   367c4:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   367dc:	ffffffff ffffffff 00000000 00000000     ................
   367ec:	ffffffff ffffffff 00000000 00000000     ................
   367fc:	ffffffff ffffffff 00000000 00000000     ................
   3680c:	ffffffff ffffffff 00000000 00000000     ................
   3681c:	ffffffff ffffffff 00000000 00000000     ................
   3682c:	ffffffff ffffffff 00000000 00000000     ................
	...
   3694c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36964:	ffffffff ffffffff 00000000 ffffffff     ................
   36974:	ffffffff 00000000 00000000 ffffffff     ................
   36984:	ffffffff 00000000 00000000 ffffffff     ................
   36994:	ffffffff 00000000 ffffffff ffffffff     ................
	...
   369b4:	ffffffff ffffffff 00000000 ffffffff     ................
   369c4:	ffffffff 00000000 00000000 ffffffff     ................
   369d4:	ffffffff 00000000 00000000 ffffffff     ................
   369e4:	ffffffff ffffffff 00000000 00000000     ................
	...
   36a0c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36a34:	ffffffff ffffffff 00000000 00000000     ................
   36a44:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   36a5c:	ffffffff ffffffff 00000000 00000000     ................
   36a6c:	ffffffff ffffffff 00000000 00000000     ................
   36a7c:	ffffffff ffffffff 00000000 00000000     ................
   36a8c:	ffffffff ffffffff 00000000 00000000     ................
   36a9c:	ffffffff ffffffff 00000000 00000000     ................
   36aac:	ffffffff ffffffff 00000000 00000000     ................
	...
   36bcc:	ffffffff ffffffff ffffffff ffffffff     ................
   36bdc:	ffffffff ffffffff ffffffff 00000000     ................
   36bec:	00000000 ffffffff ffffffff 00000000     ................
	...
   36c08:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   36c20:	ffffffff ffffffff 00000000 00000000     ................
   36c30:	ffffffff ffffffff 00000000 00000000     ................
   36c40:	ffffffff ffffffff ffffffff ffffffff     ................
   36c50:	ffffffff ffffffff 00000000 00000000     ................
   36c60:	ffffffff ffffffff 00000000 00000000     ................
	...
   36c8c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36cb8:	ffffffff ffffffff 00000000 ffffffff     ................
	...
   36cd0:	ffffffff 00000000 ffffffff ffffffff     ................
	...
   36cec:	ffffffff ffffffff 00000000 00000000     ................
   36cfc:	ffffffff ffffffff 00000000 00000000     ................
   36d0c:	ffffffff ffffffff 00000000 00000000     ................
   36d1c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36e4c:	ffffffff ffffffff ffffffff ffffffff     ................
   36e5c:	ffffffff ffffffff ffffffff 00000000     ................
   36e6c:	00000000 ffffffff ffffffff 00000000     ................
	...
   36e88:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   36ea0:	ffffffff ffffffff 00000000 00000000     ................
   36eb0:	ffffffff ffffffff 00000000 00000000     ................
   36ec0:	ffffffff ffffffff ffffffff ffffffff     ................
   36ed0:	ffffffff ffffffff 00000000 00000000     ................
   36ee0:	ffffffff ffffffff 00000000 00000000     ................
	...
   36f0c:	ffffffff ffffffff 00000000 00000000     ................
	...
   36f38:	ffffffff ffffffff 00000000 ffffffff     ................
	...
   36f50:	ffffffff 00000000 ffffffff ffffffff     ................
	...
   36f6c:	ffffffff ffffffff 00000000 00000000     ................
   36f7c:	ffffffff ffffffff 00000000 00000000     ................
   36f8c:	ffffffff ffffffff 00000000 00000000     ................
   36f9c:	ffffffff ffffffff 00000000 00000000     ................
	...
   370cc:	ffffffff ffffffff 00000000 00000000     ................
	...
   370f0:	ffffffff ffffffff 00000000 00000000     ................
   37100:	00000000 ffffffff ffffffff 00000000     ................
   37110:	ffffffff ffffffff 00000000 00000000     ................
   37120:	ffffffff ffffffff 00000000 00000000     ................
   37130:	ffffffff ffffffff 00000000 00000000     ................
   37140:	ffffffff ffffffff 00000000 00000000     ................
	...
   37160:	ffffffff ffffffff 00000000 00000000     ................
	...
   3718c:	ffffffff ffffffff 00000000 00000000     ................
	...
   371b8:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   371d0:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   371ec:	ffffffff ffffffff 00000000 00000000     ................
   371fc:	ffffffff ffffffff 00000000 00000000     ................
   3720c:	ffffffff ffffffff 00000000 00000000     ................
   3721c:	00000000 ffffffff ffffffff ffffffff     ................
   3722c:	ffffffff 00000000 00000000 00000000     ................
	...
   3734c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37370:	ffffffff ffffffff 00000000 00000000     ................
   37380:	00000000 ffffffff ffffffff 00000000     ................
   37390:	ffffffff ffffffff 00000000 00000000     ................
   373a0:	ffffffff ffffffff 00000000 00000000     ................
   373b0:	ffffffff ffffffff 00000000 00000000     ................
   373c0:	ffffffff ffffffff 00000000 00000000     ................
	...
   373e0:	ffffffff ffffffff 00000000 00000000     ................
	...
   3740c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37438:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   37450:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3746c:	ffffffff ffffffff 00000000 00000000     ................
   3747c:	ffffffff ffffffff 00000000 00000000     ................
   3748c:	ffffffff ffffffff 00000000 00000000     ................
   3749c:	00000000 ffffffff ffffffff ffffffff     ................
   374ac:	ffffffff 00000000 00000000 00000000     ................
	...
   375cc:	ffffffff ffffffff 00000000 00000000     ................
	...
   375f0:	ffffffff ffffffff 00000000 00000000     ................
   37600:	ffffffff ffffffff 00000000 00000000     ................
   37610:	ffffffff ffffffff 00000000 00000000     ................
   37620:	00000000 ffffffff ffffffff ffffffff     ................
   37630:	ffffffff 00000000 00000000 00000000     ................
   37640:	ffffffff ffffffff 00000000 00000000     ................
	...
   37660:	ffffffff ffffffff 00000000 00000000     ................
	...
   3768c:	ffffffff ffffffff 00000000 00000000     ................
	...
   376bc:	ffffffff ffffffff 00000000 00000000     ................
	...
   376d4:	ffffffff ffffffff 00000000 00000000     ................
	...
   376ec:	ffffffff ffffffff 00000000 00000000     ................
   376fc:	ffffffff ffffffff 00000000 00000000     ................
   3770c:	ffffffff ffffffff 00000000 00000000     ................
	...
   3772c:	ffffffff ffffffff 00000000 00000000     ................
	...
   3784c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37870:	ffffffff ffffffff 00000000 00000000     ................
   37880:	ffffffff ffffffff 00000000 00000000     ................
   37890:	ffffffff ffffffff 00000000 00000000     ................
   378a0:	00000000 ffffffff ffffffff ffffffff     ................
   378b0:	ffffffff 00000000 00000000 00000000     ................
   378c0:	ffffffff ffffffff 00000000 00000000     ................
	...
   378e0:	ffffffff ffffffff 00000000 00000000     ................
	...
   3790c:	ffffffff ffffffff 00000000 00000000     ................
	...
   3793c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37954:	ffffffff ffffffff 00000000 00000000     ................
	...
   3796c:	ffffffff ffffffff 00000000 00000000     ................
   3797c:	ffffffff ffffffff 00000000 00000000     ................
   3798c:	ffffffff ffffffff 00000000 00000000     ................
	...
   379ac:	ffffffff ffffffff 00000000 00000000     ................
	...
   37acc:	ffffffff ffffffff 00000000 00000000     ................
	...
   37af0:	ffffffff ffffffff 00000000 00000000     ................
   37b00:	ffffffff ffffffff 00000000 00000000     ................
   37b10:	ffffffff ffffffff 00000000 00000000     ................
   37b20:	00000000 ffffffff ffffffff ffffffff     ................
   37b30:	ffffffff 00000000 00000000 00000000     ................
   37b40:	ffffffff ffffffff 00000000 00000000     ................
   37b50:	ffffffff ffffffff 00000000 00000000     ................
   37b60:	ffffffff ffffffff 00000000 00000000     ................
	...
   37b8c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37bbc:	ffffffff ffffffff 00000000 00000000     ................
	...
   37bd4:	ffffffff ffffffff 00000000 00000000     ................
	...
   37bec:	ffffffff ffffffff 00000000 00000000     ................
   37bfc:	ffffffff ffffffff 00000000 00000000     ................
   37c0c:	ffffffff ffffffff 00000000 00000000     ................
   37c1c:	ffffffff ffffffff 00000000 00000000     ................
   37c2c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37d4c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37d70:	ffffffff ffffffff 00000000 00000000     ................
   37d80:	ffffffff ffffffff 00000000 00000000     ................
   37d90:	ffffffff ffffffff 00000000 00000000     ................
   37da0:	00000000 ffffffff ffffffff ffffffff     ................
   37db0:	ffffffff 00000000 00000000 00000000     ................
   37dc0:	ffffffff ffffffff 00000000 00000000     ................
   37dd0:	ffffffff ffffffff 00000000 00000000     ................
   37de0:	ffffffff ffffffff 00000000 00000000     ................
	...
   37e0c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37e3c:	ffffffff ffffffff 00000000 00000000     ................
	...
   37e54:	ffffffff ffffffff 00000000 00000000     ................
	...
   37e6c:	ffffffff ffffffff 00000000 00000000     ................
   37e7c:	ffffffff ffffffff 00000000 00000000     ................
   37e8c:	ffffffff ffffffff 00000000 00000000     ................
   37e9c:	ffffffff ffffffff 00000000 00000000     ................
   37eac:	ffffffff ffffffff 00000000 00000000     ................
	...
   37fcc:	ffffffff ffffffff 00000000 00000000     ................
	...
   37ff0:	ffffffff ffffffff 00000000 00000000     ................
   38000:	00000000 ffffffff ffffffff ffffffff     ................
   38010:	ffffffff ffffffff 00000000 00000000     ................
	...
   38028:	ffffffff ffffffff 00000000 00000000     ................
	...
   38044:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   38060:	ffffffff ffffffff 00000000 00000000     ................
	...
   3808c:	ffffffff ffffffff 00000000 00000000     ................
	...
   380bc:	ffffffff ffffffff 00000000 00000000     ................
	...
   380d4:	ffffffff ffffffff 00000000 00000000     ................
	...
   380ec:	ffffffff ffffffff 00000000 00000000     ................
   380fc:	ffffffff ffffffff 00000000 00000000     ................
   3810c:	ffffffff ffffffff 00000000 00000000     ................
   3811c:	00000000 ffffffff ffffffff ffffffff     ................
   3812c:	ffffffff 00000000 00000000 00000000     ................
	...
   3824c:	ffffffff ffffffff 00000000 00000000     ................
	...
   38270:	ffffffff ffffffff 00000000 00000000     ................
   38280:	00000000 ffffffff ffffffff ffffffff     ................
   38290:	ffffffff ffffffff 00000000 00000000     ................
	...
   382a8:	ffffffff ffffffff 00000000 00000000     ................
	...
   382c4:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   382e0:	ffffffff ffffffff 00000000 00000000     ................
	...
   3830c:	ffffffff ffffffff 00000000 00000000     ................
	...
   3833c:	ffffffff ffffffff 00000000 00000000     ................
	...
   38354:	ffffffff ffffffff 00000000 00000000     ................
	...
   3836c:	ffffffff ffffffff 00000000 00000000     ................
   3837c:	ffffffff ffffffff 00000000 00000000     ................
   3838c:	ffffffff ffffffff 00000000 00000000     ................
   3839c:	00000000 ffffffff ffffffff ffffffff     ................
   383ac:	ffffffff 00000000 00000000 00000000     ................
	...
   38528:	ffffffff ffffffff 00000000 00000000     ................
	...
   387a8:	ffffffff ffffffff 00000000 00000000     ................
	...
   38a24:	ffffffff ffffffff 00000000 00000000     ................
	...
   38ca4:	ffffffff ffffffff 00000000 00000000     ................
	...
   38f20:	ffffffff ffffffff 00000000 00000000     ................
	...
   391a0:	ffffffff ffffffff 00000000 00000000     ................
	...

0004c94c <_global_impure_ptr>:
   4c94c:	0004c9c0 00000043                       ....C...

0004c954 <_init>:
   4c954:	e1a0c00d 	mov	r12, sp
   4c958:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
   4c95c:	e24cb004 	sub	r11, r12, #4
   4c960:	e24bd028 	sub	sp, r11, #40	; 0x28
   4c964:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
   4c968:	e12fff1e 	bx	lr

0004c96c <__init_array_start>:
   4c96c:	000014d8 	.word	0x000014d8

0004c970 <__frame_dummy_init_array_entry>:
   4c970:	00000208                                ....

0004c974 <__libc_fini>:
   4c974:	e1a0c00d 	mov	r12, sp
   4c978:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
   4c97c:	e24cb004 	sub	r11, r12, #4
   4c980:	e24bd028 	sub	sp, r11, #40	; 0x28
   4c984:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
   4c988:	e12fff1e 	bx	lr

0004c98c <__fini_array_start>:
   4c98c:	000001c4 	.word	0x000001c4

0004c990 <__cs3_regions>:
   4c990:	00000000 	.word	0x00000000
   4c994:	00000040 	.word	0x00000040
   4c998:	00000040 	.word	0x00000040
   4c99c:	0004cdb0 	.word	0x0004cdb0
   4c9a0:	00000118 	.word	0x00000118

0004c9a4 <__cs3_regions_end>:
   4c9a4:	00000000 	.word	0x00000000
